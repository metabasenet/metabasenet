{
    "templaterequest": {
        "type": "class",
        "name": "TemplateRequest",
        "content": {
            "type": {
                "type": "string",
                "desc": "template type"
            },
            "delegate": {
                "type": "object",
                "desc": "a delegate template",
                "condition": "type=delegate",
                "content": {
                    "mint": {
                        "type": "string",
                        "desc": "mint address"
                    },
                    "owner": {
                        "type": "string",
                        "desc": "owner address"
                    },
                    "rewardratio": {
                        "type": "uint",
                        "desc": "reward ratio, range: 0~10000"
                    }
                }
            },
            "vote": {
                "type": "object",
                "desc": "a vote template",
                "condition": "type=vote",
                "content": {
                    "delegate": {
                        "type": "string",
                        "desc": "delegate template address"
                    },
                    "owner": {
                        "type": "string",
                        "desc": "owner address"
                    },
                    "rewardmode": {
                        "type": "int",
                        "desc": "reward mode, 0: reward vote address, 1: reward owner address"
                    }
                }
            },
            "pledge": {
                "type": "object",
                "desc": "a pledge template",
                "condition": "type=pledge",
                "content": {
                    "delegate": {
                        "type": "string",
                        "desc": "delegate template address"
                    },
                    "owner": {
                        "type": "string",
                        "desc": "owner address"
                    },
                    "pledgetype": {
                        "type": "int",
                        "desc": "pledge type"
                    },
                    "cycles": {
                        "type": "int",
                        "desc": "cycles"
                    },
                    "nonce": {
                        "type": "int",
                        "desc": "nonce"
                    }
                }
            },
            "fork": {
                "type": "object",
                "desc": "a new fork template",
                "condition": "type=fork",
                "content": {
                    "redeem": {
                        "type": "string",
                        "desc": "redeem address"
                    },
                    "fork": {
                        "type": "string",
                        "desc": "fork hash"
                    }
                }
            },
            "mint": {
                "type": "object",
                "desc": "a mint template",
                "condition": "type=mint",
                "content": {
                    "mint": {
                        "type": "string",
                        "desc": "mint public key"
                    },
                    "spent": {
                        "type": "string",
                        "desc": "spent address"
                    }
                }
            },
            "activatecode": {
                "type": "object",
                "desc": "a activatecode template",
                "condition": "type=activatecode",
                "content": {
                    "grant": {
                        "type": "string",
                        "desc": "grant address"
                    }
                }
            }
        }
    },
    "templateresponse": {
        "type": "class",
        "name": "TemplateResponse",
        "content": {
            "type": {
                "type": "string",
                "desc": "template type"
            },
            "hex": {
                "type": "string",
                "desc": "temtplate data"
            },
            "delegate": {
                "type": "object",
                "desc": "delegate template struct",
                "condition": "type=delegate",
                "content": {
                    "mint": {
                        "type": "string",
                        "desc": "mint address"
                    },
                    "owner": {
                        "type": "string",
                        "desc": "owner address"
                    },
                    "rewardratio": {
                        "type": "uint",
                        "desc": "reward ratio, range: 0~10000"
                    }
                }
            },
            "vote": {
                "type": "object",
                "desc": "vote template struct",
                "condition": "type=vote",
                "content": {
                    "delegate": {
                        "type": "string",
                        "desc": "delegate template address"
                    },
                    "owner": {
                        "type": "string",
                        "desc": "owner address"
                    },
                    "rewardmode": {
                        "type": "int",
                        "desc": "reward mode, 0: reward vote address, 1: reward owner address"
                    }
                }
            },
            "pledge": {
                "type": "object",
                "desc": "a pledge template",
                "condition": "type=pledge",
                "content": {
                    "delegate": {
                        "type": "string",
                        "desc": "delegate template address"
                    },
                    "owner": {
                        "type": "string",
                        "desc": "owner address"
                    },
                    "pledgetype": {
                        "type": "int",
                        "desc": "pledge type"
                    },
                    "cycles": {
                        "type": "int",
                        "desc": "cycles"
                    },
                    "nonce": {
                        "type": "int",
                        "desc": "nonce"
                    }
                }
            },
            "fork": {
                "type": "object",
                "desc": "fork template struct",
                "condition": "type=fork",
                "content": {
                    "redeem": {
                        "type": "string",
                        "desc": "redeem address"
                    },
                    "fork": {
                        "type": "string",
                        "desc": "fork hash"
                    }
                }
            },
            "mint": {
                "type": "object",
                "desc": "mint template struct",
                "condition": "type=mint",
                "content": {
                    "mint": {
                        "type": "string",
                        "desc": "mint public key"
                    },
                    "spent": {
                        "type": "string",
                        "desc": "spent address"
                    }
                }
            },
            "activatecode": {
                "type": "object",
                "desc": "a activatecode template",
                "condition": "type=activatecode",
                "content": {
                    "grant": {
                        "type": "string",
                        "desc": "grant address"
                    }
                }
            }
        }
    },
    "transactiondata": {
        "type": "class",
        "name": "TransactionData",
        "content": {
            "txid": {
                "type": "string",
                "desc": "transaction hash",
                "required": false
            },
            "type": {
                "type": "string",
                "desc": "transaction type",
                "required": false
            },
            "nonce": {
                "type": "uint",
                "desc": "nonce",
                "required": false
            },
            "from": {
                "type": "string",
                "desc": "from address",
                "required": false
            },
            "to": {
                "type": "string",
                "desc": "to address",
                "required": false
            },
            "amount": {
                "type": "string",
                "desc": "amount (big float)",
                "required": false
            },
            "gaslimit": {
                "type": "uint",
                "desc": "gas limit",
                "required": false
            },
            "gasprice": {
                "type": "string",
                "desc": "gas price (big float)",
                "required": false
            },
            "txfee": {
                "type": "string",
                "desc": "transaction limit fee (big float)",
                "required": false
            },
            "data": {
                "type": "string",
                "desc": "data",
                "required": false
            },
            "signhash": {
                "type": "string",
                "desc": "sign hash",
                "required": false
            },
            "sig": {
                "type": "string",
                "desc": "sign",
                "required": false
            },
            "fork": {
                "type": "string",
                "desc": "fork hash",
                "required": false
            },
            "height": {
                "type": "int",
                "desc": "height",
                "required": false
            },
            "blockhash": {
                "type": "string",
                "desc": "which block tx located in",
                "required": false
            },
            "confirmations": {
                "type": "int",
                "desc": "confirmations",
                "required": false
            }
        }
    },
    "wallettxdata": {
        "type": "class",
        "name": "WalletTxData",
        "content": {
            "txid": {
                "type": "string",
                "desc": "transaction hash"
            },
            "txindex": {
                "type": "int",
                "desc": "tx index"
            },
            "blocknumber": {
                "type": "uint",
                "desc": "block number"
            },
            "transfertype": {
                "type": "string",
                "desc": "transfer type"
            },
            "txtype": {
                "type": "string",
                "desc": "transaction type"
            },
            "time": {
                "type": "uint",
                "desc": "transaction timestamp"
            },
            "from": {
                "type": "string",
                "desc": "from address"
            },
            "to": {
                "type": "string",
                "desc": "to address"
            },
            "amount": {
                "type": "string",
                "desc": "transaction amount (big float)"
            },
            "fee": {
                "type": "string",
                "desc": "transaction fee (big float)"
            }
        }
    },
    "ethtxdata": {
        "type": "class",
        "name": "EthTxData",
        "content": {
            "hash": {
                "type": "string",
                "desc": "transaction hash"
            },
            "nonce": {
                "type": "string",
                "desc": "tx nonce(hex)"
            },
            "blockHash": {
                "type": "string",
                "desc": "block hash",
                "required": false
            },
            "blockNumber": {
                "type": "string",
                "desc": "block number",
                "required": false
            },
            "transactionIndex": {
                "type": "string",
                "desc": "transaction index(hex)",
                "required": false
            },
            "from": {
                "type": "string",
                "desc": "from address"
            },
            "to": {
                "type": "string",
                "desc": "to address",
                "required": false
            },
            "value": {
                "type": "string",
                "desc": "transaction amount(hex), unit: wei"
            },
            "gasPrice": {
                "type": "string",
                "desc": "gas price(hex), unit: wei"
            },
            "gas": {
                "type": "string",
                "desc": "gas(hex)"
            },
            "input": {
                "type": "string",
                "desc": "input data"
            }
        }
    },
    "ethsendtxparam": {
        "type": "class",
        "name": "EthSendTxParam",
        "content": {
            "from": {
                "type": "string",
                "desc": "from address",
                "required": false
            },
            "to": {
                "type": "string",
                "desc": "to address",
                "required": false
            },
            "nonce": {
                "type": "string",
                "desc": "nonce",
                "required": false
            },
            "value": {
                "type": "string",
                "desc": "transaction amount(hex), unit: wei",
                "required": false
            },
            "gasPrice": {
                "type": "string",
                "desc": "gas price(hex), unit: wei",
                "required": false
            },
            "gas": {
                "type": "string",
                "desc": "gas(hex)",
                "required": false
            },
            "data": {
                "type": "string",
                "desc": "input data",
                "required": false
            }
        }
    },
    "ethcalltxparam": {
        "type": "class",
        "name": "EthCallTxParam",
        "content": {
            "from": {
                "type": "string",
                "desc": "from address",
                "required": false
            },
            "to": {
                "type": "string",
                "desc": "to address",
                "required": false
            },
            "nonce": {
                "type": "string",
                "desc": "nonce",
                "required": false
            },
            "value": {
                "type": "string",
                "desc": "transaction amount(hex), unit: wei",
                "required": false
            },
            "gasPrice": {
                "type": "string",
                "desc": "gas price(hex), unit: wei",
                "required": false
            },
            "gas": {
                "type": "string",
                "desc": "gas(hex)",
                "required": false
            },
            "data": {
                "type": "string",
                "desc": "input data",
                "required": false
            },
            "code": {
                "type": "string",
                "desc": "code data",
                "required": false
            },
            "block": {
                "type": "string",
                "desc": "block hash or number or latest, earliest, pending",
                "required": false
            }
        }
    },
    "ethtransaction": {
        "type": "class",
        "name": "EthTransaction",
        "content": {
            "hash": {
                "type": "string",
                "desc": "tx hash",
                "required": false
            },
            "nonce": {
                "type": "string",
                "desc": "tx nonce",
                "required": false
            },
            "blockHash": {
                "type": "string",
                "desc": "block hash",
                "required": false
            },
            "blockNumber": {
                "type": "string",
                "desc": "block number",
                "required": false
            },
            "transactionIndex": {
                "type": "string",
                "desc": "tx index",
                "required": false
            },
            "from": {
                "type": "string",
                "desc": "tx from",
                "required": false
            },
            "to": {
                "type": "string",
                "desc": "tx to",
                "required": false
            },
            "value": {
                "type": "string",
                "desc": "tx value",
                "required": false
            },
            "gasPrice": {
                "type": "string",
                "desc": "tx gas price",
                "required": false
            },
            "gas": {
                "type": "string",
                "desc": "tx gas",
                "required": false
            },
            "input": {
                "type": "string",
                "desc": "tx input data",
                "required": false
            },
            "type": {
                "type": "string",
                "desc": "tx type",
                "required": false
            },
            "chainId": {
                "type": "string",
                "desc": "chain id",
                "required": false
            },
            "v": {
                "type": "string",
                "desc": "v",
                "required": false
            },
            "r": {
                "type": "string",
                "desc": "r",
                "required": false
            },
            "s": {
                "type": "string",
                "desc": "s",
                "required": false
            }
        }
    },
    "ethblock": {
        "type": "class",
        "name": "EthBlock",
        "content": {
            "number": {
                "type": "string",
                "desc": "block number"
            },
            "hash": {
                "type": "string",
                "desc": "block hash"
            },
            "parentHash": {
                "type": "string",
                "desc": "parent block hash"
            },
            "nonce": {
                "type": "string",
                "desc": "block nonce"
            },
            "sha3Uncles": {
                "type": "string",
                "desc": "block sha3Uncles"
            },
            "logsBloom": {
                "type": "string",
                "desc": "block logsBloom"
            },
            "transactionsRoot": {
                "type": "string",
                "desc": "block transactionsRoot"
            },
            "stateRoot": {
                "type": "string",
                "desc": "block stateRoot"
            },
            "receiptsRoot": {
                "type": "string",
                "desc": "block receiptsRoot"
            },
            "miner": {
                "type": "string",
                "desc": "block miner"
            },
            "mixHash": {
                "type": "string",
                "desc": "block mix hash"
            },
            "difficulty": {
                "type": "string",
                "desc": "block difficulty"
            },
            "totalDifficulty": {
                "type": "string",
                "desc": "block totalDifficulty"
            },
            "extraData": {
                "type": "string",
                "desc": "block extraData"
            },
            "size": {
                "type": "string",
                "desc": "block size"
            },
            "gasLimit": {
                "type": "string",
                "desc": "block gasLimit"
            },
            "gasUsed": {
                "type": "string",
                "desc": "block gasUsed"
            },
            "timestamp": {
                "type": "string",
                "desc": "block timestamp"
            },
            "transactions": {
                "type": "array",
                "desc": "transaction hash list",
                "required": false,
                "content": {
                    "tx": {
                        "type": "string",
                        "desc": "transaction hash"
                    }
                }
            },
            "transactiondetails": {
                "type": "array",
                "desc": "transaction detail list",
                "required": false,
                "content": {
                    "tx": {
                        "type": "ethtransaction",
                        "desc": "transaction detail"
                    }
                }
            },
            "uncles": {
                "type": "array",
                "desc": "block uncle list",
                "content": {
                    "uncle": {
                        "type": "string",
                        "desc": "block uncle hash"
                    }
                }
            }
        }
    },
    "blockdata": {
        "type": "class",
        "name": "BlockData",
        "content": {
            "hash": {
                "type": "string",
                "desc": "block hash"
            },
            "prev": {
                "type": "string",
                "desc": "previous block hash"
            },
            "chainid": {
                "type": "uint",
                "desc": "chain id"
            },
            "fork": {
                "type": "string",
                "desc": "fork hash"
            },
            "version": {
                "type": "uint",
                "desc": "version"
            },
            "type": {
                "type": "string",
                "desc": "block type"
            },
            "time": {
                "type": "uint",
                "desc": "block time"
            },
            "number": {
                "type": "uint",
                "desc": "block number"
            },
            "height": {
                "type": "uint",
                "desc": "block height"
            },
            "slot": {
                "type": "uint",
                "desc": "block slot"
            },
            "reward": {
                "type": "string",
                "desc": "block reward"
            },
            "stateroot": {
                "type": "string",
                "desc": "state root"
            },
            "receiptsroot": {
                "type": "string",
                "desc": "receipts root"
            },
            "bloom": {
                "type": "string",
                "desc": "block bloom"
            },
            "txmint": {
                "type": "string",
                "desc": "transaction mint hash"
            },
            "tx": {
                "type": "array",
                "desc": "transaction hash list",
                "content": {
                    "tx": {
                        "type": "string",
                        "desc": "transaction hash"
                    }
                }
            }
        }
    },
    "blockdatadetail": {
        "type": "class",
        "name": "blockdatadetail",
        "content": {
            "hash": {
                "type": "string",
                "desc": "block hash"
            },
            "prev": {
                "type": "string",
                "desc": "previous block hash"
            },
            "chainid": {
                "type": "uint",
                "desc": "chain id"
            },
            "fork": {
                "type": "string",
                "desc": "fork hash"
            },
            "version": {
                "type": "uint",
                "desc": "version"
            },
            "type": {
                "type": "string",
                "desc": "block type"
            },
            "time": {
                "type": "uint",
                "desc": "block time"
            },
            "number": {
                "type": "uint",
                "desc": "block number"
            },
            "height": {
                "type": "uint",
                "desc": "block height"
            },
            "slot": {
                "type": "uint",
                "desc": "block slot"
            },
            "reward": {
                "type": "string",
                "desc": "block reward"
            },
            "stateroot": {
                "type": "string",
                "desc": "state root"
            },
            "receiptsroot": {
                "type": "string",
                "desc": "receipts root"
            },
            "bloom": {
                "type": "string",
                "desc": "block bloom"
            },
            "txmint": {
                "type": "transactiondata",
                "desc": "transaction mint data"
            },
            "tx": {
                "type": "array",
                "desc": "transaction hash list",
                "content": {
                    "tx": {
                        "type": "transactiondata",
                        "desc": "transaction data"
                    }
                }
            }
        }
    },
    "txreceiptlogs": {
        "type": "class",
        "name": "TxReceiptLogs",
        "content": {
            "removed": {
                "type": "bool",
                "desc": "removed",
                "required": false
            },
            "logIndex": {
                "type": "string",
                "desc": "log index",
                "required": false
            },
            "transactionIndex": {
                "type": "string",
                "desc": "transaction index",
                "required": false
            },
            "transactionHash": {
                "type": "string",
                "desc": "transaction hash",
                "required": false
            },
            "blockNumber": {
                "type": "string",
                "desc": "block number",
                "required": false
            },
            "blockHash": {
                "type": "string",
                "desc": "block hash",
                "required": false
            },
            "address": {
                "type": "string",
                "desc": "address",
                "required": false
            },
            "data": {
                "type": "string",
                "desc": "data",
                "required": false
            },
            "topics": {
                "type": "array",
                "desc": "topics list",
                "required": false,
                "content": {
                    "tp": {
                        "type": "string",
                        "desc": "topics data"
                    }
                }
            }
        }
    },
    "newfilter": {
        "type": "class",
        "name": "NewFilter",
        "content": {
            "fromBlock": {
                "type": "string",
                "desc": "fromBlock: block hash or number or latesr or pending or earliest",
                "required": false
            },
            "toBlock": {
                "type": "string",
                "desc": "toBlock: block hash or number or latesr or pending or earliest",
                "required": false
            },
            "address": {
                "type": "string",
                "desc": "address",
                "required": false
            },
            "topics": {
                "type": "array",
                "desc": "topics list",
                "required": false,
                "content": {
                    "tp": {
                        "type": "string",
                        "desc": "topics data"
                    }
                }
            }
        }
    },
    "help": {
        "type": "command",
        "name": "Help",
        "desc": "List commands, or get help for a command.",
        "request": {
            "type": "object",
            "content": {
                "command": {
                    "type": "string",
                    "desc": "command name",
                    "required": false
                }
            }
        },
        "response": {
            "type": "string",
            "name": "help",
            "desc": "help info"
        },
        "example": [
            "metabasenet-cli help",
            "metabasenet-cli help getpeercount"
        ]
    },
    "stop": {
        "type": "command",
        "name": "Stop",
        "desc": "Stop metabasenet server.",
        "request": {
            "type": "object",
            "content": {}
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "stop result"
        },
        "example": [
            {
                "request": "metabasenet-cli stop",
                "response": "metabasenet server stopping"
            },
            {
                "request": "curl -d '{\"id\":1,\"method\":\"stop\",\"jsonrpc\":\"2.0\",\"params\":{}}' http://127.0.0.1:8812",
                "response": "{\"id\":1,\"jsonrpc\":\"2.0\",\"result\":\"metabasenet server stopping\"}"
            }
        ]
    },
    "version": {
        "type": "command",
        "name": "Version",
        "desc": "Get metabasenet server version.",
        "request": {
            "type": "object",
            "content": {}
        },
        "response": {
            "type": "string",
            "name": "version",
            "desc": "metabasenet version"
        },
        "example": [
            {
                "request": "metabasenet-cli version",
                "response": "MetabaseNet server version is v0.1.0"
            },
            {
                "request": "curl -d '{\"id\":0,\"method\":\"version\",\"jsonrpc\":\"2.0\",\"params\":{}}' http://127.0.0.1:8812",
                "response": "{\"id\":0,\"jsonrpc\":\"2.0\",\"result\":\"MetabaseNet server version is v0.1.0\"}"
            }
        ]
    },
    "getpeercount": {
        "type": "command",
        "name": "GetPeerCount",
        "desc": "Return the number of connections to other nodes.",
        "request": {
            "type": "object",
            "content": {}
        },
        "response": {
            "type": "int",
            "name": "count",
            "desc": "peer count"
        },
        "example": [
            {
                "request": "metabasenet-cli getpeercount",
                "response": "0"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"getpeercount\",\"jsonrpc\":\"2.0\",\"params\":{}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":0}"
            }
        ]
    },
    "listpeer": {
        "type": "command",
        "name": "ListPeer",
        "desc": "Return data about each connected network node.",
        "request": {
            "type": "object",
            "content": {}
        },
        "response": {
            "type": "array",
            "name": "peer",
            "content": {
                "peer": {
                    "type": "object",
                    "content": {
                        "address": {
                            "type": "string",
                            "desc": "peer address"
                        },
                        "services": {
                            "type": "string",
                            "desc": "service"
                        },
                        "lastsend": {
                            "type": "string",
                            "desc": "last send time(utc)"
                        },
                        "lastrecv": {
                            "type": "string",
                            "desc": "last receive time(utc)"
                        },
                        "conntime": {
                            "type": "string",
                            "desc": "active time(utc)"
                        },
                        "pingtime": {
                            "type": "int",
                            "desc": "ping pong time"
                        },
                        "version": {
                            "type": "string",
                            "desc": "version"
                        },
                        "subver": {
                            "type": "string",
                            "desc": "sub version"
                        },
                        "inbound": {
                            "type": "bool",
                            "desc": "accept multiple connection or not"
                        },
                        "height": {
                            "type": "int",
                            "desc": "starting height"
                        },
                        "banscore": {
                            "type": "int",
                            "desc": "ban score"
                        }
                    }
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli listpeer",
                "response": "[{\"address\":\"113.105.146.22\",\"services\":\"NODE_NETWORK,NODE_DELEGATED\",\"lastsend\":\"2019-10-25 03:11:09\",\"lastrecv\":\"2019-10-25 03:11:09\",\"conntime\":\"2019-10-25 03:05:23\",\"version\":\"0.1.0\",\"subver\":\"/MetabaseNet:0.9.2/Protocol:0.1.0/9be9a865898c5cea90c716c17603cf3f0f185a5b\",\"inbound\":false,\"height\":31028,\"banscore\":true}]"
            },
            {
                "request": "curl -d '{\"id\":40,\"method\":\"listpeer\",\"jsonrpc\":\"2.0\",\"params\":{}}' http://127.0.0.1:8812",
                "response": "{\"id\":40,\"jsonrpc\":\"2.0\",\"result\":[{\"address\":\"113.105.146.22\",\"services\":\"NODE_NETWORK,NODE_DELEGATED\",\"lastsend\":\"2019-10-25 03:11:09\",\"lastrecv\":\"2019-10-25 03:11:09\",\"conntime\":\"2019-10-25 03:05:23\",\"version\":\"0.1.0\",\"subver\":\"/MetabaseNet:0.9.2/Protocol:0.1.0/9be9a865898c5cea90c716c17603cf3f0f185a5b\",\"inbound\":false,\"height\":31028,\"banscore\":true}]}"
            }
        ]
    },
    "addnode": {
        "type": "command",
        "name": "AddNode",
        "desc": "Attempt to add a node into the addnode list.",
        "request": {
            "type": "object",
            "content": {
                "node": {
                    "type": "string",
                    "desc": "node host:port"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "add node result"
        },
        "example": [
            {
                "request": "metabasenet-cli addnode 113.105.146.22",
                "response": "Add node successfully: 113.105.146.22"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"addnode\",\"jsonrpc\":\"2.0\",\"params\":{\"node\":\"113.105.146.22:8811\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"Add node successfully: 113.105.146.22:8811\"}"
            }
        ],
        "error": "{\"code\":-206,\"message\":\"Failed to add node.\"}"
    },
    "removenode": {
        "type": "command",
        "name": "RemoveNode",
        "desc": "Attempt to remove a node from the addnode list.",
        "request": {
            "type": "object",
            "content": {
                "node": {
                    "type": "string",
                    "desc": "node host:port"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "remove node result"
        },
        "example": [
            {
                "request": "metabasenet-cli removenode 113.105.146.22",
                "response": "Remove node successfully: 113.105.146.22"
            },
            {
                "request": "curl -d '{\"id\":67,\"method\":\"removenode\",\"jsonrpc\":\"2.0\",\"params\":{\"node\":\"113.105.146.22:8811\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":67,\"jsonrpc\":\"2.0\",\"result\":\"Remove node successfully: 113.105.146.22:8811\"}"
            }
        ],
        "error": "{\"code\":-6,\"message\":\"Failed to remove node.\"}"
    },
    "getforkport": {
        "type": "command",
        "name": "GetForkPort",
        "desc": "Get rpc listen port of fork.",
        "request": {
            "type": "object",
            "content": {
                "forkid": {
                    "type": "string",
                    "desc": "fork id or chain id"
                }
            }
        },
        "response": {
            "type": "uint",
            "name": "port",
            "desc": "rpc listen port"
        },
        "example": [
            {
                "request": "metabasenet-cli getforkport 0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55",
                "response": "6002"
            },
            {
                "request": "metabasenet-cli getforkport 202",
                "response": "6002"
            },
            {
                "request": "curl -d '{\"id\":67,\"method\":\"getforkport\",\"jsonrpc\":\"2.0\",\"params\":{\"forkid\":\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":67,\"jsonrpc\":\"2.0\",\"result\":6002}"
            },
            {
                "request": "curl -d '{\"id\":67,\"method\":\"getforkport\",\"jsonrpc\":\"2.0\",\"params\":{\"forkid\":\"202\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":67,\"jsonrpc\":\"2.0\",\"result\":6002}"
            }
        ],
        "error": [
            "{\"code\":-2,\"message\":\"Permission denied\"}",
            "{\"code\":-206,\"message\":\"Invalid forkid\"}"
        ]
    },
    "getforkcount": {
        "type": "command",
        "name": "GetForkCount",
        "desc": "Return the number of forks.",
        "request": {
            "type": "object",
            "content": {}
        },
        "response": {
            "type": "int",
            "name": "count",
            "desc": "fork count"
        },
        "example": [
            {
                "request": "metabasenet-cli getforkcount",
                "response": "1"
            },
            {
                "request": "curl -d '{\"id\":69,\"method\":\"getforkcount\",\"jsonrpc\":\"2.0\",\"params\":{}}' http://127.0.0.1:8812",
                "response": "{\"id\":69,\"jsonrpc\":\"2.0\",\"result\":1}"
            }
        ]
    },
    "listfork": {
        "type": "command",
        "name": "ListFork",
        "desc": "If true, list of all forks, or subscribed forks",
        "request": {
            "type": "object",
            "content": {
                "all": {
                    "type": "bool",
                    "desc": "list all forks or not",
                    "opt": "a",
                    "default": false,
                    "required": false
                }
            }
        },
        "response": {
            "type": "array",
            "name": "profile",
            "desc": "fork profile list",
            "content": {
                "profile": {
                    "type": "object",
                    "desc": "fork profile info",
                    "content": {
                        "fork": {
                            "type": "string",
                            "desc": "fork id with hex system"
                        },
                        "type": {
                            "type": "string",
                            "desc": "fork type"
                        },
                        "chainid": {
                            "type": "uint",
                            "desc": "chain id"
                        },
                        "name": {
                            "type": "string",
                            "desc": "fork name"
                        },
                        "symbol": {
                            "type": "string",
                            "desc": "fork symbol"
                        },
                        "amount": {
                            "type": "string",
                            "desc": "amount (big float)"
                        },
                        "reward": {
                            "type": "string",
                            "desc": "mint reward (big float)"
                        },
                        "halvecycle": {
                            "type": "uint",
                            "desc": "halve cycle: 0: fixed reward, >0: blocks of halve cycle"
                        },
                        "owner": {
                            "type": "string",
                            "desc": "owner's address"
                        },
                        "createtxid": {
                            "type": "string",
                            "desc": "create fork txid"
                        },
                        "createforkheight": {
                            "type": "int",
                            "desc": "create fork height"
                        },
                        "parentfork": {
                            "type": "string",
                            "desc": "parent fork"
                        },
                        "forkheight": {
                            "type": "int",
                            "desc": "fork height"
                        },
                        "lasttype": {
                            "type": "string",
                            "desc": "last block type"
                        },
                        "lastnumber": {
                            "type": "uint",
                            "desc": "last block number"
                        },
                        "lastslot": {
                            "type": "uint",
                            "desc": "last block slot"
                        },
                        "lastblock": {
                            "type": "string",
                            "desc": "last block hash"
                        },
                        "totaltxcount": {
                            "type": "uint",
                            "desc": "total tx count"
                        },
                        "rewardtxcount": {
                            "type": "uint",
                            "desc": "reward tx count"
                        },
                        "usertxcount": {
                            "type": "uint",
                            "desc": "user tx count"
                        },
                        "addresscount": {
                            "type": "uint",
                            "desc": "address count"
                        },
                        "moneysupply": {
                            "type": "string",
                            "desc": "money supply (big float)"
                        },
                        "moneydestroy": {
                            "type": "string",
                            "desc": "money destroy (big float)"
                        }
                    }
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli listfork",
                "response": "[{\"fork\":\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\",\"type\":\"main\",\"chainid\":201,\"name\":\"HAHCoretest\",\"symbol\":\"HAHT\",\"amount\":\"200000000.0\",\"reward\":\"130.0\",\"halvecycle\":0,\"owner\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"createtxid\":\"0xad988352e0e560a9766444c8fb0b7277332835da0b4903c0e65dd272a617fce4\",\"createforkheight\":0,\"parentfork\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"forkheight\":1387,\"lastnumber\":1387,\"lastblock\":\"0x0000056bcc305fb7ae6691f0fb96055ad6afa6ec8e6b19d8e8e0dee60a168d7c\",\"totaltxcount\":14117,\"usertxcount\":22,\"moneysupply\":\"200164580.0\",\"moneydestroy\":\"0.0\"}]"
            },
            {
                "request": "{\"id\":69,\"method\":\"listfork\",\"jsonrpc\":\"2.0\",\"params\":{}}",
                "response": "{\"id\":69,\"jsonrpc\":\"2.0\",\"result\":[{\"fork\":\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\",\"type\":\"main\",\"chainid\":201,\"name\":\"HAHCoretest\",\"symbol\":\"HAHT\",\"amount\":\"200000000.0\",\"reward\":\"130.0\",\"halvecycle\":0,\"owner\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"createtxid\":\"0xad988352e0e560a9766444c8fb0b7277332835da0b4903c0e65dd272a617fce4\",\"createforkheight\":0,\"parentfork\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"forkheight\":1387,\"lastnumber\":1387,\"lastblock\":\"0x0000056bcc305fb7ae6691f0fb96055ad6afa6ec8e6b19d8e8e0dee60a168d7c\",\"totaltxcount\":14117,\"usertxcount\":22,\"moneysupply\":\"200164580.0\",\"moneydestroy\":\"0.0\"}]}"
            }
        ]
    },
    "getgenealogy": {
        "type": "command",
        "name": "GetGenealogy",
        "desc": "Return the list of ancestry and subline.",
        "request": {
            "type": "object",
            "content": {
                "fork": {
                    "type": "string",
                    "desc": "fork hash",
                    "required": false,
                    "opt": "f"
                }
            }
        },
        "response": {
            "type": "object",
            "name": "ancestry",
            "content": {
                "ancestry": {
                    "type": "array",
                    "desc": "ancestry info",
                    "content": {
                        "ancestry": {
                            "type": "object",
                            "desc": "ancestry",
                            "content": {
                                "parent": {
                                    "type": "string",
                                    "desc": "parent fork hash"
                                },
                                "height": {
                                    "type": "int",
                                    "desc": "parent origin height"
                                }
                            }
                        }
                    }
                },
                "subline": {
                    "type": "array",
                    "desc": "subline info",
                    "content": {
                        "subline": {
                            "type": "object",
                            "desc": "subline",
                            "content": {
                                "sub": {
                                    "type": "string",
                                    "desc": "sub fork hash"
                                },
                                "height": {
                                    "type": "int",
                                    "desc": "sub origin height"
                                }
                            }
                        }
                    }
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli getgenealogy",
                "response": "{\"ancestry\":[],\"subline\":[]}"
            },
            {
                "request": "curl -d '{\"id\":75,\"method\":\"getgenealogy\",\"jsonrpc\":\"2.0\",\"params\":{}}' http://127.0.0.1:8812",
                "response": "{\"id\":75,\"jsonrpc\":\"2.0\",\"result\":{\"ancestry\":[],\"subline\":[]}}"
            },
            {
                "request": "metabasenet-cli getgenealogy 1",
                "response": "{\"code\":-6,\"message\":\"Unknown fork\"}"
            },
            {
                "request": "curl -d '{\"id\":1,\"method\":\"getgenealogy\",\"jsonrpc\":\"2.0\",\"params\":{\"fork\":\"1\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":1,\"jsonrpc\":\"2.0\",\"error\":{\"code\":-6,\"message\":\"Unknown fork\"}}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}"
        ]
    },
    "getblocklocation": {
        "type": "command",
        "name": "GetBlockLocation",
        "desc": "Return the location with given block.",
        "request": {
            "type": "object",
            "content": {
                "block": {
                    "type": "string",
                    "desc": "block hash"
                }
            }
        },
        "response": {
            "type": "object",
            "name": "location",
            "content": {
                "chainid": {
                    "type": "uint",
                    "desc": "chain id"
                },
                "fork": {
                    "type": "string",
                    "desc": "fork hash"
                },
                "height": {
                    "type": "int",
                    "desc": "block height"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli getblocklocation 0x00000001c156ff6e4f83d7a39cb234d0003c2ae96be0dbef658700d1edf6e83c",
                "response": "{\"chainid\":201,\"fork\":\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\",\"height\":1}"
            },
            {
                "request": "curl -d '{\"id\":6,\"method\":\"getblocklocation\",\"jsonrpc\":\"2.0\",\"params\":{\"block\":\"0x00000001c156ff6e4f83d7a39cb234d0003c2ae96be0dbef658700d1edf6e83c\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":6,\"jsonrpc\":\"2.0\",\"result\":{\"chainid\":201,\"fork\":\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\",\"height\":1}}"
            }
        ],
        "error": "{\"code\":-6,\"message\":\"Unknown block.\"}"
    },
    "getblockcount": {
        "type": "command",
        "name": "GetBlockCount",
        "desc": "Return the number of blocks in the given fork, includes extended block and vacant block",
        "request": {
            "type": "object",
            "content": {
                "fork": {
                    "type": "string",
                    "desc": "fork hash",
                    "required": false,
                    "opt": "f"
                }
            }
        },
        "response": {
            "type": "int",
            "name": "count",
            "desc": "block count"
        },
        "example": [
            {
                "request": "metabasenet-cli getblockcount",
                "response": "32081"
            },
            {
                "request": "curl -d '{\"id\":4,\"method\":\"getblockcount\",\"jsonrpc\":\"2.0\",\"params\":{}}' http://127.0.0.1:8812",
                "response": "{\"id\":4,\"jsonrpc\":\"2.0\",\"result\":32081}"
            },
            {
                "request": "metabasenet-cli getblockcount -f=0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55",
                "response": "32081"
            },
            {
                "request": "curl -d '{\"id\":5,\"method\":\"getblockcount\",\"jsonrpc\":\"2.0\",\"params\":{\"fork\":\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":5,\"jsonrpc\":\"2.0\",\"result\":32081}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}"
        ]
    },
    "getblockhash": {
        "type": "command",
        "name": "GetBlockHash",
        "introduction": "Return a list of block hash in the fork at a specific height.",
        "desc": [
            "Return a list of block hash in fork at specific height.",
            "First of the list is the main block hash, others are extended blocks hash in order."
        ],
        "request": {
            "type": "object",
            "content": {
                "height": {
                    "type": "int",
                    "desc": "block height"
                },
                "fork": {
                    "type": "string",
                    "desc": "fork hash",
                    "required": false,
                    "opt": "f"
                }
            }
        },
        "response": {
            "type": "array",
            "name": "hash",
            "content": {
                "hash": {
                    "type": "string",
                    "desc": "one block hash"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli getblockhash 0",
                "response": "[\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\"]"
            },
            {
                "request": "curl -d '{\"id\":37,\"method\":\"getblockhash\",\"jsonrpc\":\"2.0\",\"params\":{\"height\":0}}' http://127.0.0.1:8812",
                "response": "{\"id\":37,\"jsonrpc\":\"2.0\",\"result\":[\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\"]}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}",
            "{\"code\":-6,\"message\":\"Block number out of range.\"}"
        ]
    },
    "getblocknumberhash": {
        "type": "command",
        "name": "GetBlockNumberHash",
        "introduction": "Return a block hash in the fork at a specific number.",
        "desc": [
            "Return a block hash in fork at specific number."
        ],
        "request": {
            "type": "object",
            "content": {
                "number": {
                    "type": "uint",
                    "desc": "block number"
                },
                "fork": {
                    "type": "string",
                    "desc": "fork hash",
                    "required": false,
                    "opt": "f"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "blockhash",
            "desc": "block hash"
        },
        "example": [
            {
                "request": "metabasenet-cli getblocknumberhash 0",
                "response": "[\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\"]"
            },
            {
                "request": "curl -d '{\"id\":37,\"method\":\"getblocknumberhash\",\"jsonrpc\":\"2.0\",\"params\":{\"number\":0}}' http://127.0.0.1:8812",
                "response": "{\"id\":37,\"jsonrpc\":\"2.0\",\"result\":[\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\"]}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}",
            "{\"code\":-6,\"message\":\"Block number out of range.\"}"
        ]
    },
    "getblock": {
        "type": "command",
        "name": "GetBlock",
        "desc": "Return details of a block with given block-hash.",
        "request": {
            "type": "object",
            "content": {
                "block": {
                    "type": "string",
                    "desc": "block hash"
                }
            }
        },
        "response": {
            "type": "blockdata",
            "name": "block",
            "desc": "block data"
        },
        "example": [
            {
                "request": "metabasenet-cli getblock 0xc938f722d704ce2585f114c0005743e69d25b0f83a99d79705fb303c95e3c21b",
                "response": "{\"hash\":\"0xc938f722d704ce2585f114c0005743e69d25b0f83a99d79705fb303c95e3c21b\",\"prev\":\"0xc937f77ee553b2b7b7fd50cf303a9077a1e71fc4d6c1e0336b2dd93cf1c5cbc3\",\"chainid\":201,\"fork\":\"0xc9f7f70be6841102645505f96cdc28f00570d22c64d50dbfa3e44632e6ae3d5d\",\"version\":1,\"type\":\"primary-stake\",\"time\":1691292094,\"number\":56,\"height\":56,\"slot\":0,\"reward\":\"130.0\",\"stateroot\":\"0xbedbcf8bd065c04d040a1873e310b5a576c4a1ba97ef36ad73b5d86aa06a0da3\",\"receiptsroot\":\"0xf780fed5098460ecc4333c4deaa5abada70aa14479301462432f9567c7b43607\",\"bloom\":\"0xfbe36bbadd36f7ce77ffe15befeff8f3db7edfef6f\",\"txmint\":\"0xe5f3246178169493a351b29cb76064baf25980b12ea3746d5d78f73f14fa21fb\",\"tx\":[\"0x5a666daaa87477d923b890efd15952aa23004878c10aa63370245b72ecfc2bb2\",\"0x1b777e66ea46754a49ebb2a606caab38672f965feb38e3a802d7356096ee19d2\"]}"
            },
            {
                "request": "curl -d '{\"id\":10,\"method\":\"getblock\",\"jsonrpc\":\"2.0\",\"params\":{\"block\":\"0xc938f722d704ce2585f114c0005743e69d25b0f83a99d79705fb303c95e3c21b\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":10,\"jsonrpc\":\"2.0\",\"result\":{\"hash\":\"0xc938f722d704ce2585f114c0005743e69d25b0f83a99d79705fb303c95e3c21b\",\"prev\":\"0xc937f77ee553b2b7b7fd50cf303a9077a1e71fc4d6c1e0336b2dd93cf1c5cbc3\",\"chainid\":201,\"fork\":\"0xc9f7f70be6841102645505f96cdc28f00570d22c64d50dbfa3e44632e6ae3d5d\",\"version\":1,\"type\":\"primary-stake\",\"time\":1691292094,\"number\":56,\"height\":56,\"slot\":0,\"reward\":\"130.0\",\"stateroot\":\"0xbedbcf8bd065c04d040a1873e310b5a576c4a1ba97ef36ad73b5d86aa06a0da3\",\"receiptsroot\":\"0xf780fed5098460ecc4333c4deaa5abada70aa14479301462432f9567c7b43607\",\"bloom\":\"0xfbe36bbadd36f7ce77ffe15befeff8f3db7edfef6f\",\"txmint\":\"0xe5f3246178169493a351b29cb76064baf25980b12ea3746d5d78f73f14fa21fb\",\"tx\":[\"0x5a666daaa87477d923b890efd15952aa23004878c10aa63370245b72ecfc2bb2\",\"0x1b777e66ea46754a49ebb2a606caab38672f965feb38e3a802d7356096ee19d2\"]}}"
            }
        ],
        "error": "{\"code\":-6,\"message\":\"Unknown block.\"}"
    },
    "getblockdetail": {
        "type": "command",
        "name": "getblockdetail",
        "desc": "Return details of a block with given block-hash.",
        "request": {
            "type": "object",
            "content": {
                "block": {
                    "type": "string",
                    "desc": "block hash"
                }
            }
        },
        "response": {
            "type": "blockdatadetail",
            "name": "block",
            "desc": "block data"
        },
        "example": [
            {
                "request": "metabasenet-cli getblockdetail 0xc938f722d704ce2585f114c0005743e69d25b0f83a99d79705fb303c95e3c21b",
                "response": "{\"hash\":\"0xc938f722d704ce2585f114c0005743e69d25b0f83a99d79705fb303c95e3c21b\",\"version\":1,\"type\":\"genesis\",\"time\":1690251993,\"number\":0,\"stateroot\":\"0x81d35840a6e36f5ed343a59ebb0f2be312e2e4d9b08df0c769522039d9c3a083\",\"receiptsroot\":\"0x\",\"bloom\":\"0x\",\"bits\":0,\"prev\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"chainid\":201,\"fork\":\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\",\"height\":0,\"txmint\":{\"txid\":\"0xad988352e0e560a9766444c8fb0b7277332835da0b4903c0e65dd272a617fce4\",\"type\":\"genesis\",\"nonce\":0,\"from\":\"0x0000000000000000000000000000000000000000\",\"to\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"amount\":\"200000000.0\",\"gaslimit\":0,\"gasprice\":\"0.0\",\"txfee\":\"0.0\",\"data\":\"0x02110220001520000000000000000000000000000000000000000000a56fa5b99019a5c8000000\",\"signhash\":\"0x74a1abd80618b0dfc476071687c6980673d01fca729748918ffaf703bc25a9b8\",\"sig\":\"\",\"fork\":\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\",\"height\":0,\"blockhash\":\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\",\"confirmations\":1811},\"tx\":[]}"
            },
            {
                "request": "curl -d '{\"id\":10,\"method\":\"getblockdetail\",\"jsonrpc\":\"2.0\",\"params\":{\"block\":\"0xc938f722d704ce2585f114c0005743e69d25b0f83a99d79705fb303c95e3c21b\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":10,\"jsonrpc\":\"2.0\",\"result\":{\"hash\":\"0xc938f722d704ce2585f114c0005743e69d25b0f83a99d79705fb303c95e3c21b\",\"version\":1,\"type\":\"genesis\",\"time\":1690251993,\"number\":0,\"stateroot\":\"0x81d35840a6e36f5ed343a59ebb0f2be312e2e4d9b08df0c769522039d9c3a083\",\"receiptsroot\":\"0x\",\"bloom\":\"0x\",\"bits\":0,\"prev\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"chainid\":201,\"fork\":\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\",\"height\":0,\"txmint\":{\"txid\":\"0xad988352e0e560a9766444c8fb0b7277332835da0b4903c0e65dd272a617fce4\",\"type\":\"genesis\",\"nonce\":0,\"from\":\"0x0000000000000000000000000000000000000000\",\"to\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"amount\":\"200000000.0\",\"gaslimit\":0,\"gasprice\":\"0.0\",\"txfee\":\"0.0\",\"data\":\"0x02110220001520000000000000000000000000000000000000000000a56fa5b99019a5c8000000\",\"signhash\":\"0x74a1abd80618b0dfc476071687c6980673d01fca729748918ffaf703bc25a9b8\",\"sig\":\"\",\"fork\":\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\",\"height\":0,\"blockhash\":\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\",\"confirmations\":1811},\"tx\":[]}}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Unknown block.\"}",
            "{\"code\":-32700,\"message\":\"Load proof fail.\"}"
        ]
    },
    "getblockdata": {
        "type": "command",
        "name": "GetBlockData",
        "desc": "Return details of a block with given block hash or height or number.",
        "request": {
            "type": "object",
            "content": {
                "blockhash": {
                    "type": "string",
                    "desc": "block hash",
                    "required": false,
                    "opt": "b"
                },
                "height": {
                    "type": "uint",
                    "desc": "block height",
                    "required": false,
                    "opt": "h"
                },
                "slot": {
                    "type": "uint",
                    "desc": "block slot",
                    "required": false,
                    "opt": "s"
                },
                "number": {
                    "type": "uint",
                    "desc": "block number",
                    "required": false,
                    "opt": "n"
                },
                "fork": {
                    "type": "string",
                    "desc": "fork hash",
                    "required": false,
                    "opt": "f"
                }
            }
        },
        "response": {
            "type": "blockdata",
            "name": "block",
            "desc": "block data"
        },
        "example": [
            {
                "request": "metabasenet-cli getblockdata -b=0xc903f7c5e9e1c5ec990b02358e7f60f958e6479d5042d6be27a88456c83924bc",
                "response": "{\"hash\":\"0xc903f7c5e9e1c5ec990b02358e7f60f958e6479d5042d6be27a88456c83924bc\",\"prev\":\"0xc902f73972f2aab9541f844b55a421bdd34167f7f66906dc16be76c5149874ac\",\"chainid\":201,\"fork\":\"0xc9f7f70be6841102645505f96cdc28f00570d22c64d50dbfa3e44632e6ae3d5d\",\"version\":1,\"type\":\"primary-poa\",\"time\":1691291829,\"number\":3,\"height\":3,\"slot\":0,\"reward\":\"0.0\",\"stateroot\":\"0x1c3ffbbf503d90059c5714e9a5870afc13c6da6b459f9dab4a2aaf3907dd5b45\",\"receiptsroot\":\"0x\",\"bloom\":\"0x04029200\",\"txmint\":{\"txid\":\"0xc0b87f4b71d493d95d64d954a90801ec6f58c34e6506795d461ccd29294bd7bb\",\"type\":\"poa\",\"nonce\":3,\"from\":\"0x0000000000000000000000000000000000000000\",\"to\":\"0xb35400ae1477971c22e51311c12edc87ce3cf79d\",\"amount\":\"0.0\",\"gaslimit\":0,\"gasprice\":\"0.0\",\"txfee\":\"0.0\",\"data\":\"\",\"signhash\":\"\",\"sig\":\"\",\"fork\":\"0xc9f7f70be6841102645505f96cdc28f00570d22c64d50dbfa3e44632e6ae3d5d\",\"height\":3,\"blockhash\":\"0xc903f7c5e9e1c5ec990b02358e7f60f958e6479d5042d6be27a88456c83924bc\",\"confirmations\":362},\"tx\":[]}"
            },
            {
                "request": "curl -d '{\"id\":10,\"method\":\"getblockdata\",\"jsonrpc\":\"2.0\",\"params\":{\"blockhash\":\"0xc903f7c5e9e1c5ec990b02358e7f60f958e6479d5042d6be27a88456c83924bc\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":10,\"jsonrpc\":\"2.0\",\"result\":{\"hash\":\"0xc903f7c5e9e1c5ec990b02358e7f60f958e6479d5042d6be27a88456c83924bc\",\"prev\":\"0xc902f73972f2aab9541f844b55a421bdd34167f7f66906dc16be76c5149874ac\",\"chainid\":201,\"fork\":\"0xc9f7f70be6841102645505f96cdc28f00570d22c64d50dbfa3e44632e6ae3d5d\",\"version\":1,\"type\":\"primary-poa\",\"time\":1691291829,\"number\":3,\"height\":3,\"slot\":0,\"reward\":\"0.0\",\"stateroot\":\"0x1c3ffbbf503d90059c5714e9a5870afc13c6da6b459f9dab4a2aaf3907dd5b45\",\"receiptsroot\":\"0x\",\"bloom\":\"0x04029200\",\"txmint\":{\"txid\":\"0xc0b87f4b71d493d95d64d954a90801ec6f58c34e6506795d461ccd29294bd7bb\",\"type\":\"poa\",\"nonce\":3,\"from\":\"0x0000000000000000000000000000000000000000\",\"to\":\"0xb35400ae1477971c22e51311c12edc87ce3cf79d\",\"amount\":\"0.0\",\"gaslimit\":0,\"gasprice\":\"0.0\",\"txfee\":\"0.0\",\"data\":\"\",\"signhash\":\"\",\"sig\":\"\",\"fork\":\"0xc9f7f70be6841102645505f96cdc28f00570d22c64d50dbfa3e44632e6ae3d5d\",\"height\":3,\"blockhash\":\"0xc903f7c5e9e1c5ec990b02358e7f60f958e6479d5042d6be27a88456c83924bc\",\"confirmations\":362},\"tx\":[]}}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}",
            "{\"code\":-6,\"message\":\"Invalid block\"}",
            "{\"code\":-6,\"message\":\"Invalid height or slot\"}",
            "{\"code\":-6,\"message\":\"Invalid number\"}",
            "{\"code\":-6,\"message\":\"Unknown block\"}"
        ]
    },
    "gettxpool": {
        "type": "command",
        "name": "GetTxPool",
        "introduction": "Get transaction pool information",
        "desc": [
            "If detail==0, return the count and total size of txs for given fork.",
            "Otherwise,return all transaction ids and sizes in memory pool for given fork."
        ],
        "request": {
            "type": "object",
            "content": {
                "fork": {
                    "type": "string",
                    "desc": "fork hash",
                    "required": false,
                    "opt": "f"
                },
                "address": {
                    "type": "string",
                    "desc": "address",
                    "required": false,
                    "opt": "a"
                },
                "detail": {
                    "type": "bool",
                    "desc": "get detail or not",
                    "default": false,
                    "required": false,
                    "opt": "d"
                },
                "getoffset": {
                    "type": "int",
                    "desc": "get offset, If not set, from 0",
                    "default": 0,
                    "required": false,
                    "opt": "o"
                },
                "getcount": {
                    "type": "int",
                    "desc": "get count, 0 is all",
                    "default": 20,
                    "required": false,
                    "opt": "n"
                }
            }
        },
        "response": {
            "type": "object",
            "name": "data",
            "content": {
                "count": {
                    "type": "uint",
                    "desc": "transaction pool count",
                    "required": false,
                    "condition": "detail=false"
                },
                "size": {
                    "type": "uint",
                    "desc": "transaction total size",
                    "required": false,
                    "condition": "detail=false"
                },
                "list": {
                    "type": "array",
                    "desc": "transaction pool list",
                    "required": false,
                    "condition": "detail=true",
                    "content": {
                        "pool": {
                            "type": "object",
                            "desc": "pool struct",
                            "content": {
                                "txid": {
                                    "type": "string",
                                    "desc": "txid"
                                },
                                "txtype": {
                                    "type": "string",
                                    "desc": "tx type"
                                },
                                "nonce": {
                                    "type": "uint",
                                    "desc": "nonce"
                                },
                                "from": {
                                    "type": "string",
                                    "desc": "from address"
                                },
                                "to": {
                                    "type": "string",
                                    "desc": "to address"
                                },
                                "amount": {
                                    "type": "string",
                                    "desc": "amount (big float)"
                                },
                                "gasprice": {
                                    "type": "string",
                                    "desc": "gas price (big float)"
                                },
                                "gas": {
                                    "type": "uint",
                                    "desc": "gas"
                                },
                                "txfee": {
                                    "type": "string",
                                    "desc": "tx fee (big float)"
                                },
                                "size": {
                                    "type": "uint",
                                    "desc": "tx pool size"
                                }
                            }
                        }
                    }
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli gettxpool",
                "response": "{\"count\":0,\"size\":0}"
            },
            {
                "request": "curl -d '{\"id\":11,\"method\":\"gettxpool\",\"jsonrpc\":\"2.0\",\"params\":{}}' http://127.0.0.1:8812",
                "response": "{\"id\":11,\"jsonrpc\":\"2.0\",\"result\":{\"count\":0,\"size\":0}}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}"
        ]
    },
    "gettransaction": {
        "type": "command",
        "name": "GetTransaction",
        "desc": "Get transaction information",
        "request": {
            "type": "object",
            "content": {
                "txid": {
                    "type": "string",
                    "desc": "transaction hash"
                },
                "fork": {
                    "type": "string",
                    "desc": "fork hash or chainid (default local fork)",
                    "required": false,
                    "opt": "f"
                },
                "serialized": {
                    "type": "bool",
                    "desc": [
                        "If serialized=0, return an Object with information about <txid>.",
                        "If serialized is non-zero, return a string that is",
                        "serialized, hex-encoded data for <txid>."
                    ],
                    "opt": "s",
                    "default": false,
                    "required": false
                }
            }
        },
        "response": {
            "type": "object",
            "name": "data",
            "content": {
                "serialization": {
                    "type": "string",
                    "desc": "transaction hex data",
                    "required": false,
                    "condition": "serialized=true"
                },
                "transaction": {
                    "type": "transactiondata",
                    "desc": "transaction data",
                    "required": false,
                    "condition": "serialized=false"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli gettransaction 0x8198d41372a78d304eea88ce526a4f3584631204f43871716c7fc591b50304bb",
                "response": "{\"transaction\":{\"txid\":\"0x8198d41372a78d304eea88ce526a4f3584631204f43871716c7fc591b50304bb\",\"type\":\"token\",\"nonce\":21,\"from\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"to\":\"0xeba52feecb5dc5b97a259193d1e9013f22f5aa65\",\"amount\":\"2000000.0\",\"gaslimit\":23600,\"gasprice\":\"0.000001\",\"txfee\":\"0.0236\",\"data\":\"0x011131432f0000032b03cea94079fd11c296b819d52c7a7efab7c42c0922e85adab334651e31291973cde1ca25dfd6d0236201f4\",\"signhash\":\"0x6327fef5b92c703b0187d0282bb589b58b43cce5b5b6732d10f332e8a2e3d515\",\"sig\":\"0xb8d4ad2c3f45d70a0b5040fc31cc967974a2347e23055555a9a46997296011bc64a1830954bf5dd185744f7e90cca3a08bd65561115da564bed36ee7fd25b11c00\",\"fork\":\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\",\"height\":102,\"blockhash\":\"0x000000668a3966460f71292dbb262d55fa086ed98b02461ed8eca55853609ceb\",\"confirmations\":1818}}"
            },
            {
                "request": "curl -d '{\"id\":13,\"method\":\"gettransaction\",\"jsonrpc\":\"2.0\",\"params\":{\"txid\":\"0x8198d41372a78d304eea88ce526a4f3584631204f43871716c7fc591b50304bb\",\"serialized\":false}}' http://127.0.0.1:8812",
                "response": "{\"id\":13,\"jsonrpc\":\"2.0\",\"result\":{\"transaction\":{\"txid\":\"0x8198d41372a78d304eea88ce526a4f3584631204f43871716c7fc591b50304bb\",\"type\":\"token\",\"nonce\":21,\"from\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"to\":\"0xeba52feecb5dc5b97a259193d1e9013f22f5aa65\",\"amount\":\"2000000.0\",\"gaslimit\":23600,\"gasprice\":\"0.000001\",\"txfee\":\"0.0236\",\"data\":\"0x011131432f0000032b03cea94079fd11c296b819d52c7a7efab7c42c0922e85adab334651e31291973cde1ca25dfd6d0236201f4\",\"signhash\":\"0x6327fef5b92c703b0187d0282bb589b58b43cce5b5b6732d10f332e8a2e3d515\",\"sig\":\"0xb8d4ad2c3f45d70a0b5040fc31cc967974a2347e23055555a9a46997296011bc64a1830954bf5dd185744f7e90cca3a08bd65561115da564bed36ee7fd25b11c00\",\"fork\":\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\",\"height\":102,\"blockhash\":\"0x000000668a3966460f71292dbb262d55fa086ed98b02461ed8eca55853609ceb\",\"confirmations\":1818}}}"
            },
            {
                "request": "metabasenet-cli gettransaction 0x8198d41372a78d304eea88ce526a4f3584631204f43871716c7fc591b50304bb -s",
                "response": "{\"serialization\":\"0x02c915142f85aa17938347b7c9bfda3eb4170beb4e9762591465aaf5223f01e9d19391257ab9c55dcbee2fa5eb0b01a784379d99db4200000005e8d4a51000025c30011131432f0000032b03cea94079fd11c296b819d52c7a7efab7c42c0922e85adab334651e31291973cde1ca25dfd6d0236201f441b8d4ad2c3f45d70a0b5040fc31cc967974a2347e23055555a9a46997296011bc64a1830954bf5dd185744f7e90cca3a08bd65561115da564bed36ee7fd25b11c00\",\"transaction\":{}}"
            },
            {
                "request": "curl -d '{\"id\":13,\"method\":\"gettransaction\",\"jsonrpc\":\"2.0\",\"params\":{\"txid\":\"0x8198d41372a78d304eea88ce526a4f3584631204f43871716c7fc591b50304bb\",\"serialized\":true}}' http://127.0.0.1:8812",
                "response": "{\"id\":13,\"jsonrpc\":\"2.0\",\"result\":{\"serialization\":\"0x02c915142f85aa17938347b7c9bfda3eb4170beb4e9762591465aaf5223f01e9d19391257ab9c55dcbee2fa5eb0b01a784379d99db4200000005e8d4a51000025c30011131432f0000032b03cea94079fd11c296b819d52c7a7efab7c42c0922e85adab334651e31291973cde1ca25dfd6d0236201f441b8d4ad2c3f45d70a0b5040fc31cc967974a2347e23055555a9a46997296011bc64a1830954bf5dd185744f7e90cca3a08bd65561115da564bed36ee7fd25b11c00\",\"transaction\":{}}}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid txid.\"}",
            "{\"code\":-6,\"message\":\"Invalid fork.\"}",
            "{\"code\":-6,\"message\":\"Unknown fork.\"}",
            "{\"code\":-32600,\"message\":\"No information available about transaction.\"}"
        ]
    },
    "sendtransaction": {
        "type": "command",
        "name": "SendTransaction",
        "desc": "Submit raw transaction (serialized, hex-encoded) to local node and network.",
        "request": {
            "type": "object",
            "content": {
                "txdata": {
                    "type": "string",
                    "desc": "transaction binary data"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "data",
            "desc": "transaction raw data"
        },
        "example": [
            {
                "request": "metabasenet-cli sendtransaction 0x02c918142f85aa17938347b7c9bfda3eb4170beb4e976259142bab3b545e9a35fbf7df91474aadee4d95fc3c7d088ac7230489e8000005e8d4a51000025208004150b186ec91f439696626447f0f379f146665099f2269e84fde9f96802c3410d110716aaf722b8009b8b3585be64163cc21a8f22f404f3c1ccf2af3fec03bf2ea01",
                "response": "0x01fd16a69bc8607d283e505225013f085d438621d5bd62b3c2ac4b2b37907403"
            },
            {
                "request": "curl -d '{\"id\":9,\"method\":\"sendtransaction\",\"jsonrpc\":\"2.0\",\"params\":{\"txdata\":\"0x02c918142f85aa17938347b7c9bfda3eb4170beb4e976259142bab3b545e9a35fbf7df91474aadee4d95fc3c7d088ac7230489e8000005e8d4a51000025208004150b186ec91f439696626447f0f379f146665099f2269e84fde9f96802c3410d110716aaf722b8009b8b3585be64163cc21a8f22f404f3c1ccf2af3fec03bf2ea01\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":9,\"jsonrpc\":\"2.0\",\"result\":\"0x01fd16a69bc8607d283e505225013f085d438621d5bd62b3c2ac4b2b37907403\"}"
            }
        ],
        "error": [
            "{\"code\":-8,\"message\":\"TX decode failed\"}",
            "{\"code\":-9,\"message\":\"Get fork hash failed\"}",
            "{\"code\":-10,\"message\":\"Tx rejected : xxx\"}"
        ]
    },
    "getforkheight": {
        "type": "command",
        "name": "GetForkHeight",
        "desc": "Return the number of height in the given fork.",
        "request": {
            "type": "object",
            "content": {
                "fork": {
                    "type": "string",
                    "desc": "fork hash",
                    "required": false,
                    "opt": "f"
                }
            }
        },
        "response": {
            "type": "int",
            "name": "height",
            "desc": "fork height"
        },
        "example": [
            {
                "request": "metabasenet-cli getforkheight",
                "response": "32081"
            },
            {
                "request": "metabasenet-cli getforkheight -f=0xc9f7f70be6841102645505f96cdc28f00570d22c64d50dbfa3e44632e6ae3d5d",
                "response": "32081"
            },
            {
                "request": "curl -d '{\"id\":4,\"method\":\"getforkheight\",\"jsonrpc\":\"2.0\",\"params\":{}}' http://127.0.0.1:8812",
                "response": "{\"id\":4,\"jsonrpc\":\"2.0\",\"result\":32081}"
            },
            {
                "request": "curl -d '{\"id\":4,\"method\":\"getforkheight\",\"jsonrpc\":\"2.0\",\"params\":{\"fork\":\"0xc9f7f70be6841102645505f96cdc28f00570d22c64d50dbfa3e44632e6ae3d5d\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":4,\"jsonrpc\":\"2.0\",\"result\":32081}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}"
        ]
    },
    "getvotes": {
        "type": "command",
        "name": "GetVotes",
        "desc": "Get votes",
        "request": {
            "type": "object",
            "content": {
                "address": {
                    "type": "string",
                    "desc": "delegate template address or vote template address"
                },
                "block": {
                    "type": "string",
                    "desc": "block hash or number or latest (default latest block)",
                    "required": false,
                    "opt": "b"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "votes",
            "desc": "number of votes (big float)"
        },
        "example": [
            {
                "request": "metabasenet-cli getvotes 0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d",
                "response": "70000000.000000"
            },
            {
                "request": "curl -d '{\"id\":1,\"method\":\"getvotes\",\"jsonrpc\":\"2.0\",\"params\":{\"address\":\"0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":0,\"jsonrpc\":\"2.0\",\"result\":70000000.000000}"
            }
        ],
        "error": [
            "{\"code\" : -6, \"message\" : \"Invalid address\"}",
            "{\"code\" : -6, \"message\" : \"Invalid block\"}"
        ]
    },
    "listdelegate": {
        "type": "command",
        "name": "ListDelegate",
        "desc": "List delegate",
        "request": {
            "type": "object",
            "content": {
                "count": {
                    "type": "uint",
                    "desc": "list count, default 0 is all",
                    "default": 0,
                    "required": false,
                    "opt": "n"
                },
                "block": {
                    "type": "string",
                    "desc": "block hash or number or latest (default latest block)",
                    "required": false,
                    "opt": "b"
                }
            }
        },
        "response": {
            "type": "array",
            "name": "delegate",
            "content": {
                "delegate": {
                    "type": "object",
                    "content": {
                        "address": {
                            "type": "string",
                            "desc": "delegate address"
                        },
                        "votes": {
                            "type": "string",
                            "desc": "number of votes (big float)"
                        }
                    }
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli listdelegate",
                "response": "{\"address\":\"0xd2b670ea0bb5bac8cdaac13772dcfec6fadeb0ee\",\"votes\":100002000.000000}"
            },
            {
                "request": "curl -d '{\"id\":1,\"method\":\"listdelegate\",\"jsonrpc\":\"2.0\",\"params\":{}}' http://127.0.0.1:8812",
                "response": "{\"id\":0,\"jsonrpc\":\"2.0\",\"result\":\"{\"address\":\"0xd2b670ea0bb5bac8cdaac13772dcfec6fadeb0ee\",\"votes\":100002000.000000}\"}"
            }
        ],
        "error": [
            "{\"code\" : -6, \"message\" : \"Invalid block\"}",
            "{\"code\" : -32603, \"message\" : \"Query failed\"}"
        ]
    },
    "getdelegatevotes": {
        "type": "command",
        "name": "GetDelegateVotes",
        "desc": "Get delegate total votes",
        "request": {
            "type": "object",
            "content": {
                "address": {
                    "type": "string",
                    "desc": "delegate template address"
                },
                "block": {
                    "type": "string",
                    "desc": "block hash or number or latest (default latest block)",
                    "required": false,
                    "opt": "b"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "votes",
            "desc": "number of votes (big float)"
        },
        "example": [
            {
                "request": "metabasenet-cli getdelegatevotes 0xd2b670ea0bb5bac8cdaac13772dcfec6fadeb0ee",
                "response": "70000000.000000"
            },
            {
                "request": "curl -d '{\"id\":1,\"method\":\"getdelegatevotes\",\"jsonrpc\":\"2.0\",\"params\":{\"address\":\"0xd2b670ea0bb5bac8cdaac13772dcfec6fadeb0ee\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":0,\"jsonrpc\":\"2.0\",\"result\":70000000.000000}"
            }
        ],
        "error": [
            "{\"code\" : -6, \"message\" : \"Invalid address\"}",
            "{\"code\" : -6, \"message\" : \"Invalid block\"}",
            "{\"code\" : -32603, \"message\" : \"Query failed\"}"
        ]
    },
    "getuservotes": {
        "type": "command",
        "name": "GetUserVotes",
        "desc": "Get user votes",
        "request": {
            "type": "object",
            "content": {
                "address": {
                    "type": "string",
                    "desc": "delegate or vote or pledge template address"
                },
                "block": {
                    "type": "string",
                    "desc": "block hash or number or latest (default latest block)",
                    "required": false,
                    "opt": "b"
                }
            }
        },
        "response": {
            "type": "object",
            "name": "result",
            "content": {
                "type": {
                    "type": "string",
                    "desc": "vote type"
                },
                "votes": {
                    "type": "string",
                    "desc": "number of votes (big float)"
                },
                "unlockheight": {
                    "type": "uint",
                    "desc": "unlock height"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli getuservotes 0x6e4089b464e08441a27804d8e78f7d691e2ef736",
                "response": "70000000.000000"
            },
            {
                "request": "curl -d '{\"id\":1,\"method\":\"getuservotes\",\"jsonrpc\":\"2.0\",\"params\":{\"address\":\"0x6e4089b464e08441a27804d8e78f7d691e2ef736\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":0,\"jsonrpc\":\"2.0\",\"result\":70000000.000000}"
            }
        ],
        "error": [
            "{\"code\" : -6, \"message\" : \"Invalid address\"}",
            "{\"code\" : -6, \"message\" : \"Invalid block\"}",
            "{\"code\" : -32603, \"message\" : \"Query failed\"}"
        ]
    },
    "gettimevault": {
        "type": "command",
        "name": "GetTimeVault",
        "desc": "Get time vault",
        "request": {
            "type": "object",
            "content": {
                "address": {
                    "type": "string",
                    "desc": "pubkey address"
                },
                "fork": {
                    "type": "string",
                    "desc": "fork hash",
                    "required": false,
                    "opt": "f"
                },
                "block": {
                    "type": "string",
                    "desc": "block hash or number or latest (default latest block)",
                    "required": false,
                    "opt": "b"
                }
            }
        },
        "response": {
            "type": "object",
            "name": "result",
            "content": {
                "timevault": {
                    "type": "string",
                    "desc": "time vault (big float)"
                },
                "balance": {
                    "type": "string",
                    "desc": "address balance (big float)"
                },
                "prevsettlementtime": {
                    "type": "uint",
                    "desc": "prev settlement time"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli gettimevault 0x1882823f69b35fbf58833f2892b0cfdabddf0c63",
                "response": "{\"timevault\" : \"-1.965492723527062302\",\"balance\" : \"5005516.535824644556392517\",\"prevsettlementtime\" : 1685621282}"
            },
            {
                "request": "curl -d '{\"id\":1,\"method\":\"gettimevault\",\"jsonrpc\":\"2.0\",\"params\":{\"address\":\"0x1882823f69b35fbf58833f2892b0cfdabddf0c63\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":0,\"jsonrpc\":\"2.0\",\"result\":{\"timevault\" : \"-1.965492723527062302\",\"balance\" : \"5005516.535824644556392517\",\"prevsettlementtime\" : 1685621282}}"
            }
        ],
        "error": [
            "{\"code\" : -6, \"message\" : \"Invalid address\"}",
            "{\"code\" : -6, \"message\" : \"Invalid fork\"}",
            "{\"code\" : -6, \"message\" : \"Unknown fork\"}",
            "{\"code\" : -6, \"message\" : \"Invalid block\"}",
            "{\"code\" : -6, \"message\" : \"Block status error\"}"
        ]
    },
    "getaddresscount": {
        "type": "command",
        "name": "GetAddressCount",
        "desc": "Get address count",
        "request": {
            "type": "object",
            "content": {
                "fork": {
                    "type": "string",
                    "desc": "fork hash",
                    "required": false,
                    "opt": "f"
                },
                "block": {
                    "type": "string",
                    "desc": "block hash or number or latest (default latest block)",
                    "required": false,
                    "opt": "b"
                }
            }
        },
        "response": {
            "type": "object",
            "name": "result",
            "content": {
                "block": {
                    "type": "string",
                    "desc": "reference block hash"
                },
                "addresscount": {
                    "type": "uint",
                    "desc": "address count"
                },
                "newaddresscount": {
                    "type": "uint",
                    "desc": "new address count"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli getaddresscount -b=0xc921f7f807e072f0acc0e2e76d5413b64f4840e839758a93274941fe11144344",
                "response": "{\"block\" : \"0xc921f7f807e072f0acc0e2e76d5413b64f4840e839758a93274941fe11144344\", \"addresscount\" : 12, \"newaddresscount\" : 2}"
            },
            {
                "request": "curl -d '{\"id\":1,\"method\":\"getaddresscount\",\"jsonrpc\":\"2.0\",\"params\":{\"block\":\"0xc921f7f807e072f0acc0e2e76d5413b64f4840e839758a93274941fe11144344\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":0,\"jsonrpc\":\"2.0\",\"result\":{\"block\" : \"0xc921f7f807e072f0acc0e2e76d5413b64f4840e839758a93274941fe11144344\", \"addresscount\" : 12, \"newaddresscount\" : 2}}"
            }
        ],
        "error": [
            "{\"code\" : -6, \"message\" : \"Invalid fork\"}",
            "{\"code\" : -6, \"message\" : \"Unknown fork\"}",
            "{\"code\" : -6, \"message\" : \"Invalid block\"}",
            "{\"code\" : -6, \"message\" : \"Block status error\"}",
            "{\"code\" : -4, \"message\" : \"Get address count fail\"}"
        ]
    },
    "listkey": {
        "type": "command",
        "name": "ListKey",
        "desc": "Return Object that has pubkey as keys, associated status as values.",
        "request": {
            "type": "object",
            "content": {
                "page": {
                    "type": "uint",
                    "desc": "page, default is 0",
                    "default": 0,
                    "required": false,
                    "opt": "p"
                },
                "count": {
                    "type": "uint",
                    "desc": "count, default is 30",
                    "default": 30,
                    "required": false,
                    "opt": "n"
                }
            }
        },
        "response": {
            "type": "array",
            "name": "pubkey",
            "desc": "public key list",
            "content": {
                "pubkey": {
                    "type": "object",
                    "desc": "public key info",
                    "content": {
                        "pubkey": {
                            "type": "string",
                            "desc": "public key with hex system"
                        },
                        "address": {
                            "type": "string",
                            "desc": "address"
                        },
                        "version": {
                            "type": "int",
                            "desc": "public key version"
                        },
                        "public": {
                            "type": "bool",
                            "desc": "is only public key or not in wallet"
                        },
                        "locked": {
                            "type": "bool",
                            "desc": "public key locked"
                        },
                        "timeout": {
                            "type": "int",
                            "required": false,
                            "desc": "public key timeout locked"
                        }
                    }
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli listkey",
                "response": "[{\"pubkey\":\"0x63a4f21f10fbabfd07076ea67d84bf0785d906bad245b2d9a0d8fc0512ee3dbcb9b395d7a56589356bf1ce6a0fab53f476493471a22fd7649363a192117ab01d\",\"address\":\"0x7d3cfc954deead4a4791dff7fb359a5e543bab2b\",\"version\":1,\"public\":false,\"locked\":true},{\"pubkey\":\"0xa9cd6869b7d2d41c56c3573e43ca0bc666353ec387821857d5b0ad1bbd3377a1a62e4d69cc18c4a393b5ecd22513af25722a4db955650aa91a11ce4d7a1a3765\",\"address\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"version\":1,\"public\":false,\"locked\":false}]"
            },
            {
                "request": "curl -d '{\"id\":43,\"method\":\"listkey\",\"jsonrpc\":\"2.0\",\"params\":{}}' http://127.0.0.1:8812",
                "response": "{\"id\":43,\"jsonrpc\":\"2.0\",\"result\":[{\"pubkey\":\"0x63a4f21f10fbabfd07076ea67d84bf0785d906bad245b2d9a0d8fc0512ee3dbcb9b395d7a56589356bf1ce6a0fab53f476493471a22fd7649363a192117ab01d\",\"address\":\"0x7d3cfc954deead4a4791dff7fb359a5e543bab2b\",\"version\":1,\"public\":false,\"locked\":true},{\"pubkey\":\"0xa9cd6869b7d2d41c56c3573e43ca0bc666353ec387821857d5b0ad1bbd3377a1a62e4d69cc18c4a393b5ecd22513af25722a4db955650aa91a11ce4d7a1a3765\",\"address\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"version\":1,\"public\":false,\"locked\":false}]}"
            }
        ]
    },
    "getnewkey": {
        "type": "command",
        "name": "GetNewKey",
        "desc": "Return a new pubkey for receiving payments.",
        "request": {
            "type": "object",
            "content": {
                "passphrase": {
                    "type": "string",
                    "desc": "passphrase"
                }
            }
        },
        "response": {
            "type": "object",
            "name": "result",
            "content": {
                "pubkey": {
                    "type": "string",
                    "desc": "public key"
                },
                "address": {
                    "type": "string",
                    "desc": "address"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli getnewkey 123",
                "response": "{\"pubkey\":\"0xeed002394906cad1a438415c8d7ef0f3799fec195b25fdaaf79859c08ccf36c9885e3ae94658b3f109542fd79472ee0415c919f3b6f5ecf029636640a56dbbc2\",\"address\":\"0xf90354b9b4937cca9ac0f675a8c228100f935971\"}"
            },
            {
                "request": "curl -d '{\"id\":7,\"method\":\"getnewkey\",\"jsonrpc\":\"2.0\",\"params\":{\"passphrase\":\"123\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":7,\"jsonrpc\":\"2.0\",\"result\":{\"pubkey\":\"0xeed002394906cad1a438415c8d7ef0f3799fec195b25fdaaf79859c08ccf36c9885e3ae94658b3f109542fd79472ee0415c919f3b6f5ecf029636640a56dbbc2\",\"address\":\"0xf90354b9b4937cca9ac0f675a8c228100f935971\"}}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Passphrase must be nonempty\"}",
            "{\"code\":-401,\"message\":\"Failed add new key.\"}"
        ]
    },
    "removekey": {
        "type": "command",
        "name": "RemoveKey",
        "desc": "Remove Key in Wallet.",
        "request": {
            "type": "object",
            "content": {
                "pubkey": {
                    "type": "string",
                    "desc": "public key or pubkey address"
                },
                "passphrase": {
                    "type": "string",
                    "desc": "passphrase",
                    "required": false
                }
            }
        },
        "response": {
            "type": "string",
            "name": "pubkey",
            "desc": "public key"
        },
        "example": [
            {
                "request": "metabasenet-cli removekey 0xf90354b9b4937cca9ac0f675a8c228100f935971 123",
                "response": "Remove key successfully: 0xf90354b9b4937cca9ac0f675a8c228100f935971"
            },
            {
                "request": "curl -d '{\"id\":7,\"method\":\"removekey\",\"jsonrpc\":\"2.0\",\"params\":{\"pubkey\":\"0xf90354b9b4937cca9ac0f675a8c228100f935971\",\"passphrase\":\"123\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":7,\"jsonrpc\":\"2.0\",\"result\":\"Remove key successfully: 0xf90354b9b4937cca9ac0f675a8c228100f935971\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid pubkey\"}",
            "{\"code\":-4,\"message\":\"Unknown key\"}",
            "{\"code\":-406,\"message\":\"Can't remove key with incorrect passphrase.\"}",
            "{\"code\":-401,\"message\":\"Failed remove key.\"}"
        ]
    },
    "encryptkey": {
        "type": "command",
        "name": "EncryptKey",
        "desc": "Changes the passphrase for <oldpassphrase> to <passphrase>",
        "request": {
            "type": "object",
            "content": {
                "pubkey": {
                    "type": "string",
                    "desc": "public key or pubkey address"
                },
                "passphrase": {
                    "type": "string",
                    "desc": "passphrase of key",
                    "opt": "new"
                },
                "oldpassphrase": {
                    "type": "string",
                    "desc": "old passphrase of key",
                    "opt": "old"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "encrypt key result"
        },
        "example": [
            {
                "request": "encryptkey 0x7d3cfc954deead4a4791dff7fb359a5e543bab2b 456 123",
                "response": "Encrypt key successfully: 0x7d3cfc954deead4a4791dff7fb359a5e543bab2b"
            },
            {
                "request": "curl -d '{\"id\":5,\"method\":\"encryptkey\",\"jsonrpc\":\"2.0\",\"params\":{\"pubkey\":\"0x7d3cfc954deead4a4791dff7fb359a5e543bab2b\",\"passphrase\":\"456\",\"oldpassphrase\":\"123\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":5,\"jsonrpc\":\"2.0\",\"result\":\"Encrypt key successfully: 0x7d3cfc954deead4a4791dff7fb359a5e543bab2b\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid pubkey\"}",
            "{\"code\":-6,\"message\":\"Passphrase must be nonempty\"}",
            "{\"code\":-6,\"message\":\"Old passphrase must be nonempty\"}",
            "{\"code\":-4,\"message\":\"Unknown key\"}",
            "{\"code\":-406,\"message\":\"The passphrase entered was incorrect.\"}"
        ]
    },
    "lockkey": {
        "type": "command",
        "name": "LockKey",
        "introduction": "Removes the encryption key from memory, locking the key.",
        "desc": [
            "Removes the encryption key from memory, locking the key.",
            "After calling this method, you will need to call unlockkey again.",
            "before being able to call any methods which require the key to be unlocked."
        ],
        "request": {
            "type": "object",
            "content": {
                "pubkey": {
                    "type": "string",
                    "desc": "pubkey or pubkey address"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "lock key result"
        },
        "example": [
            {
                "request": "metabasenet-cli lockkey 0x7d3cfc954deead4a4791dff7fb359a5e543bab2b",
                "response": "Lock key successfully: 0x7d3cfc954deead4a4791dff7fb359a5e543bab2b"
            },
            {
                "request": "curl -d '{\"id\":1,\"method\":\"lockkey\",\"jsonrpc\":\"2.0\",\"params\":{\"pubkey\":\"0x7d3cfc954deead4a4791dff7fb359a5e543bab2b\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":1,\"jsonrpc\":\"2.0\",\"result\":\"Lock key successfully: 0x7d3cfc954deead4a4791dff7fb359a5e543bab2b\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid pubkey\"}",
            "{\"code\":-4,\"message\":\"Unknown key\"}",
            "{\"code\":-4,\"message\":\"Can't lock public key.\"}",
            "{\"code\":-401,\"message\":\"Failed to lock key\"}"
        ]
    },
    "unlockkey": {
        "type": "command",
        "name": "UnlockKey",
        "introduction": "Unlock the key.",
        "desc": [
            "If (timeout) > 0,stores the wallet decryption key in memory for (timeout) seconds.",
            "before being able to call any methods which require the key to be locked."
        ],
        "request": {
            "type": "object",
            "content": {
                "pubkey": {
                    "type": "string",
                    "desc": "pubkey or pubkey address"
                },
                "passphrase": {
                    "type": "string",
                    "desc": "passphrase"
                },
                "timeout": {
                    "type": "int",
                    "desc": "auto unlock timeout",
                    "required": false,
                    "opt": "t"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "unlock key result"
        },
        "example": [
            {
                "request": "metabasenet-cli unlockkey 0x7d3cfc954deead4a4791dff7fb359a5e543bab2b 123",
                "response": "Unlock key successfully: 0x7d3cfc954deead4a4791dff7fb359a5e543bab2b"
            },
            {
                "request": "curl -d '{\"id\":13,\"method\":\"unlockkey\",\"jsonrpc\":\"2.0\",\"params\":{\"pubkey\":\"0x7d3cfc954deead4a4791dff7fb359a5e543bab2b\",\"passphrase\":\"123\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":13,\"jsonrpc\":\"2.0\",\"result\":\"Unlock key successfully: 0x7d3cfc954deead4a4791dff7fb359a5e543bab2b\"}"
            },
            {
                "request": "metabasenet-cli unlockkey 0x7d3cfc954deead4a4791dff7fb359a5e543bab2b 123 10",
                "response": "Unlock key successfully: 0x7d3cfc954deead4a4791dff7fb359a5e543bab2b"
            },
            {
                "request": "curl -d '{\"id\":15,\"method\":\"unlockkey\",\"jsonrpc\":\"2.0\",\"params\":{\"pubkey\":\"0x7d3cfc954deead4a4791dff7fb359a5e543bab2b\",\"passphrase\":\"123\",\"timeout\":10}}' http://127.0.0.1:8812",
                "response": "{\"id\":15,\"jsonrpc\":\"2.0\",\"result\":\"Unlock key successfully: 0x7d3cfc954deead4a4791dff7fb359a5e543bab2b\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid pubkey\"}",
            "{\"code\":-6,\"message\":\"Passphrase must be nonempty\"}",
            "{\"code\":-4,\"message\":\"Unknown key\"}",
            "{\"code\":-4,\"message\":\"Can't unlock public key\"}",
            "{\"code\":-409,\"message\":\"Key is already unlocked\"}",
            "{\"code\":-406,\"message\":\"The passphrase entered was incorrect.\"}"
        ]
    },
    "importprivkey": {
        "type": "command",
        "name": "ImportPrivKey",
        "desc": "Add a private key to your wallet.",
        "request": {
            "type": "object",
            "content": {
                "privkey": {
                    "type": "string",
                    "desc": "private key"
                },
                "passphrase": {
                    "type": "string",
                    "desc": "passphrase"
                }
            }
        },
        "response": {
            "type": "object",
            "name": "result",
            "content": {
                "pubkey": {
                    "type": "string",
                    "desc": "public key"
                },
                "address": {
                    "type": "string",
                    "desc": "address"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli importprivkey 0xf4d5a6d5aa6ca2e2e03f1b6d8d333a2476c7768338c8efa90f90ad4d7c8182bd 123",
                "response": "{\"pubkey\":\"0x1d72e78cb2a523947fb66084c27d907bfe7782a403b18cf190e92b7c38d9a8dd5b9f5accdf135935ff8911e3a1b01f6b813fd71906de763930a0c51016aecfb6\",\"address\":\"0x0af60d2139ada7a9a4377f6d95cbf3a047066219\"}"
            },
            {
                "request": "curl -d '{\"id\":9,\"method\":\"importprivkey\",\"jsonrpc\":\"2.0\",\"params\":{\"privkey\":\"0xf4d5a6d5aa6ca2e2e03f1b6d8d333a2476c7768338c8efa90f90ad4d7c8182bd\",\"passphrase\":\"123\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":9,\"jsonrpc\":\"2.0\",\"result\":{\"pubkey\":\"0x1d72e78cb2a523947fb66084c27d907bfe7782a403b18cf190e92b7c38d9a8dd5b9f5accdf135935ff8911e3a1b01f6b813fd71906de763930a0c51016aecfb6\",\"address\":\"0x0af60d2139ada7a9a4377f6d95cbf3a047066219\"}}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid private key\"}",
            "{\"code\":-6,\"message\":\"Passphrase must be nonempty\"}",
            "{\"code\":-401,\"message\":\"Failed to add key\"}"
        ]
    },
    "importpubkey": {
        "type": "command",
        "name": "ImportPubKey",
        "desc": "Add a public key to your wallet.",
        "request": {
            "type": "object",
            "content": {
                "pubkey": {
                    "type": "string",
                    "desc": "pubkey key"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "address",
            "desc": "address of public key"
        },
        "example": [
            {
                "request": "metabasenet-cli importpubkey 0x0c5a8805c62f6fc44d1a3bf81107e8c22372c823b875c5a31af55b4951dcc3ac27a6c2b5e867077cd235439cbf8cea28d475401560d0c6e38013b72b307b0941",
                "response": "0xcc963a4ca2a9032e41668756cc4ccb7c59f112be"
            },
            {
                "request": "curl -d '{\"id\":31,\"method\":\"importpubkey\",\"jsonrpc\":\"2.0\",\"params\":{\"pubkey\":\"0x0c5a8805c62f6fc44d1a3bf81107e8c22372c823b875c5a31af55b4951dcc3ac27a6c2b5e867077cd235439cbf8cea28d475401560d0c6e38013b72b307b0941\"}' http://127.0.0.1:8812",
                "response": "{\"id\":31,\"jsonrpc\":\"2.0\",\"result\":\"0xcc963a4ca2a9032e41668756cc4ccb7c59f112be\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid pubkey\"}",
            "{\"code\":-401,\"message\":\"Failed to add key\"}"
        ]
    },
    "importkey": {
        "type": "command",
        "name": "ImportKey",
        "desc": "Reveal the serialized key corresponding to <pubkey>.",
        "request": {
            "type": "object",
            "content": {
                "pubkey": {
                    "type": "string",
                    "desc": "public key data"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "pubkey",
            "desc": "public key with hex number system"
        },
        "example": [
            {
                "request": "metabasenet-cli importkey 0x65371a7a4dce111aa90a6555b94d2a7225af1325d2ecb593a3c418cc694d2ea6a17733bd1badb0d557188287c33e3566c60bca433e57c3561cd4d2b76968cda9010000003057b6a1f2869353d731724a1c2f025cb96d102656e33d07ea595a56473f7d4a153f258766472b01f2f287fba11cbc008cdee177bf0c99ba063cb587d401438ab13b153cafc4edc193062a37f54c37550c6430ff4e733cf7d1",
                "response": "0xa9cd6869b7d2d41c56c3573e43ca0bc666353ec387821857d5b0ad1bbd3377a1a62e4d69cc18c4a393b5ecd22513af25722a4db955650aa91a11ce4d7a1a3765"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"importkey\",\"jsonrpc\":\"2.0\",\"params\":{\"pubkey\":\"0x65371a7a4dce111aa90a6555b94d2a7225af1325d2ecb593a3c418cc694d2ea6a17733bd1badb0d557188287c33e3566c60bca433e57c3561cd4d2b76968cda9010000003057b6a1f2869353d731724a1c2f025cb96d102656e33d07ea595a56473f7d4a153f258766472b01f2f287fba11cbc008cdee177bf0c99ba063cb587d401438ab13b153cafc4edc193062a37f54c37550c6430ff4e733cf7d1\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0xa9cd6869b7d2d41c56c3573e43ca0bc666353ec387821857d5b0ad1bbd3377a1a62e4d69cc18c4a393b5ecd22513af25722a4db955650aa91a11ce4d7a1a3765\"}"
            }
        ],
        "error": [
            "{\"code\":-32602,\"message\":\"Failed to verify serialized key\"}",
            "{\"code\":-32602,\"message\":\"Can't import the key with empty passphrase\"}",
            "{\"code\":-401,\"message\":\"Failed to add key\"}"
        ]
    },
    "exportkey": {
        "type": "command",
        "name": "ExportKey",
        "desc": "Reveal the serialized key corresponding to <pubkey>.",
        "request": {
            "type": "object",
            "content": {
                "pubkey": {
                    "type": "string",
                    "desc": "public key"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "pubkey",
            "desc": "public key with binary system"
        },
        "example": [
            {
                "request": "metabasenet-cli exportkey 0xa9cd6869b7d2d41c56c3573e43ca0bc666353ec387821857d5b0ad1bbd3377a1a62e4d69cc18c4a393b5ecd22513af25722a4db955650aa91a11ce4d7a1a3765",
                "response": "0x65371a7a4dce111aa90a6555b94d2a7225af1325d2ecb593a3c418cc694d2ea6a17733bd1badb0d557188287c33e3566c60bca433e57c3561cd4d2b76968cda9010000003057b6a1f2869353d731724a1c2f025cb96d102656e33d07ea595a56473f7d4a153f258766472b01f2f287fba11cbc008cdee177bf0c99ba063cb587d401438ab13b153cafc4edc193062a37f54c37550c6430ff4e733cf7d1"
            },
            {
                "request": "curl -d '{\"id\":13,\"method\":\"exportkey\",\"jsonrpc\":\"2.0\",\"params\":{\"pubkey\":\"0xa9cd6869b7d2d41c56c3573e43ca0bc666353ec387821857d5b0ad1bbd3377a1a62e4d69cc18c4a393b5ecd22513af25722a4db955650aa91a11ce4d7a1a3765\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":13,\"jsonrpc\":\"2.0\",\"result\":\"0x65371a7a4dce111aa90a6555b94d2a7225af1325d2ecb593a3c418cc694d2ea6a17733bd1badb0d557188287c33e3566c60bca433e57c3561cd4d2b76968cda9010000003057b6a1f2869353d731724a1c2f025cb96d102656e33d07ea595a56473f7d4a153f258766472b01f2f287fba11cbc008cdee177bf0c99ba063cb587d401438ab13b153cafc4edc193062a37f54c37550c6430ff4e733cf7d1\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid pubkey\"}",
            "{\"code\":-4,\"message\":\"Unknown key\"}",
            "{\"code\":-401,\"message\":\"Failed to export key\"}"
        ]
    },
    "addnewtemplate": {
        "type": "command",
        "name": "AddNewTemplate",
        "desc": "Return encoded address for the given template id.",
        "request": {
            "type": "templaterequest",
            "fork": {
                "pubkey": {
                    "type": "string",
                    "desc": "public key"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "address",
            "desc": "address of template"
        },
        "example": [
            {
                "request": "metabasenet-cli addnewtemplate delegate '{\"mint\": \"0x316a4d04650b0190377fc40c2b183992046f72c9\", \"owner\": \"0x5bc5c1726286ff0a8006b19312ca307210e0e658\",\"rewardratio\":500}'",
                "response": "0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d"
            },
            {
                "request": "curl -d '{\"id\":1,\"method\":\"addnewtemplate\",\"jsonrpc\":\"2.0\",\"params\":{\"type\":\"delegate\",\"delegate\":{\"mint\":\"0x316a4d04650b0190377fc40c2b183992046f72c9\",\"owner\":\"0x5bc5c1726286ff0a8006b19312ca307210e0e658\",\"rewardratio\":500}}}' http://127.0.0.1:8812",
                "response": "{\"id\":1,\"jsonrpc\":\"2.0\",\"result\":\"0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d\"}"
            },
            "metabasenet-cli addnewtemplate fork '{\"redeem\":\"0x5bc5c1726286ff0a8006b19312ca307210e0e658\",\"fork\":\"0x00000079cae069a3dc43deb4c41600fdf1e457d6a807ee770921d1f88690f918\"}'",
            "metabasenet-cli addnewtemplate vote '{\"delegate\": \"0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d\", \"owner\": \"0x0a9f6b9e0de14c2c9d02883904a69c7bee82c2a5\", \"rewardmode\":0}'",
            "metabasenet-cli addnewtemplate pledge '{\"delegate\": \"0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d\", \"owner\": \"0x0a9f6b9e0de14c2c9d02883904a69c7bee82c2a5\", \"pledgetype\":1, \"cycles\":1, \"nonce\":0}'"
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid parameters,failed to make template\"}",
            "{\"code\":-401,\"message\":\"Failed to add template\"}",
            "{\"code\":-6,\"message\":\"Invalid parameter, missing redeem address\"}",
            "{\"code\":-6,\"message\":\"Invalid parameter, missing spent address\"}",
            "{\"code\":-6,\"message\":\"Invalid parameter, missing owner address\"}",
            "{\"code\":-6,\"message\":\"template type error. type: xxx\"}"
        ]
    },
    "importtemplate": {
        "type": "command",
        "name": "ImportTemplate",
        "desc": "Return encoded address for the given template.",
        "request": {
            "type": "object",
            "content": {
                "data": {
                    "type": "string",
                    "desc": "template data"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "address",
            "desc": "address of template"
        },
        "example": [
            {
                "request": "metabasenet-cli importtemplate 0x03316a4d04650b0190377fc40c2b183992046f72c95bc5c1726286ff0a8006b19312ca307210e0e65801f4",
                "response": "0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d"
            },
            {
                "request": "curl -d '{\"id\":52,\"method\":\"importtemplate\",\"jsonrpc\":\"2.0\",\"params\":{\"data\":\"0x03316a4d04650b0190377fc40c2b183992046f72c95bc5c1726286ff0a8006b19312ca307210e0e65801f4\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":52,\"jsonrpc\":\"2.0\",\"result\":\"0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid parameters,failed to make template\"}",
            "{\"code\":-401,\"message\":\"Failed to add template\"}"
        ]
    },
    "exporttemplate": {
        "type": "command",
        "name": "ExportTemplate",
        "desc": "Return encoded address for the given template.",
        "request": {
            "type": "object",
            "content": {
                "address": {
                    "type": "string",
                    "desc": "template address"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "data",
            "desc": "data of template"
        },
        "example": [
            {
                "request": "metabasenet-cli exporttemplate 0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d",
                "response": "0x03316a4d04650b0190377fc40c2b183992046f72c95bc5c1726286ff0a8006b19312ca307210e0e65801f4"
            },
            {
                "request": "curl -d '{\"id\":25,\"method\":\"exporttemplate\",\"jsonrpc\":\"2.0\",\"params\":{\"address\":\"0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":25,\"jsonrpc\":\"2.0\",\"result\":\"0x03316a4d04650b0190377fc40c2b183992046f72c95bc5c1726286ff0a8006b19312ca307210e0e65801f4\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-401,\"message\":\"Unkown template\"}"
        ]
    },
    "removetemplate": {
        "type": "command",
        "name": "RemoveTemplate",
        "desc": "Remove template in Wallet.",
        "request": {
            "type": "object",
            "content": {
                "address": {
                    "type": "string",
                    "desc": "template address"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "remove result"
        },
        "example": [
            {
                "request": "metabasenet-cli removetemplate 0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d",
                "response": "Success"
            },
            {
                "request": "curl -d '{\"id\":7,\"method\":\"removetemplate\",\"jsonrpc\":\"2.0\",\"params\":{\"address\":\"0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":7,\"jsonrpc\":\"2.0\",\"result\":\"Success\"}"
            }
        ],
        "error": [
            "{\"code\":-401,\"message\":\"Failed remove template.\"}"
        ]
    },
    "validateaddress": {
        "type": "command",
        "name": "ValidateAddress",
        "desc": "Return information about <address>.",
        "request": {
            "type": "object",
            "content": {
                "address": {
                    "type": "string",
                    "desc": "wallet address"
                },
                "fork": {
                    "type": "string",
                    "desc": "fork hash (default genesis fork)",
                    "required": false,
                    "opt": "f"
                },
                "block": {
                    "type": "string",
                    "desc": "block hash or number or latest (default latest block)",
                    "required": false,
                    "opt": "b"
                }
            }
        },
        "response": {
            "type": "object",
            "name": "data",
            "content": {
                "isvalid": {
                    "type": "bool",
                    "desc": "is valid"
                },
                "addressdata": {
                    "type": "object",
                    "desc": "address data",
                    "condition": "isvalid=true",
                    "content": {
                        "address": {
                            "type": "string",
                            "desc": "wallet address"
                        },
                        "ismine": {
                            "type": "bool",
                            "desc": "is mine"
                        },
                        "type": {
                            "type": "string",
                            "desc": "type, pubkey or template"
                        },
                        "pubkey": {
                            "type": "string",
                            "desc": "public key",
                            "required": false,
                            "condition": "type=pubkey"
                        },
                        "template": {
                            "type": "string",
                            "desc": "template type name",
                            "required": false,
                            "condition": "type=template"
                        },
                        "templatedata": {
                            "type": "templateresponse",
                            "desc": "template data",
                            "required": false,
                            "condition": "type=template"
                        }
                    }
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli validateaddress 0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d",
                "response": "{\"isvalid\":true,\"addressdata\":{\"address\":\"0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d\",\"ismine\":true,\"type\":\"template\",\"template\":\"mint\"}}"
            },
            {
                "request": "curl -d '{\"id\":2,\"method\":\"validateaddress\",\"jsonrpc\":\"2.0\",\"params\":{\"address\":\"0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":2,\"jsonrpc\":\"2.0\",\"result\":{\"isvalid\":true,\"addressdata\":{\"address\":\"0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d\",\"ismine\":true,\"type\":\"template\",\"template\":\"mint\"}}}"
            },
            {
                "request": "metabasenet-cli validateaddress 123",
                "response": "{\"isvalid\":false}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"validateaddress\",\"jsonrpc\":\"2.0\",\"params\":{\"address\":\"123\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":{\"isvalid\":false}}"
            }
        ]
    },
    "getbalance": {
        "type": "command",
        "name": "GetBalance",
        "introduction": "Get balance of an address.",
        "desc": [
            "Get balance of address.",
            "If (address) is not specified, return the balance for wallet's each address.",
            "If (address) is specified, return the balance in the address."
        ],
        "request": {
            "type": "object",
            "content": {
                "fork": {
                    "type": "string",
                    "desc": "fork hash, default is genesis",
                    "required": false,
                    "opt": "f"
                },
                "address": {
                    "type": "string",
                    "desc": "address, default is all",
                    "required": false,
                    "opt": "a"
                },
                "block": {
                    "type": "string",
                    "desc": "block hash or number or latest, default is latest block",
                    "required": false,
                    "opt": "b"
                },
                "page": {
                    "type": "uint",
                    "desc": "page, default is 0",
                    "default": 0,
                    "required": false,
                    "opt": "p"
                },
                "count": {
                    "type": "uint",
                    "desc": "count, default is 30",
                    "default": 30,
                    "required": false,
                    "opt": "n"
                }
            }
        },
        "response": {
            "type": "array",
            "name": "balance",
            "content": {
                "balance": {
                    "type": "object",
                    "desc": "balance info",
                    "content": {
                        "address": {
                            "type": "string",
                            "desc": "address"
                        },
                        "type": {
                            "type": "string",
                            "desc": "address type"
                        },
                        "nonce": {
                            "type": "uint",
                            "desc": "last tx nonce"
                        },
                        "avail": {
                            "type": "string",
                            "desc": "balance available amount (big float)"
                        },
                        "locked": {
                            "type": "string",
                            "desc": "locked amount (big float)"
                        },
                        "unconfirmedin": {
                            "type": "string",
                            "desc": "unconfirmed in amount (big float)"
                        },
                        "unconfirmedout": {
                            "type": "string",
                            "desc": "unconfirmed out amount (big float)"
                        }
                    }
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli getbalance",
                "response": "[{\"address\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"type\":\"pubkey\",\"nonce\":24,\"avail\":\"157989979.4212\",\"locked\":\"0.0\",\"unconfirmedin\":\"0.0\",\"unconfirmedout\":\"0.0\"}]"
            },
            {
                "request": "curl -d '{\"id\":1,\"method\":\"getbalance\",\"jsonrpc\":\"2.0\",\"params\":{}}' http://127.0.0.1:8812",
                "response": "{\"id\":1,\"jsonrpc\":\"2.0\",\"result\":[{\"address\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"type\":\"pubkey\",\"nonce\":24,\"avail\":\"157989979.4212\",\"locked\":\"0.0\",\"unconfirmedin\":\"0.0\",\"unconfirmedout\":\"0.0\"}}"
            },
            {
                "request": "metabasenet-cli getbalance -a=0x5962974eeb0b17b43edabfc9b747839317aa852f",
                "response": "[{\"address\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"type\":\"pubkey\",\"nonce\":24,\"avail\":\"157989979.4212\",\"locked\":\"0.0\",\"unconfirmedin\":\"0.0\",\"unconfirmedout\":\"0.0\"}]"
            },
            {
                "request": "curl -d '{\"id\":20,\"method\":\"getbalance\",\"jsonrpc\":\"2.0\",\"params\":{\"address\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":20,\"jsonrpc\":\"2.0\",\"result\":[{\"address\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"type\":\"pubkey\",\"nonce\":24,\"avail\":\"157989979.4212\",\"locked\":\"0.0\",\"unconfirmedin\":\"0.0\",\"unconfirmedout\":\"0.0\"}}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}"
        ]
    },
    "listtransaction": {
        "type": "command",
        "name": "ListTransaction",
        "introduction": "Return transactions list.",
        "desc": [
            "return up to (count) most recent transactions skipping the first (offset) transactions, need set config 'fulldb=true'."
        ],
        "request": {
            "type": "object",
            "content": {
                "address": {
                    "type": "string",
                    "desc": "address"
                },
                "fork": {
                    "type": "string",
                    "desc": "fork hash. If not set, default is genesis",
                    "required": false,
                    "opt": "f"
                },
                "offset": {
                    "type": "uint",
                    "desc": "query offset. If reverse is true and offset is 0, from last tx",
                    "required": false,
                    "default": 0,
                    "opt": "o"
                },
                "count": {
                    "type": "uint",
                    "desc": "transaction count, if 0 then 1000, max is 1000, default is 30",
                    "required": false,
                    "default": 30,
                    "opt": "n"
                },
                "reverse": {
                    "type": "bool",
                    "desc": "if reverse order, false is positive order, true is reverse order",
                    "required": false,
                    "default": false,
                    "opt": "r"
                },
                "block": {
                    "type": "string",
                    "desc": "block hash or number or latest (default latest block)",
                    "required": false,
                    "opt": "b"
                }
            }
        },
        "response": {
            "type": "array",
            "name": "transaction",
            "content": {
                "transaction": {
                    "type": "wallettxdata",
                    "desc": "wallet transaction data"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli listtransaction 0x4646c445d31e313764db47c894b3372d72e23b9d58ada120b7229cf4ea6b1d6f",
                "response": "[{\"txid\":\"0x4646c445d31e313764db47c894b3372d72e23b9d58ada120b7229cf4ea6b1d6f\",\"txindex\":0,\"blocknumber\":2081,\"transfertype\":\"common\",\"txtype\":\"token\",\"time\":1690338133,\"from\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"to\":\"0x7d3cfc954deead4a4791dff7fb359a5e543bab2b\",\"amount\":\"10.0\",\"fee\":\"0.0\"}]"
            },
            {
                "request": "curl -d '{\"id\":2,\"method\":\"listtransaction\",\"jsonrpc\":\"2.0\",\"params\":{\"address\":\"0x4646c445d31e313764db47c894b3372d72e23b9d58ada120b7229cf4ea6b1d6f\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":2,\"jsonrpc\":\"2.0\",\"result\":[{\"txid\":\"0x4646c445d31e313764db47c894b3372d72e23b9d58ada120b7229cf4ea6b1d6f\",\"txindex\":0,\"blocknumber\":2081,\"transfertype\":\"common\",\"txtype\":\"token\",\"time\":1690338133,\"from\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"to\":\"0x7d3cfc954deead4a4791dff7fb359a5e543bab2b\",\"amount\":\"10.0\",\"fee\":\"0.0\"}]}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-401,\"message\":\"Failed list transactions\"}",
            "{\"code\":-32600,\"message\":\"If you need this function, please set config 'fulldb=true' and restart\"}"
        ]
    },
    "sendfrom": {
        "type": "command",
        "name": "SendFrom",
        "introduction": "Send a transaction.",
        "desc": [
            "<amount> and <txfee> are real and rounded to the nearest 0.000001",
            "Return transaction id"
        ],
        "request": {
            "type": "object",
            "content": {
                "from": {
                    "type": "string",
                    "desc": "from address"
                },
                "to": {
                    "type": "string",
                    "desc": "to address"
                },
                "amount": {
                    "type": "string",
                    "desc": "amount (big float)"
                },
                "nonce": {
                    "type": "uint",
                    "desc": "nonce",
                    "required": false,
                    "opt": "n"
                },
                "gasprice": {
                    "type": "string",
                    "desc": "gas price (big float)",
                    "required": false,
                    "opt": "p"
                },
                "gas": {
                    "type": "uint",
                    "desc": "gas",
                    "required": false,
                    "opt": "g"
                },
                "fork": {
                    "type": "string",
                    "desc": "fork hash",
                    "required": false,
                    "opt": "f"
                },
                "data": {
                    "type": "string",
                    "desc": "output data",
                    "required": false,
                    "opt": "d"
                },
                "fdata": {
                    "type": "string",
                    "desc": "format data",
                    "required": false,
                    "opt": "fd"
                },
                "todata": {
                    "type": "string",
                    "desc": "If the 'to' address of transaction is a template, this option allows to save the template hex data. The hex data is equal output of RPC 'exporttemplate'",
                    "required": false,
                    "opt": "td"
                },
                "contractcode": {
                    "type": "string",
                    "desc": "contract code, code or code hash or contract address",
                    "required": false,
                    "opt": "cc"
                },
                "contractparam": {
                    "type": "string",
                    "desc": "contract param",
                    "required": false,
                    "opt": "cp"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "transaction",
            "desc": "transaction id"
        },
        "example": [
            {
                "request": "metabasenet-cli sendfrom 0x5962974eeb0b17b43edabfc9b747839317aa852f 0x7d3cfc954deead4a4791dff7fb359a5e543bab2b 10",
                "response": "0x4646c445d31e313764db47c894b3372d72e23b9d58ada120b7229cf4ea6b1d6f"
            },
            {
                "request": "curl -d '{\"id\":18,\"method\":\"sendfrom\",\"jsonrpc\":\"2.0\",\"params\":{\"from\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"to\":\"0x7d3cfc954deead4a4791dff7fb359a5e543bab2b\",\"amount\":\"10\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":18,\"jsonrpc\":\"2.0\",\"result\":\"0x4646c445d31e313764db47c894b3372d72e23b9d58ada120b7229cf4ea6b1d6f\"}"
            },
            {
                "request": "metabasenet-cli sendfrom 0x5962974eeb0b17b43edabfc9b747839317aa852f 0x7d3cfc954deead4a4791dff7fb359a5e543bab2b 10 -f=0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55",
                "response": "61ade019cedde7580b4a44c2cda6b4a2d6fdbb0d2ff0115e9cd4ce7a93d30fd2"
            },
            {
                "request": "curl -d '{\"id\":53,\"method\":\"sendfrom\",\"jsonrpc\":\"2.0\",\"params\":{\"from\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"to\":\"0x7d3cfc954deead4a4791dff7fb359a5e543bab2b\",\"amount\":\"10\",\"fork\":\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":53,\"jsonrpc\":\"2.0\",\"result\":\"61ade019cedde7580b4a44c2cda6b4a2d6fdbb0d2ff0115e9cd4ce7a93d30fd2\"}"
            },
            {
                "request": "metabasenet-cli sendfrom 0x5962974eeb0b17b43edabfc9b747839317aa852f 0x7d3cfc954deead4a4791dff7fb359a5e543bab2b 10 -n=2 -p=0.000002 -g=30000 -d=0x9a87d21254",
                "response": "0x01fd16a69bc8607d283e505225013f085d438621d5bd62b3c2ac4b2b37907403"
            },
            {
                "request": "curl -d '{\"id\":18,\"method\":\"sendfrom\",\"jsonrpc\":\"2.0\",\"params\":{\"from\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"to\":\"0x7d3cfc954deead4a4791dff7fb359a5e543bab2b\",\"amount\":\"10\",\"nonce\":2,\"gasprice\":\"0.000002\",\"gas\":30000,\"data\":\"0x9a87d21254\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":18,\"jsonrpc\":\"2.0\",\"result\":\"0x01fd16a69bc8607d283e505225013f085d438621d5bd62b3c2ac4b2b37907403\"}"
            },
            {
                "request": "metabasenet-cli sendfrom 0x5962974eeb0b17b43edabfc9b747839317aa852f 0x7d3cfc954deead4a4791dff7fb359a5e543bab2b 1000000 -td=0x050017b24437dafecb9c83cb9f8bbe60c43acf42eebcb69c1525e6f84077fb293f880191ba8db6735d7ae45f92841eaaa588a23f1a3be785076fd737ec1911bbd8e757f4010000",
                "response": "0x4646c445d31e313764db47c894b3372d72e23b9d58ada120b7229cf4ea6b1d6f"
            },
            {
                "request": "curl -d '{\"id\":18,\"method\":\"sendfrom\",\"jsonrpc\":\"2.0\",\"params\":{\"from\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"to\":\"0x7d3cfc954deead4a4791dff7fb359a5e543bab2b\",\"amount\":\"1000000\",\"todata\":\"0x050017b24437dafecb9c83cb9f8bbe60c43acf42eebcb69c1525e6f84077fb293f880191ba8db6735d7ae45f92841eaaa588a23f1a3be785076fd737ec1911bbd8e757f4010000\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":18,\"jsonrpc\":\"2.0\",\"result\":\"0x4646c445d31e313764db47c894b3372d72e23b9d58ada120b7229cf4ea6b1d6f\"}"
            },
            {
                "request": "metabasenet-cli sendfrom 0x5962974eeb0b17b43edabfc9b747839317aa852f 0 0 -cc=<contract code> -cp=<contract param>",
                "response": "0x56695bf2ad39aaff472bcf8ed291bbbfca9fffc3b2e0494108d6a5d4a31e75f5"
            },
            {
                "request": "curl -d '{\"id\":18,\"method\":\"sendfrom\",\"jsonrpc\":\"2.0\",\"params\":{\"from\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"to\":\"0\",\"amount\":\"0\",\"contractcode\":\"<contract code>\",\"contractparam\":\"<contract param>\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":18,\"jsonrpc\":\"2.0\",\"result\":\"0x56695bf2ad39aaff472bcf8ed291bbbfca9fffc3b2e0494108d6a5d4a31e75f5\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid from address\"}",
            "{\"code\":-6,\"message\":\"Invalid to address\"}",
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}",
            "{\"code\":-6,\"message\":\"Invalid amount\"}",
            "{\"code\":-6,\"message\":\"Invalid gasprice\"}",
            "{\"code\":-401,\"message\":\"Failed to create transaction\"}",
            "{\"code\":-401,\"message\":\"Failed to sign transaction\"}",
            "{\"code\":-10,\"message\":\"Tx rejected : xxx\"}"
        ]
    },
    "createtransaction": {
        "type": "command",
        "name": "CreateTransaction",
        "introduction": "Create a transaction.",
        "desc": [
            "<amount> and <txfee> are real and rounded to the nearest 0.000001.",
            "Return serialized tx."
        ],
        "request": {
            "type": "object",
            "content": {
                "from": {
                    "type": "string",
                    "desc": "from address"
                },
                "to": {
                    "type": "string",
                    "desc": "to address"
                },
                "amount": {
                    "type": "string",
                    "desc": "amount (big float)"
                },
                "nonce": {
                    "type": "uint",
                    "desc": "nonce",
                    "required": false,
                    "opt": "n"
                },
                "gasprice": {
                    "type": "string",
                    "desc": "gas price (big float)",
                    "required": false,
                    "opt": "p"
                },
                "gas": {
                    "type": "uint",
                    "desc": "gas",
                    "required": false,
                    "opt": "g"
                },
                "fork": {
                    "type": "string",
                    "desc": "fork hash",
                    "required": false,
                    "opt": "f"
                },
                "data": {
                    "type": "string",
                    "desc": "output data",
                    "required": false,
                    "opt": "d"
                },
                "fdata": {
                    "type": "string",
                    "desc": "format data",
                    "required": false,
                    "opt": "fd"
                },
                "todata": {
                    "type": "string",
                    "desc": "If the 'to' address of transaction is a template, this option allows to save the template hex data. The hex data is equal output of RPC 'exporttemplate'",
                    "required": false,
                    "opt": "td"
                },
                "contractcode": {
                    "type": "string",
                    "desc": "contract code, code or code hash or contract address",
                    "required": false,
                    "opt": "cc"
                },
                "contractparam": {
                    "type": "string",
                    "desc": "contract param",
                    "required": false,
                    "opt": "cp"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "transaction",
            "desc": "transaction data"
        },
        "example": [
            {
                "request": "metabasenet-cli createtransaction 0x5962974eeb0b17b43edabfc9b747839317aa852f 0x7d3cfc954deead4a4791dff7fb359a5e543bab2b 10",
                "response": "0x02c918142f85aa17938347b7c9bfda3eb4170beb4e976259142bab3b545e9a35fbf7df91474aadee4d95fc3c7d088ac7230489e8000005e8d4a510000252080000"
            },
            {
                "request": "curl -d '{\"id\":59,\"method\":\"createtransaction\",\"jsonrpc\":\"2.0\",\"params\":{\"from\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"to\":\"0x7d3cfc954deead4a4791dff7fb359a5e543bab2b\",\"amount\":\"10\",}}' http://127.0.0.1:8812",
                "response": "{\"id\":59,\"jsonrpc\":\"2.0\",\"result\":\"0x02c918142f85aa17938347b7c9bfda3eb4170beb4e976259142bab3b545e9a35fbf7df91474aadee4d95fc3c7d088ac7230489e8000005e8d4a510000252080000\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid from address\"}",
            "{\"code\":-6,\"message\":\"Invalid to address\"}",
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}",
            "{\"code\":-6,\"message\":\"Invalid gasprice\"}",
            "{\"code\":-401,\"message\":\"Failed to create transaction\"}"
        ]
    },
    "signtransaction": {
        "type": "command",
        "name": "SignTransaction",
        "introduction": "Sign a transaction.",
        "desc": [
            "Return json object with keys:",
            "  hex : raw transaction with signature(s) (hex-encoded string)",
            "  completed : true if transaction has a completed set of signature (false if not)"
        ],
        "request": {
            "type": "object",
            "content": {
                "txdata": {
                    "type": "string",
                    "desc": "transaction data(hex string)"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "signature",
            "desc": "hex of transaction data"
        },
        "example": [
            {
                "request": "metabasenet-cli signtransaction 0x02c918142f85aa17938347b7c9bfda3eb4170beb4e976259142bab3b545e9a35fbf7df91474aadee4d95fc3c7d088ac7230489e8000005e8d4a510000252080000",
                "response": "{\"hex\":\"0x02c918142f85aa17938347b7c9bfda3eb4170beb4e976259142bab3b545e9a35fbf7df91474aadee4d95fc3c7d088ac7230489e8000005e8d4a51000025208004150b186ec91f439696626447f0f379f146665099f2269e84fde9f96802c3410d110716aaf722b8009b8b3585be64163cc21a8f22f404f3c1ccf2af3fec03bf2ea01\",\"complete\":true}"
            },
            {
                "request": "curl -d '{\"id\":62,\"method\":\"signtransaction\",\"jsonrpc\":\"2.0\",\"params\":{\"txdata\":\"0x02c918142f85aa17938347b7c9bfda3eb4170beb4e976259142bab3b545e9a35fbf7df91474aadee4d95fc3c7d088ac7230489e8000005e8d4a510000252080000\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":62,\"jsonrpc\":\"2.0\",\"result\":{\"hex\":\"0x02c918142f85aa17938347b7c9bfda3eb4170beb4e976259142bab3b545e9a35fbf7df91474aadee4d95fc3c7d088ac7230489e8000005e8d4a51000025208004150b186ec91f439696626447f0f379f146665099f2269e84fde9f96802c3410d110716aaf722b8009b8b3585be64163cc21a8f22f404f3c1ccf2af3fec03bf2ea01\",\"complete\":true}}"
            }
        ],
        "error": [
            "{\"code\":-8,\"message\":\"TX decode failed\"}",
            "{\"code\":-401,\"message\":\"Failed to sign transaction\"}"
        ]
    },
    "signmessage": {
        "type": "command",
        "name": "SignMessage",
        "desc": "Sign a message with the private key of an pubkey",
        "request": {
            "type": "object",
            "content": {
                "message": {
                    "type": "string",
                    "desc": "message to be signed"
                },
                "pubkey": {
                    "type": "string",
                    "desc": "public key",
                    "required": false,
                    "opt": "pubkey"
                },
                "privkey": {
                    "type": "string",
                    "desc": "private key",
                    "required": false,
                    "opt": "privkey"
                },
                "addr": {
                    "type": "string",
                    "desc": "address signed",
                    "required": false,
                    "opt": "a"
                },
                "hasprefix": {
                    "type": "bool",
                    "desc": "If add magic string(MetabaseNet Signed Message:\\n) before message or not",
                    "required": false,
                    "default": true,
                    "opt": "p"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "signature",
            "desc": "signature of message"
        },
        "example": [
            {
                "request": "metabasenet-cli signmessage 123456 -pubkey=0xa9cd6869b7d2d41c56c3573e43ca0bc666353ec387821857d5b0ad1bbd3377a1a62e4d69cc18c4a393b5ecd22513af25722a4db955650aa91a11ce4d7a1a3765",
                "response": "0xadefe8db8e6f5f845366a520ed6f295e02f2e7e2440096c95f4db37cd40423f53b390213bce4a23a884b4868294222bf462edaf9e455d9fd1e65f231b832425901"
            },
            {
                "request": "curl -d '{\"id\":4,\"method\":\"signmessage\",\"jsonrpc\":\"2.0\",\"params\":{\"pubkey\":\"0xa9cd6869b7d2d41c56c3573e43ca0bc666353ec387821857d5b0ad1bbd3377a1a62e4d69cc18c4a393b5ecd22513af25722a4db955650aa91a11ce4d7a1a3765\",\"message\":\"123456\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":4,\"jsonrpc\":\"2.0\",\"result\":\"0xadefe8db8e6f5f845366a520ed6f295e02f2e7e2440096c95f4db37cd40423f53b390213bce4a23a884b4868294222bf462edaf9e455d9fd1e65f231b832425901\"}"
            }
        ],
        "error": [
            "{\"code\":-4,\"message\":\"Unknown key\"}",
            "{\"code\":-405,\"message\":\"Key is locked\"}",
            "{\"code\":-401,\"message\":\"Failed to sign message\"}"
        ]
    },
    "listaddress": {
        "type": "command",
        "name": "ListAddress",
        "desc": "List all of the addresses from pub keys and template ids",
        "request": {
            "type": "object",
            "content": {
                "page": {
                    "type": "uint",
                    "desc": "page, default is 0",
                    "default": 0,
                    "required": false,
                    "opt": "p"
                },
                "count": {
                    "type": "uint",
                    "desc": "count, default is 30",
                    "default": 30,
                    "required": false,
                    "opt": "n"
                }
            }
        },
        "response": {
            "type": "array",
            "name": "addressdata",
            "content": {
                "addressdata": {
                    "type": "object",
                    "desc": "address data",
                    "content": {
                        "type": {
                            "type": "string",
                            "desc": "type, pubkey or template"
                        },
                        "address": {
                            "type": "string",
                            "desc": "public key or template address"
                        },
                        "pubkey": {
                            "type": "string",
                            "desc": "public key",
                            "condition": "type=pubkey"
                        },
                        "template": {
                            "type": "string",
                            "desc": "template type name",
                            "condition": "type=template"
                        },
                        "templatedata": {
                            "type": "templateresponse",
                            "desc": "template data",
                            "condition": "type=template"
                        }
                    }
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli listaddress",
                "response": "[{\"type\":\"pubkey\",\"address\":\"0xcc963a4ca2a9032e41668756cc4ccb7c59f112be\",\"pubkey\":\"0x0c5a8805c62f6fc44d1a3bf81107e8c22372c823b875c5a31af55b4951dcc3ac27a6c2b5e867077cd235439cbf8cea28d475401560d0c6e38013b72b307b0941\"},{\"type\":\"pubkey\",\"address\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"pubkey\":\"0xa9cd6869b7d2d41c56c3573e43ca0bc666353ec387821857d5b0ad1bbd3377a1a62e4d69cc18c4a393b5ecd22513af25722a4db955650aa91a11ce4d7a1a3765\"}]"
            },
            {
                "request": "curl -d '{\"id\":1,\"method\":\"listaddress\",\"jsonrpc\":\"2.0\",\"params\":{}}' http://127.0.0.1:8812",
                "response": "{\"id\":0,\"jsonrpc\":\"2.0\",\"result\":[{\"type\":\"pubkey\",\"address\":\"0xcc963a4ca2a9032e41668756cc4ccb7c59f112be\",\"pubkey\":\"0x0c5a8805c62f6fc44d1a3bf81107e8c22372c823b875c5a31af55b4951dcc3ac27a6c2b5e867077cd235439cbf8cea28d475401560d0c6e38013b72b307b0941\"},{\"type\":\"pubkey\",\"address\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"pubkey\":\"0xa9cd6869b7d2d41c56c3573e43ca0bc666353ec387821857d5b0ad1bbd3377a1a62e4d69cc18c4a393b5ecd22513af25722a4db955650aa91a11ce4d7a1a3765\"}]}"
            }
        ]
    },
    "exportwallet": {
        "type": "command",
        "name": "ExportWallet",
        "desc": "Export all of keys and templates from wallet to a specified file in JSON format.",
        "request": {
            "type": "object",
            "content": {
                "path": {
                    "type": "string",
                    "desc": "save file path"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "export result"
        },
        "example": [
            {
                "request": "metabasenet-cli exportwallet /Users/Loading/a.txt",
                "response": "Wallet file has been saved at: /Users/Loading/a.txt"
            },
            {
                "request": "{\"id\":4,\"method\":\"exportwallet\",\"jsonrpc\":\"2.0\",\"params\":{\"path\":\"/Users/Loading/a.txt\"}}",
                "response": "{\"id\":4,\"jsonrpc\":\"2.0\",\"result\":\"Wallet file has been saved at: /Users/Loading/a.txt\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid template address\"}",
            "{\"code\":-401,\"message\":\"Must be an absolute path.\"}",
            "{\"code\":-401,\"message\":\"Cannot export to a folder.\"}",
            "{\"code\":-401,\"message\":\"File has been existed.\"}",
            "{\"code\":-401,\"message\":\"Failed to create directories.\"}",
            "{\"code\":-401,\"message\":\"Failed to export key\"}",
            "{\"code\":-401,\"message\":\"Unkown template\"}",
            "{\"code\":-401,\"message\":\"filesystem_error\"}"
        ]
    },
    "importwallet": {
        "type": "command",
        "name": "ImportWallet",
        "desc": "Import keys and templates from an archived file to the wallet in JSON format.",
        "request": {
            "type": "object",
            "content": {
                "path": {
                    "type": "string",
                    "desc": "save file path"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "export result"
        },
        "example": [
            {
                "request": "metabasenet-cli importwallet /Users/Loading/a.txt",
                "response": "Imported 0 keys and 0 templates."
            },
            {
                "request": "{\"id\":5,\"method\":\"importwallet\",\"jsonrpc\":\"2.0\",\"params\":{\"path\":\"/Users/Loading/a.txt\"}}",
                "response": "{\"id\":5,\"jsonrpc\":\"2.0\",\"result\":\"Imported 0 keys and 0 templates.\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid parameters,failed to make template\"}",
            "{\"code\":-401,\"message\":\"Must be an absolute path.\"}",
            "{\"code\":-401,\"message\":\"File has been existed.\"}",
            "{\"code\":-401,\"message\":\"Filesystem_error - failed to read.\"}",
            "{\"code\":-401,\"message\":\"Wallet file exported is invalid, check it and try again.\"}",
            "{\"code\":-401,\"message\":\"Data format is not correct, check it and try again.\"}",
            "{\"code\":-401,\"message\":\"Failed to add key\"}",
            "{\"code\":-401,\"message\":\"Failed to sync wallet tx\"}",
            "{\"code\":-401,\"message\":\"Failed to add template\"}",
            "{\"code\":-32602,\"message\":\"Failed to verify serialized key\"}",
            "{\"code\":-32602,\"message\":\"Can't import the key with empty passphrase\"}"
        ]
    },
    "makeorigin": {
        "type": "command",
        "name": "MakeOrigin",
        "desc": "Return hex-encoded block.",
        "request": {
            "type": "object",
            "content": {
                "type": {
                    "type": "string",
                    "desc": "fork type: clonemap, user"
                },
                "prev": {
                    "type": "string",
                    "desc": "prev block hash"
                },
                "owner": {
                    "type": "string",
                    "desc": "owner address"
                },
                "amount": {
                    "type": "string",
                    "desc": "amount (big float)"
                },
                "name": {
                    "type": "string",
                    "desc": "unique fork name"
                },
                "symbol": {
                    "type": "string",
                    "desc": "fork symbol"
                },
                "chainid": {
                    "type": "uint",
                    "desc": "chain id"
                },
                "reward": {
                    "type": "string",
                    "desc": "mint reward (big float)"
                },
                "halvecycle": {
                    "type": "uint",
                    "desc": "halve cycle: 0: fixed reward, >0: blocks of halve cycle"
                },
                "nonce": {
                    "type": "uint",
                    "desc": "fork nonce",
                    "default": 0,
                    "required": false,
                    "opt": "n"
                }
            }
        },
        "response": {
            "type": "object",
            "name": "block",
            "desc": "hex-encoded block",
            "content": {
                "hash": {
                    "type": "string",
                    "desc": "block hash"
                },
                "hex": {
                    "type": "string",
                    "desc": "block data hex"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli makeorigin user 0xc907f7b8e50ea811dce40844ef9435e60d59edd4a9cb0b209289e3c623b8cb68 0x5962974eeb0b17b43edabfc9b747839317aa852f 300000000 test-fork tfs 208 200 0",
                "response": "{\"hash\":\"0xca95f7efe0d568dd59d98e0423f80ce292d29590e5b98fb4e059d1e69aaeb288\",\"hex\":\"0x0111fe5e44bf640038093d54d5c5b2ba6120e3e76f3c647c7c5d2497d85120837bd8345d05000000001e06865d7b088885d75f64c9d73d11d3dea6f6145016c9b5b63773929a0eb33800000000010168010000000309746573742d666f726b03746673d00bf8277896582678ac000000090ad78ebc5ac6200000074a9b6384488000002f85aa17938347b7c9bfda3eb4170beb4e976259553c2e6b595cee0477b24a7228d9ef0679911d438523404487f6746f000000000501d00000142f85aa17938347b7c9bfda3eb4170beb4e9762590bf8277896582678ac000000000002110220001520000000000000000000000000000000000000000000f8277896582678ac0000000000412e01171ce99e96e235fd29c49c916b8dd1f7b81ca8959623f95ab16b7b3935042ca42698d4068710767cbca3d254407a9514b419dc90dc86184b145d846da0aa01\"}"
            },
            {
                "request": "curl -d '{\"id\":4,\"method\":\"makeorigin\",\"jsonrpc\":\"2.0\",\"params\":{\"type\":\"user\",\"prev\":\"0xc907f7b8e50ea811dce40844ef9435e60d59edd4a9cb0b209289e3c623b8cb68\",\"owner\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"amount\":\"300000000\",\"name\":\"test-fork\",\"symbol\":\"tfs\",\"reward\":\"200\",\"chainid\":208,\"halvecycle\":0}}' http://127.0.0.1:8812",
                "response": "{\"id\":4,\"jsonrpc\":\"2.0\",\"result\":{\"hash\":\"0xca95f7efe0d568dd59d98e0423f80ce292d29590e5b98fb4e059d1e69aaeb288\",\"hex\":\"0x0111fe5e44bf640038093d54d5c5b2ba6120e3e76f3c647c7c5d2497d85120837bd8345d05000000001e06865d7b088885d75f64c9d73d11d3dea6f6145016c9b5b63773929a0eb33800000000010168010000000309746573742d666f726b03746673d00bf8277896582678ac000000090ad78ebc5ac6200000074a9b6384488000002f85aa17938347b7c9bfda3eb4170beb4e976259553c2e6b595cee0477b24a7228d9ef0679911d438523404487f6746f000000000501d00000142f85aa17938347b7c9bfda3eb4170beb4e9762590bf8277896582678ac000000000002110220001520000000000000000000000000000000000000000000f8277896582678ac0000000000412e01171ce99e96e235fd29c49c916b8dd1f7b81ca8959623f95ab16b7b3935042ca42698d4068710767cbca3d254407a9514b419dc90dc86184b145d846da0aa01\"}}"
            }
        ],
        "error": [
            "{\"code\":-4,\"message\":\"Owner' address should be pubkey address\"}",
            "{\"code\":-4,\"message\":\"Unknown key\"}",
            "{\"code\":-6,\"message\":\"Unknown prev block\"}",
            "{\"code\":-6,\"message\":\"Invalid owner\"}",
            "{\"code\":-6,\"message\":\"Invalid amount\"}",
            "{\"code\":-6,\"message\":\"Invalid name or symbol\"}",
            "{\"code\":-6,\"message\":\"Prev block should not be extended/vacant block\"}",
            "{\"code\":-405,\"message\":\"Key is locked\"}",
            "{\"code\":-401,\"message\":\"Failed to sign message\"}"
        ]
    },
    "verifymessage": {
        "type": "command",
        "name": "VerifyMessage",
        "desc": "Verify a signed message",
        "request": {
            "type": "object",
            "content": {
                "pubkey": {
                    "type": "string",
                    "desc": "public key"
                },
                "message": {
                    "type": "string",
                    "desc": "message to be verified"
                },
                "sig": {
                    "type": "string",
                    "desc": "sign"
                },
                "addr": {
                    "type": "string",
                    "desc": "address signed",
                    "required": false,
                    "opt": "a"
                },
                "hasprefix": {
                    "type": "bool",
                    "desc": "If add magic string(MetabaseNet Signed Message:\\n) before message or not",
                    "required": false,
                    "default": true,
                    "opt": "p"
                }
            }
        },
        "response": {
            "type": "bool",
            "name": "result",
            "desc": "message verified result."
        },
        "example": [
            {
                "request": "metabasenet-cli verifymessage 0xa9cd6869b7d2d41c56c3573e43ca0bc666353ec387821857d5b0ad1bbd3377a1a62e4d69cc18c4a393b5ecd22513af25722a4db955650aa91a11ce4d7a1a3765 123456 0xadefe8db8e6f5f845366a520ed6f295e02f2e7e2440096c95f4db37cd40423f53b390213bce4a23a884b4868294222bf462edaf9e455d9fd1e65f231b832425901",
                "response": "true"
            },
            {
                "request": "curl -d '{\"id\":5,\"method\":\"verifymessage\",\"jsonrpc\":\"2.0\",\"params\":{\"pubkey\":\"0xa9cd6869b7d2d41c56c3573e43ca0bc666353ec387821857d5b0ad1bbd3377a1a62e4d69cc18c4a393b5ecd22513af25722a4db955650aa91a11ce4d7a1a3765\",\"message\":\"123456\",\"sig\":\"0xadefe8db8e6f5f845366a520ed6f295e02f2e7e2440096c95f4db37cd40423f53b390213bce4a23a884b4868294222bf462edaf9e455d9fd1e65f231b832425901\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":5,\"jsonrpc\":\"2.0\",\"result\":true}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid pubkey\"}",
            "{\"code\":-6,\"message\":\"Invalid message\"}",
            "{\"code\":-6,\"message\":\"Invalid sig\"}"
        ]
    },
    "makekeypair": {
        "type": "command",
        "name": "MakeKeyPair",
        "desc": "Make a public/private key pair.",
        "request": {
            "type": "object",
            "content": {}
        },
        "response": {
            "type": "object",
            "name": "keypair",
            "content": {
                "privkey": {
                    "type": "string",
                    "desc": "private key"
                },
                "pubkey": {
                    "type": "string",
                    "desc": "public key"
                },
                "address": {
                    "type": "string",
                    "desc": "address"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli makekeypair",
                "response": "{\"privkey\":\"0x131795caa7820310fe8fd06b514ec8a42a42c2512d978c8d1d992ff0ffe67bdf\",\"pubkey\":\"0x0a2cd33b769ca5f06675ddb1d7707d323da5b270ce2c42ea6f09379cd43f2d03a156e217609e512718b322539d8f8e88fec085f54643488e6a7864fca3976fa1\",\"address\":\"0x08df6d1917566dc74580086303351462091284fd\"}"
            },
            {
                "request": "curl -d '{\"id\":42,\"method\":\"makekeypair\",\"jsonrpc\":\"2.0\",\"params\":{}}' http://127.0.0.1:8812",
                "response": "{\"id\":42,\"jsonrpc\":\"2.0\",\"result\":{\"privkey\":\"0x131795caa7820310fe8fd06b514ec8a42a42c2512d978c8d1d992ff0ffe67bdf\",\"pubkey\":\"0x0a2cd33b769ca5f06675ddb1d7707d323da5b270ce2c42ea6f09379cd43f2d03a156e217609e512718b322539d8f8e88fec085f54643488e6a7864fca3976fa1\",\"address\":\"0x08df6d1917566dc74580086303351462091284fd\"}}"
            }
        ]
    },
    "getpubkey": {
        "type": "command",
        "name": "GetPubkey",
        "desc": "Return public key by address or private key.",
        "request": {
            "type": "object",
            "content": {
                "privkey": {
                    "type": "string",
                    "desc": "private key"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "pubkey",
            "desc": "public key"
        },
        "example": [
            {
                "request": "metabasenet-cli getpubkey 0xd8b8db5ef512bd8e5a04f83ccfcfe6470c83d3f2e31480828ecf93a9ac0a54e2",
                "response": "06c4246621002576ec70545f04f2cb75378e3f1a16eca2c596fc1c64f52e122b"
            },
            {
                "request": "curl -d '{\"id\":44,\"method\":\"getpubkey\",\"jsonrpc\":\"2.0\",\"params\":{\"privkey\":\"0xd8b8db5ef512bd8e5a04f83ccfcfe6470c83d3f2e31480828ecf93a9ac0a54e2\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":44,\"jsonrpc\":\"2.0\",\"result\":\"06c4246621002576ec70545f04f2cb75378e3f1a16eca2c596fc1c64f52e122b\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid privkey\"}"
        ]
    },
    "getpubkeyaddress": {
        "type": "command",
        "name": "GetPubkeyAddress",
        "desc": "Return encoded address for the given public key.",
        "request": {
            "type": "object",
            "content": {
                "pubkey": {
                    "type": "string",
                    "desc": "public key"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "address",
            "desc": "address of public key"
        },
        "example": [
            {
                "request": "metabasenet-cli getpubkeyaddress 0xa9cd6869b7d2d41c56c3573e43ca0bc666353ec387821857d5b0ad1bbd3377a1a62e4d69cc18c4a393b5ecd22513af25722a4db955650aa91a11ce4d7a1a3765",
                "response": "0x5962974eeb0b17b43edabfc9b747839317aa852f"
            },
            {
                "request": "curl -d '{\"id\":44,\"method\":\"getpubkeyaddress\",\"jsonrpc\":\"2.0\",\"params\":{\"pubkey\":\"0xa9cd6869b7d2d41c56c3573e43ca0bc666353ec387821857d5b0ad1bbd3377a1a62e4d69cc18c4a393b5ecd22513af25722a4db955650aa91a11ce4d7a1a3765\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":44,\"jsonrpc\":\"2.0\",\"result\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid pubkey\"}"
        ]
    },
    "maketemplate": {
        "type": "command",
        "name": "MakeTemplate",
        "desc": "Return encoded address for the given template id.",
        "request": {
            "type": "templaterequest"
        },
        "response": {
            "type": "object",
            "name": "address",
            "content": {
                "address": {
                    "type": "string",
                    "desc": "address of template"
                },
                "hex": {
                    "type": "string",
                    "desc": "template data hex string"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli maketemplate delegate '{\"mint\": \"0x316a4d04650b0190377fc40c2b183992046f72c9\", \"owner\": \"0x5bc5c1726286ff0a8006b19312ca307210e0e658\",\"rewardratio\":500}'",
                "response": "0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d"
            },
            {
                "request": "curl -d '{\"id\":1,\"method\":\"maketemplate\",\"jsonrpc\":\"2.0\",\"params\":{\"type\":\"delegate\",\"delegate\":{\"mint\":\"0x316a4d04650b0190377fc40c2b183992046f72c9\",\"owner\":\"0x5bc5c1726286ff0a8006b19312ca307210e0e658\",\"rewardratio\":500}}}' http://127.0.0.1:8812",
                "response": "{\"id\":1,\"jsonrpc\":\"2.0\",\"result\":\"0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d\"}"
            },
            "metabasenet-cli maketemplate fork '{\"redeem\":\"0x5bc5c1726286ff0a8006b19312ca307210e0e658\",\"fork\":\"0x00000079cae069a3dc43deb4c41600fdf1e457d6a807ee770921d1f88690f918\"}'",
            "metabasenet-cli maketemplate vote '{\"delegate\": \"0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d\", \"owner\": \"0x0a9f6b9e0de14c2c9d02883904a69c7bee82c2a5\", \"rewardmode\":0}'",
            "metabasenet-cli maketemplate pledge '{\"delegate\": \"0x93b09f6e5a5a3e7122a7ce468d4e5d2b0fc8d41d\", \"owner\": \"0x0a9f6b9e0de14c2c9d02883904a69c7bee82c2a5\", \"pledgetype\":1, \"cycles\":1, \"nonce\":0}'"
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid parameters, failed to make template\"}",
            "{\"code\":-6,\"message\":\"Invalid parameter, missing redeem address\"}",
            "{\"code\":-6,\"message\":\"Invalid parameter, missing spent address\"}",
            "{\"code\":-6,\"message\":\"Invalid parameter, missing owner address\"}",
            "{\"code\":-6,\"message\":\"template type error. type: xxx\"}"
        ]
    },
    "decodetransaction": {
        "type": "command",
        "name": "DecodeTransaction",
        "desc": "Return a JSON object representing the serialized, hex-encoded transaction.",
        "request": {
            "type": "object",
            "content": {
                "txdata": {
                    "type": "string",
                    "desc": "transaction raw data"
                }
            }
        },
        "response": {
            "type": "transactiondata",
            "name": "transaction",
            "desc": "transaction decoded data"
        },
        "example": [
            {
                "request": "metabasenet-cli decodetransaction 0x120172f8701985e8d4a5100082530294b955034fcefb66112bab47483c8d243b86cb2c1d8a012d231c7c593eec0000808201b5a0a91f9091a641ad5ee6c6754e372dac948eb2e12db7143df3a63c5d8631019c1ca03630cf0aced70b5f75f62c607566bdc9ff257170c55a953b1417cb2178f1f93f",
                "response": "{\"txid\":\"0x69350f7d89081c0ceb3ebb3f354840ab3f662a418140e386e7eb9e7b093987b4\",\"type\":\"eth-message-call\",\"nonce\":25,\"from\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"to\":\"0xb955034fcefb66112bab47483c8d243b86cb2c1d\",\"amount\":\"5555.0\",\"gaslimit\":21250,\"gasprice\":\"0.000001\",\"txfee\":\"0.02125\",\"data\":\"\",\"signhash\":\"0xac577ca2e57688eed1de36c982136d7eab509b401dbc507ec7a70c5a0de099a6\",\"sig\":\"0xa91f9091a641ad5ee6c6754e372dac948eb2e12db7143df3a63c5d8631019c1c3630cf0aced70b5f75f62c607566bdc9ff257170c55a953b1417cb2178f1f93f00\",\"fork\":\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\",\"height\":0,\"blockhash\":\"\"}"
            },
            {
                "request": "curl -d '{\"id\":1,\"method\":\"decodetransaction\",\"jsonrpc\":\"2.0\",\"params\":{\"txdata\":\"0x120172f8701985e8d4a5100082530294b955034fcefb66112bab47483c8d243b86cb2c1d8a012d231c7c593eec0000808201b5a0a91f9091a641ad5ee6c6754e372dac948eb2e12db7143df3a63c5d8631019c1ca03630cf0aced70b5f75f62c607566bdc9ff257170c55a953b1417cb2178f1f93f\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":1,\"jsonrpc\":\"2.0\",\"result\":{\"txid\":\"0x69350f7d89081c0ceb3ebb3f354840ab3f662a418140e386e7eb9e7b093987b4\",\"type\":\"eth-message-call\",\"nonce\":25,\"from\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"to\":\"0xb955034fcefb66112bab47483c8d243b86cb2c1d\",\"amount\":\"5555.0\",\"gaslimit\":21250,\"gasprice\":\"0.000001\",\"txfee\":\"0.02125\",\"data\":\"\",\"signhash\":\"0xac577ca2e57688eed1de36c982136d7eab509b401dbc507ec7a70c5a0de099a6\",\"sig\":\"0xa91f9091a641ad5ee6c6754e372dac948eb2e12db7143df3a63c5d8631019c1c3630cf0aced70b5f75f62c607566bdc9ff257170c55a953b1417cb2178f1f93f00\",\"fork\":\"0x000000006f74f68744402385431d917906efd928724ab27704ee5c596b2e3c55\",\"height\":0,\"blockhash\":\"\"}}\n"
            }
        ],
        "error": [
            "{\"code\":-8,\"message\":\"TX decode failed\"}",
            "{\"code\":-6,\"message\":\"Unknown anchor block\"}"
        ]
    },
    "gettxfee": {
        "type": "command",
        "name": "GetTransactionFee",
        "desc": "Return TxFee for vchData Hex data",
        "request": {
            "type": "object",
            "content": {
                "hexdata": {
                    "type": "string",
                    "desc": "Hex encoded vchData in transaction"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "txfee",
            "desc": "transaction Fee (big float)"
        },
        "example": [
            {
                "request": "metabasenet-cli gettxfee 0xfeeda13f124bbc",
                "response": "0.0215"
            },
            {
                "request": "curl -d '{\"id\":1,\"method\":\"gettxfee\",\"jsonrpc\":\"2.0\",\"params\":{\"hexdata\":\"0xfeeda13f124bbc\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":1,\"jsonrpc\":\"2.0\",\"result\":\"0.0215\"}\n"
            }
        ],
        "error": []
    },
    "makesha256": {
        "type": "command",
        "name": "MakeSha256",
        "desc": "Make sha256",
        "request": {
            "type": "object",
            "content": {
                "hexdata": {
                    "type": "string",
                    "desc": "Hex encoded data",
                    "required": false,
                    "opt": "h"
                }
            }
        },
        "response": {
            "type": "object",
            "name": "result",
            "content": {
                "hexdata": {
                    "type": "string",
                    "desc": "Hex encoded data"
                },
                "sha256": {
                    "type": "string",
                    "desc": "Sha256 string"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli makesha256",
                "response": "{\"hexdata\" : \"0x639100de22308c20cd9ae04b4047e8b2cda49f56e5018364d701f9102d1e438a\", \"sha256\" : \"0x2f6479763179938cddb1e6abd24e131792a1afa4e00c0201c55928b4e5302f73\"}"
            },
            {
                "request": "curl -d '{\"id\":1,\"method\":\"makesha256\",\"jsonrpc\":\"2.0\",\"params\":{\"hexdata\":\"54ec6b4a77eadc39207697e816e2d2cc6881263ecab078a4c770228e11cbff99\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":1,\"jsonrpc\":\"2.0\",\"result\":{\"hexdata\" : \"0x639100de22308c20cd9ae04b4047e8b2cda49f56e5018364d701f9102d1e438a\", \"sha256\" : \"0x2f6479763179938cddb1e6abd24e131792a1afa4e00c0201c55928b4e5302f73\"}}\n"
            }
        ],
        "error": []
    },
    "querystat": {
        "type": "command",
        "name": "QueryStat",
        "desc": "Query statistical data",
        "request": {
            "type": "object",
            "content": {
                "type": {
                    "type": "string",
                    "desc": "statistical type: maker: block maker, p2psyn: p2p synchronization"
                },
                "fork": {
                    "type": "string",
                    "desc": "fork hash (default all fork)",
                    "required": false,
                    "opt": "f"
                },
                "begin": {
                    "type": "string",
                    "desc": "begin time(HH:MM:SS) (default last count records)",
                    "required": false,
                    "opt": "b"
                },
                "count": {
                    "type": "uint",
                    "desc": "get record count (default 20)",
                    "required": false,
                    "opt": "n"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "stattable",
            "desc": [
                "statistical data table",
                "1) maker: block maker",
                "-- time: statistical time, format: hh:mm:ss",
                "-- powblocks: number of POA blocks produced in one minute",
                "-- dposblocks: number of POS blocks produced in one minute",
                "-- tps: number of TX produced in one second",
                "2) p2psyn: p2p synchronization",
                "-- time: statistical time, format: hh:mm:ss",
                "-- recvblocks: number of synchronized receiving blocks in one minute",
                "-- recvtps: number of synchronized receiving TX in one second",
                "-- sendblocks: number of synchronized sending blocks in one minute",
                "-- sendtps: number of synchronized sending TX in one second"
            ]
        },
        "example": [
            {
                "request": "metabasenet-cli querystat maker -b=09:11:00 -n=2",
                "response": "time      blocktps  tps  \\r\\n09:11:59  1       12     \\r\\n09:12:59  1       22     "
            },
            {
                "request": "curl -d '{\"id\":1,\"method\":\"querystat\",\"jsonrpc\":\"2.0\",\"params\":{\"type\":\"maker\",\"begin\":\"09:11:00\",\"count\":2}}' http://127.0.0.1:8812",
                "response": "{\"id\":0,\"jsonrpc\":\"2.0\",\"result\":\"time      blocktps  tps  \\r\\n09:11:59  1       12     \\r\\n09:12:59  1       22     \"}"
            }
        ],
        "error": [
            "{\"code\" : -6, \"message\" : \"Invalid type: is empty\"}",
            "{\"code\" : -6, \"message\" : \"Invalid type\"}",
            "{\"code\" : -6, \"message\" : \"Invalid fork\"}",
            "{\"code\" : -6, \"message\" : \"Invalid count\"}",
            "{\"code\" : -32603, \"message\" : \"query error\"}"
        ]
    },
    "reversehex": {
        "type": "command",
        "name": "ReverseHex",
        "desc": "Reverse a hex string by byte",
        "request": {
            "type": "object",
            "content": {
                "hex": {
                    "type": "string",
                    "desc": "hex string"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "hex",
            "desc": "reversed hex string"
        },
        "example": [
            {
                "request": "metabasenet-cli reversehex 0xe8e3770e774d5ad84a8ea65ed08cc7c5c30b42e045623604d5c5c6be95afb4f9",
                "response": "0xf9b4af95bec6c5d504366245e0420bc3c5c78cd05ea68e4ad85a4d770e77e3e8"
            },
            {
                "request": "curl -d '{\"id\":15,\"method\":\"reversehex\",\"jsonrpc\":\"2.0\",\"params\":{\"hex\":\"0xe8e3770e774d5ad84a8ea65ed08cc7c5c30b42e045623604d5c5c6be95afb4f9\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":15,\"jsonrpc\":\"2.0\",\"result\":\"0xf9b4af95bec6c5d504366245e0420bc3c5c78cd05ea68e4ad85a4d770e77e3e8\"}"
            }
        ],
        "error": [
            "{\"code\":-32602,\"message\":\"hex string size is not even\"}",
            "{\"code\":-32602,\"message\":\"invalid hex string: g\"}"
        ]
    },
    "callcontract": {
        "type": "command",
        "name": "CallContract",
        "desc": "Call contract api",
        "request": {
            "type": "object",
            "content": {
                "from": {
                    "type": "string",
                    "desc": "from address"
                },
                "to": {
                    "type": "string",
                    "desc": "to is contract address"
                },
                "amount": {
                    "type": "string",
                    "desc": "amount (big float)"
                },
                "gasprice": {
                    "type": "string",
                    "desc": "gas price (big float)",
                    "required": false,
                    "opt": "p"
                },
                "gas": {
                    "type": "uint",
                    "desc": "gas",
                    "required": false,
                    "opt": "g"
                },
                "contractparam": {
                    "type": "string",
                    "desc": "contract param",
                    "required": false,
                    "opt": "cp"
                },
                "fork": {
                    "type": "string",
                    "desc": "fork hash (default genesis fork)",
                    "required": false,
                    "opt": "f"
                }
            }
        },
        "response": {
            "type": "object",
            "name": "result",
            "content": {
                "status": {
                    "type": "int",
                    "desc": "call status, 0 is success, other is fail"
                },
                "result": {
                    "type": "string",
                    "desc": "result data"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli callcontract 0x5962974eeb0b17b43edabfc9b747839317aa852f 0x06963e6599ae8a485491a9008bf01c778bdf80c2 0 -cp=0x8d4b7932",
                "response": "{\"status\":0,\"result\":\"0x00000000000000000000000000000000000000000000000029a2241af62c0000\"}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"callcontract\",\"jsonrpc\":\"2.0\",\"params\":{\"from\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"to\":\"0x06963e6599ae8a485491a9008bf01c778bdf80c2\",\"amount\":\"0.0000000000\",\"contractparam\":\"0x8d4b7932\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"{\"status\":0,\"result\":\"0x00000000000000000000000000000000000000000000000029a2241af62c0000\"}\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}",
            "{\"code\":-6,\"message\":\"Invalid from address\"}",
            "{\"code\":-6,\"message\":\"Invalid to address\"}",
            "{\"code\":-6,\"message\":\"Invalid amount\"}",
            "{\"code\":-6,\"message\":\"Invalid gasprice\"}",
            "{\"code\":-32603,\"message\":\"Call fail\"}"
        ]
    },
    "gettransactionreceipt": {
        "type": "command",
        "name": "GetTransactionReceipt",
        "desc": "Get transaction receipt",
        "request": {
            "type": "object",
            "content": {
                "txid": {
                    "type": "string",
                    "desc": "transaction id"
                },
                "fork": {
                    "type": "string",
                    "desc": "fork hash or chainid (default local fork)",
                    "required": false,
                    "opt": "f"
                }
            }
        },
        "response": {
            "type": "object",
            "name": "result",
            "content": {
                "transactionHash": {
                    "type": "string",
                    "desc": "transaction hash",
                    "required": false
                },
                "transactionIndex": {
                    "type": "uint",
                    "desc": "transaction index",
                    "required": false
                },
                "blockHash": {
                    "type": "string",
                    "desc": "block hash",
                    "required": false
                },
                "blockNumber": {
                    "type": "uint",
                    "desc": "block number",
                    "required": false
                },
                "from": {
                    "type": "string",
                    "desc": "tx from",
                    "required": false
                },
                "to": {
                    "type": "string",
                    "desc": "tx to",
                    "required": false
                },
                "cumulativeGasUsed": {
                    "type": "uint",
                    "desc": "cumulative gas used",
                    "required": false
                },
                "effectiveGasPrice": {
                    "type": "string",
                    "desc": "effective gas price (big float)",
                    "required": false
                },
                "effectiveGasFee": {
                    "type": "string",
                    "desc": "effective gas fee (big float)",
                    "required": false
                },
                "gasUsed": {
                    "type": "uint",
                    "desc": "gas used",
                    "required": false
                },
                "gasTv": {
                    "type": "uint",
                    "desc": "time vault gas",
                    "required": false
                },
                "contractAddress": {
                    "type": "string",
                    "desc": "contract address",
                    "required": false
                },
                "root": {
                    "type": "string",
                    "desc": "root",
                    "required": false
                },
                "status": {
                    "type": "string",
                    "desc": "status, 0x1: ok, 0x0: fail",
                    "required": false
                },
                "logsBloom": {
                    "type": "string",
                    "desc": "logs bloom",
                    "required": false
                },
                "logs": {
                    "type": "array",
                    "name": "logs",
                    "required": false,
                    "content": {
                        "log": {
                            "type": "object",
                            "required": false,
                            "content": {
                                "removed": {
                                    "type": "bool",
                                    "desc": "removed",
                                    "required": false
                                },
                                "logIndex": {
                                    "type": "uint",
                                    "desc": "log index",
                                    "required": false
                                },
                                "transactionIndex": {
                                    "type": "uint",
                                    "desc": "transaction index",
                                    "required": false
                                },
                                "transactionHash": {
                                    "type": "string",
                                    "desc": "transaction hash",
                                    "required": false
                                },
                                "blockHash": {
                                    "type": "string",
                                    "desc": "block hash",
                                    "required": false
                                },
                                "blockNumber": {
                                    "type": "uint",
                                    "desc": "block number",
                                    "required": false
                                },
                                "address": {
                                    "type": "string",
                                    "desc": "address",
                                    "required": false
                                },
                                "data": {
                                    "type": "string",
                                    "desc": "data",
                                    "required": false
                                },
                                "topics": {
                                    "type": "array",
                                    "desc": "topic list",
                                    "required": false,
                                    "content": {
                                        "topic": {
                                            "type": "string",
                                            "desc": "topic"
                                        }
                                    }
                                },
                                "type": {
                                    "type": "string",
                                    "desc": "type",
                                    "required": false
                                },
                                "id": {
                                    "type": "string",
                                    "desc": "id",
                                    "required": false
                                }
                            }
                        }
                    }
                },
                "internaltx": {
                    "type": "array",
                    "desc": "internal transfer list",
                    "required": false,
                    "content": {
                        "itx": {
                            "type": "object",
                            "content": {
                                "type": {
                                    "type": "string",
                                    "desc": "transfer type",
                                    "required": false
                                },
                                "from": {
                                    "type": "string",
                                    "desc": "from address",
                                    "required": false
                                },
                                "to": {
                                    "type": "string",
                                    "desc": "to address",
                                    "required": false
                                },
                                "amount": {
                                    "type": "string",
                                    "desc": "transfer amount (big float)",
                                    "required": false
                                }
                            }
                        }
                    }
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli gettransactionreceipt 0x69350f7d89081c0ceb3ebb3f354840ab3f662a418140e386e7eb9e7b093987b4",
                "response": "{\"transactionHash\":\"0x69350f7d89081c0ceb3ebb3f354840ab3f662a418140e386e7eb9e7b093987b4\",\"transactionIndex\":11,\"blockHash\":\"0x000016c4eae1e0730e4a428aba13b90f9229f5d0c317f0dc44630ef7e465e781\",\"blockNumber\":5828,\"from\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"to\":\"0xb955034fcefb66112bab47483c8d243b86cb2c1d\",\"cumulativeGasUsed\":21000,\"effectiveGasPrice\":\"0.000001\",\"effectiveGasFee\":\"0.021\",\"gasUsed\":21000,\"gasTv\":0,\"status\":\"0x1\",\"logsBloom\":\"\",\"logs\":[{}],\"internaltx\":[{}]}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"gettransactionreceipt\",\"jsonrpc\":\"2.0\",\"params\":{\"txid\":\"0x69350f7d89081c0ceb3ebb3f354840ab3f662a418140e386e7eb9e7b093987b4\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"{\"transactionHash\":\"0x69350f7d89081c0ceb3ebb3f354840ab3f662a418140e386e7eb9e7b093987b4\",\"transactionIndex\":11,\"blockHash\":\"0x000016c4eae1e0730e4a428aba13b90f9229f5d0c317f0dc44630ef7e465e781\",\"blockNumber\":5828,\"from\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"to\":\"0xb955034fcefb66112bab47483c8d243b86cb2c1d\",\"cumulativeGasUsed\":21000,\"effectiveGasPrice\":\"0.000001\",\"effectiveGasFee\":\"0.021\",\"gasUsed\":21000,\"gasTv\":0,\"status\":\"0x1\",\"logsBloom\":\"\",\"logs\":[{}],\"internaltx\":[{}]}\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid txid\"}",
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}",
            "{\"code\":-7,\"message\":\"Get transaction receipt fail\"}"
        ]
    },
    "getcontractmuxcode": {
        "type": "command",
        "name": "GetContractMuxCode",
        "desc": "Get contract mux code, including source code, name and code",
        "request": {
            "type": "object",
            "content": {
                "muxtype": {
                    "type": "string",
                    "desc": "dux type: create, setup, upcode"
                },
                "name": {
                    "type": "string",
                    "desc": "contract name, non empty"
                },
                "owner": {
                    "type": "string",
                    "desc": "contract owner address, non empty"
                },
                "code": {
                    "type": "string",
                    "desc": "contract code, non empty"
                },
                "type": {
                    "type": "string",
                    "desc": "contract type, separated by '@' symbol, example: type1@type11@type111",
                    "required": false,
                    "opt": "t"
                },
                "describe": {
                    "type": "string",
                    "desc": "contract describe",
                    "required": false,
                    "opt": "d"
                },
                "source": {
                    "type": "string",
                    "desc": "contract source",
                    "required": false,
                    "opt": "s"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "contractmuxhex",
            "desc": "contract mux hex"
        },
        "example": [
            {
                "request": "metabasenet-cli getcontractmuxcode create myname1 0x5962974eeb0b17b43edabfc9b747839317aa852f 'code' -t=type1 -d=describe1 -s='source code'",
                "response": "0x579b261853b14cf9d026f1e0027852c52c4dd65845fbac13baff216ba2b04cf8......"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"getcontractmuxcode\",\"jsonrpc\":\"2.0\",\"params\":{\"muxtype\":\"create\",\"name\":\"myname1\",\"owner\":\"0x5962974eeb0b17b43edabfc9b747839317aa852f\",\"code\":\"code1\",\"type\":\"type1\",\"describe\":\"describe1\",\"source\":\"source1\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x579b261853b14cf9d026f1e0027852c52c4dd65845fbac13baff216ba2b04cf8......\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid muxtype\"}",
            "{\"code\":-6,\"message\":\"Invalid name\"}",
            "{\"code\":-6,\"message\":\"Invalid code\"}",
            "{\"code\":-8,\"message\":\"Packet fail\"}"
        ]
    },
    "gettemplatemuxcode": {
        "type": "command",
        "name": "GetTemplateMuxCode",
        "desc": "Get template mux code",
        "request": {
            "type": "object",
            "content": {
                "name": {
                    "type": "string",
                    "desc": "template name, non empty"
                },
                "code": {
                    "type": "string",
                    "desc": "template code, non empty"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "templatemuxhex",
            "desc": "template mux hex"
        },
        "example": [
            {
                "request": "metabasenet-cli gettemplatemuxcode pos-xx 'code'",
                "response": "0x579b261853b14cf9d026f1e0027852c52c4dd65845fbac13baff216ba2b04cf8......"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"gettemplatemuxcode\",\"jsonrpc\":\"2.0\",\"params\":{\"muxtype\":\"create\",\"name\":\"pos-xx\",\"code\":\"code1\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x579b261853b14cf9d026f1e0027852c52c4dd65845fbac13baff216ba2b04cf8......\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid muxtype\"}",
            "{\"code\":-6,\"message\":\"Invalid name\"}",
            "{\"code\":-6,\"message\":\"Invalid code\"}",
            "{\"code\":-8,\"message\":\"Packet fail\"}"
        ]
    },
    "listcontractcode": {
        "type": "command",
        "name": "ListContractCode",
        "desc": "List contract code",
        "request": {
            "type": "object",
            "content": {
                "codehash": {
                    "type": "string",
                    "desc": "code hash",
                    "required": false,
                    "opt": "c"
                },
                "txid": {
                    "type": "string",
                    "desc": "up txid",
                    "required": false,
                    "opt": "t"
                },
                "fork": {
                    "type": "string",
                    "desc": "fork",
                    "required": false,
                    "opt": "f"
                },
                "block": {
                    "type": "string",
                    "desc": "block hash or number or latest (default latest block)",
                    "required": false,
                    "opt": "b"
                }
            }
        },
        "response": {
            "type": "array",
            "name": "codedata",
            "content": {
                "codedata": {
                    "type": "object",
                    "desc": "code data",
                    "content": {
                        "codehash": {
                            "type": "string",
                            "desc": "contract code hash"
                        },
                        "sourcehash": {
                            "type": "string",
                            "desc": "contract source hash",
                            "required": false
                        },
                        "type": {
                            "type": "string",
                            "desc": "contract code type",
                            "required": false
                        },
                        "owner": {
                            "type": "string",
                            "desc": "contract code owner address"
                        },
                        "name": {
                            "type": "string",
                            "desc": "contract code name",
                            "required": false
                        },
                        "describe": {
                            "type": "string",
                            "desc": "contract code describe",
                            "required": false
                        },
                        "txid": {
                            "type": "string",
                            "desc": "txid of contract code created"
                        }
                    }
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli listcontractcode",
                "response": "[{\"codehash\":\"0xaa3fa7bbad961c25b1083ee0bb15c1d8f5cf41bfa0a6fc9be56eb19e2057a65b\",\"owner\":\"0xb955034fcefb66112bab47483c8d243b86cb2c1d\",\"txid\":\"0x9d50297ade3ef3dc138ac505f7eb3db8334ac5db9ca33fa218554097c26b0f27\"},{\"codehash\":\"0xb2aa186a283a1ad3b250649eb5568ce3a65ca04109c33f53081ff4caff4970c7\",\"owner\":\"0x00000000000000000000000000000000000000a1\",\"txid\":\"0x0000000000000000000000000000000000000000000000000000000000000000\"}]"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"listcontractcode\",\"jsonrpc\":\"2.0\",\"params\":{}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"[{\"codehash\":\"0xaa3fa7bbad961c25b1083ee0bb15c1d8f5cf41bfa0a6fc9be56eb19e2057a65b\",\"owner\":\"0xb955034fcefb66112bab47483c8d243b86cb2c1d\",\"txid\":\"0x9d50297ade3ef3dc138ac505f7eb3db8334ac5db9ca33fa218554097c26b0f27\"},{\"codehash\":\"0xb2aa186a283a1ad3b250649eb5568ce3a65ca04109c33f53081ff4caff4970c7\",\"owner\":\"0x00000000000000000000000000000000000000a1\",\"txid\":\"0x0000000000000000000000000000000000000000000000000000000000000000\"}]\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}"
        ]
    },
    "listcontractaddress": {
        "type": "command",
        "name": "ListContractAddress",
        "desc": "List contract address",
        "request": {
            "type": "object",
            "content": {
                "fork": {
                    "type": "string",
                    "desc": "fork",
                    "required": false,
                    "opt": "f"
                },
                "block": {
                    "type": "string",
                    "desc": "block hash or number or latest (default latest block)",
                    "required": false,
                    "opt": "b"
                }
            }
        },
        "response": {
            "type": "array",
            "name": "addressdata",
            "content": {
                "addressdata": {
                    "type": "object",
                    "desc": "address data",
                    "content": {
                        "address": {
                            "type": "string",
                            "desc": "contract address"
                        },
                        "type": {
                            "type": "string",
                            "desc": "contract type",
                            "required": false
                        },
                        "owner": {
                            "type": "string",
                            "desc": "contract owner address"
                        },
                        "name": {
                            "type": "string",
                            "desc": "contract name",
                            "required": false
                        },
                        "describe": {
                            "type": "string",
                            "desc": "contract describe",
                            "required": false
                        },
                        "txid": {
                            "type": "string",
                            "desc": "txid of contract created"
                        },
                        "sourcehash": {
                            "type": "string",
                            "desc": "contract source hash",
                            "required": false
                        },
                        "codehash": {
                            "type": "string",
                            "desc": "contract code hash"
                        }
                    }
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli listcontractaddress",
                "response": "[{\"address\":\"0x00000000000000000000000000000000000000a1\",\"owner\":\"0x00000000000000000000000000000000000000a1\",\"txid\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"codehash\":\"0xb2aa186a283a1ad3b250649eb5568ce3a65ca04109c33f53081ff4caff4970c7\"},{\"address\":\"0x06963e6599ae8a485491a9008bf01c778bdf80c2\",\"owner\":\"0xb955034fcefb66112bab47483c8d243b86cb2c1d\",\"txid\":\"0x9d50297ade3ef3dc138ac505f7eb3db8334ac5db9ca33fa218554097c26b0f27\",\"codehash\":\"0xaa3fa7bbad961c25b1083ee0bb15c1d8f5cf41bfa0a6fc9be56eb19e2057a65b\"}]"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"listcontractaddress\",\"jsonrpc\":\"2.0\",\"params\":{}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"[{\"address\":\"0x00000000000000000000000000000000000000a1\",\"owner\":\"0x00000000000000000000000000000000000000a1\",\"txid\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"codehash\":\"0xb2aa186a283a1ad3b250649eb5568ce3a65ca04109c33f53081ff4caff4970c7\"},{\"address\":\"0x06963e6599ae8a485491a9008bf01c778bdf80c2\",\"owner\":\"0xb955034fcefb66112bab47483c8d243b86cb2c1d\",\"txid\":\"0x9d50297ade3ef3dc138ac505f7eb3db8334ac5db9ca33fa218554097c26b0f27\",\"codehash\":\"0xaa3fa7bbad961c25b1083ee0bb15c1d8f5cf41bfa0a6fc9be56eb19e2057a65b\"}]\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}"
        ]
    },
    "getdestcontract": {
        "type": "command",
        "name": "GetDestContract",
        "desc": "Get address contract",
        "request": {
            "type": "object",
            "content": {
                "address": {
                    "type": "string",
                    "desc": "contract address"
                },
                "fork": {
                    "type": "string",
                    "desc": "fork",
                    "required": false,
                    "opt": "f"
                },
                "block": {
                    "type": "string",
                    "desc": "block hash or number or latest (default latest block)",
                    "required": false,
                    "opt": "b"
                }
            }
        },
        "response": {
            "type": "object",
            "name": "result",
            "content": {
                "type": {
                    "type": "string",
                    "desc": "contract type"
                },
                "name": {
                    "type": "string",
                    "desc": "contract name"
                },
                "describe": {
                    "type": "string",
                    "desc": "contract describe"
                },
                "txid": {
                    "type": "string",
                    "desc": "txid of contract created"
                },
                "sourcehash": {
                    "type": "string",
                    "desc": "contract source hash"
                },
                "codehash": {
                    "type": "string",
                    "desc": "contract code hash"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli getdestcontract 3zfm64bkxqsfn10vhqgghj6hwcqaqhqcsg03gyf9nwba2brrf1h81egmk",
                "response": "{\"type\":\"\",\"name\":\"\",\"describe\":\"\",\"txid\":\"0x9d50297ade3ef3dc138ac505f7eb3db8334ac5db9ca33fa218554097c26b0f27\",\"sourcehash\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"codehash\":\"0xaa3fa7bbad961c25b1083ee0bb15c1d8f5cf41bfa0a6fc9be56eb19e2057a65b\"}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"getdestcontract\",\"jsonrpc\":\"2.0\",\"params\":{\"address\":\"3zfm64bkxqsfn10vhqgghj6hwcqaqhqcsg03gyf9nwba2brrf1h81egmk\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"{\"type\":\"\",\"name\":\"\",\"describe\":\"\",\"txid\":\"0x9d50297ade3ef3dc138ac505f7eb3db8334ac5db9ca33fa218554097c26b0f27\",\"sourcehash\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"codehash\":\"0xaa3fa7bbad961c25b1083ee0bb15c1d8f5cf41bfa0a6fc9be56eb19e2057a65b\"}\"}"
            }
        ],
        "error": [
            "{\"code\":-4,\"message\":\"Address error\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}"
        ]
    },
    "getcontractsource": {
        "type": "command",
        "name": "GetContractSource",
        "desc": "Get contract source",
        "request": {
            "type": "object",
            "content": {
                "sourcehash": {
                    "type": "string",
                    "desc": "source hash"
                },
                "fork": {
                    "type": "string",
                    "desc": "fork",
                    "required": false,
                    "opt": "f"
                },
                "block": {
                    "type": "string",
                    "desc": "block hash or number or latest (default latest block)",
                    "required": false,
                    "opt": "b"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "contractsource",
            "desc": "contract source"
        },
        "example": [
            {
                "request": "metabasenet-cli getcontractsource 0x9358768717ec4837f96d73dbded55932b8865573bf88a6c5b2b5d8023d7fa2de",
                "response": "0x707261676d6120736f6c6964697479205e302e352e303b0a0a636f6e7472616374206572633230207b0a20202f2f205361......"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"getcontractsource\",\"jsonrpc\":\"2.0\",\"params\":{\"sourcehash\":\"0x9358768717ec4837f96d73dbded55932b8865573bf88a6c5b2b5d8023d7fa2de\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x707261676d6120736f6c6964697479205e302e352e303b0a0a636f6e7472616374206572633230207b0a20202f2f205361......\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid source\"}",
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}"
        ]
    },
    "getcontractcode": {
        "type": "command",
        "name": "GetContractCode",
        "desc": "Get contract code",
        "request": {
            "type": "object",
            "content": {
                "codehash": {
                    "type": "string",
                    "desc": "code hash"
                },
                "fork": {
                    "type": "string",
                    "desc": "fork",
                    "required": false,
                    "opt": "f"
                },
                "block": {
                    "type": "string",
                    "desc": "block hash or number or latest (default latest block)",
                    "required": false,
                    "opt": "b"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "contractcode",
            "desc": "contract code"
        },
        "example": [
            {
                "request": "metabasenet-cli getcontractcode 0x579b261853b14cf9d026f1e0027852c52c4dd65845fbac13baff216ba2b04cf8",
                "response": "0x0061736d01000000014e0b60027f7f0060017f0060037f7f7f006000017e60047e7f7f7f017f60057f7e7e7e7e0060067f7e7e7......"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"getcontractcode\",\"jsonrpc\":\"2.0\",\"params\":{\"codehash\":\"0x579b261853b14cf9d026f1e0027852c52c4dd65845fbac13baff216ba2b04cf8\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x0061736d01000000014e0b60027f7f0060017f0060037f7f7f006000017e60047e7f7f7f017f60057f7e7e7e7e0060067f7e7e7......\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid code\"}",
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}"
        ]
    },
    "funcsign": {
        "type": "command",
        "name": "FuncSign",
        "desc": "Function sign",
        "request": {
            "type": "object",
            "content": {
                "funcname": {
                    "type": "string",
                    "desc": "Function name"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "sign",
            "desc": "sing result"
        },
        "example": [
            {
                "request": "metabasenet-cli funcsign add",
                "response": "0x4f5a8bb8"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"funcsign\",\"jsonrpc\":\"2.0\",\"params\":{\"funcname\":\"add\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x4f5a8bb8\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid funcname\"}"
        ]
    },
    "makehash": {
        "type": "command",
        "name": "MakeHash",
        "desc": "Make hash",
        "request": {
            "type": "object",
            "content": {
                "data": {
                    "type": "string",
                    "desc": "data(hex)"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "hash",
            "desc": "hash"
        },
        "example": [
            {
                "request": "metabasenet-cli makehash 0x12345678",
                "response": "0x97e86e044a53385b642a902fd8ed05534d7590412a608f43dbb70e1f0e3664c7"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"makehash\",\"jsonrpc\":\"2.0\",\"params\":{\"data\":\"0x12345678\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x97e86e044a53385b642a902fd8ed05534d7590412a608f43dbb70e1f0e3664c7\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid data\"}"
        ]
    },
    "addblacklistaddress": {
        "type": "command",
        "name": "AddBlacklistAddress",
        "desc": "Add blacklist address",
        "request": {
            "type": "object",
            "content": {
                "address": {
                    "type": "string",
                    "desc": "blacklist address"
                }
            }
        },
        "response": {
            "type": "bool",
            "name": "result",
            "desc": "add result"
        },
        "example": [
            {
                "request": "metabasenet-cli addblacklistaddress 0xea811cbcfa6c892340261072d9ecdc7008d28a2e",
                "response": "true"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"addblacklistaddress\",\"jsonrpc\":\"2.0\",\"params\":{\"address\":\"0xea811cbcfa6c892340261072d9ecdc7008d28a2e\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":true}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid address\"}"
        ]
    },
    "removeblacklistaddress": {
        "type": "command",
        "name": "RemoveBlacklistAddress",
        "desc": "Remove blacklist address",
        "request": {
            "type": "object",
            "content": {
                "address": {
                    "type": "string",
                    "desc": "blacklist address"
                }
            }
        },
        "response": {
            "type": "bool",
            "name": "result",
            "desc": "remove result"
        },
        "example": [
            {
                "request": "metabasenet-cli removeblacklistaddress 0xea811cbcfa6c892340261072d9ecdc7008d28a2e",
                "response": "true"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"removeblacklistaddress\",\"jsonrpc\":\"2.0\",\"params\":{\"address\":\"0xea811cbcfa6c892340261072d9ecdc7008d28a2e\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":true}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid address\"}"
        ]
    },
    "listblacklistaddress": {
        "type": "command",
        "name": "ListBlacklistAddress",
        "desc": "List blacklist address",
        "request": {
            "type": "object",
            "content": {}
        },
        "response": {
            "type": "array",
            "name": "address",
            "content": {
                "address": {
                    "type": "string",
                    "desc": "blacklist address"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli listblacklistaddress",
                "response": "[\"0xea811cbcfa6c892340261072d9ecdc7008d28a2e\"]"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"listblacklistaddress\",\"jsonrpc\":\"2.0\",\"params\":{}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":[\"0xea811cbcfa6c892340261072d9ecdc7008d28a2e\"]}"
            }
        ]
    },
    "setfunctionaddress": {
        "type": "command",
        "name": "SetFunctionAddress",
        "desc": "Set function address",
        "request": {
            "type": "object",
            "content": {
                "funcid": {
                    "type": "uint",
                    "desc": "function id"
                },
                "newaddress": {
                    "type": "string",
                    "desc": "new address"
                },
                "disablemodify": {
                    "type": "bool",
                    "desc": "if disable modify",
                    "opt": "d",
                    "default": false,
                    "required": false
                }
            }
        },
        "response": {
            "type": "string",
            "name": "txid",
            "desc": "transaction id"
        },
        "example": [
            {
                "request": "metabasenet-cli setfunctionaddress 1 0xf7d47e4e74084441d5bf3b6d8a9dd6e59d151115",
                "response": "0xc175947a6265c969165efa03170b35a1fca3d4c9d424c012648bf9250b4ce5ed"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"setfunctionaddress\",\"jsonrpc\":\"2.0\",\"params\":{\"funcid\":1,\"newaddress\":\"0xf7d47e4e74084441d5bf3b6d8a9dd6e59d151115\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0xc175947a6265c969165efa03170b35a1fca3d4c9d424c012648bf9250b4ce5ed\"}"
            }
        ],
        "error": [
            "{\"code\":-32600,\"message\":\"Only suitable for the main chain\"}",
            "{\"code\":-6,\"message\":\"Invalid from\"}",
            "{\"code\":-6,\"message\":\"Invalid funcid\"}",
            "{\"code\":-6,\"message\":\"Invalid newaddress\"}",
            "{\"code\":-4,\"message\":\"Default address not import\"}",
            "{\"code\":-401,\"message\":\"Default address is locked\"}",
            "{\"code\":-9\"message\":\"Verify tx fail\"}",
            "{\"code\":-10\"message\":\"Rejected modify\"}"
        ]
    },
    "listfunctionaddress": {
        "type": "command",
        "name": "ListFunctionAddress",
        "desc": "List function address",
        "request": {
            "type": "object",
            "content": {
                "block": {
                    "type": "string",
                    "desc": "block hash or number or latest (default latest block)",
                    "required": false,
                    "opt": "b"
                }
            }
        },
        "response": {
            "type": "array",
            "name": "functionaddresslist",
            "content": {
                "functionaddress": {
                    "type": "object",
                    "desc": "function address data",
                    "content": {
                        "funcid": {
                            "type": "uint",
                            "desc": "function id"
                        },
                        "funcname": {
                            "type": "string",
                            "desc": "function name"
                        },
                        "defaultaddress": {
                            "type": "string",
                            "desc": "default function address"
                        },
                        "funcaddress": {
                            "type": "string",
                            "desc": "function address"
                        },
                        "disablemodify": {
                            "type": "bool",
                            "desc": "if disable modify"
                        }
                    }
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli listfunctionaddress",
                "response": "[{\"funcid\":1,\"funcname\":\"Pledge surplus reward address\",\"defaultaddress\":\"0x420757b308d1273215ddd5e8dfea1802e2983245\",\"funcaddress\":\"0xf7d47e4e74084441d5bf3b6d8a9dd6e59d151115\",\"disablemodify\":false}]"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"listfunctionaddress\",\"jsonrpc\":\"2.0\",\"params\":{}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":[{\"funcid\":1,\"funcname\":\"Pledge surplus reward address\",\"defaultaddress\":\"0x420757b308d1273215ddd5e8dfea1802e2983245\",\"funcaddress\":\"0xf7d47e4e74084441d5bf3b6d8a9dd6e59d151115\",\"disablemodify\":false}]}"
            }
        ],
        "error": [
            "{\"code\":-32600,\"message\":\"Only suitable for the main chain\"}"
        ]
    },
    "setmintmingasprice": {
        "type": "command",
        "name": "SetMintMinGasPrice",
        "desc": "Set mint min gas price",
        "request": {
            "type": "object",
            "content": {
                "fork": {
                    "type": "string",
                    "desc": "fork id"
                },
                "mingasprice": {
                    "type": "string",
                    "desc": "min gas price"
                }
            }
        },
        "response": {
            "type": "bool",
            "name": "result",
            "desc": "set result"
        },
        "example": [
            {
                "request": "metabasenet-cli setmintmingasprice 0x000000152e03037902d6bdc1d10b29b4a940a2972dfe06976ebcc8c4353cc7d0 0.0000001",
                "response": "true"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"setmintmingasprice\",\"jsonrpc\":\"2.0\",\"params\":{\"fork\":\"0x000000152e03037902d6bdc1d10b29b4a940a2972dfe06976ebcc8c4353cc7d0\",\"mingasprice\":\"0.0000001\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":true}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}",
            "{\"code\":-6,\"message\":\"Invalid mingasprice\"}"
        ]
    },
    "getmintmingasprice": {
        "type": "command",
        "name": "GetMintMinGasPrice",
        "desc": "Get mint min gas price",
        "request": {
            "type": "object",
            "content": {
                "fork": {
                    "type": "string",
                    "desc": "fork id"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "MinGasPrice",
            "desc": "mint min gas price"
        },
        "example": [
            {
                "request": "metabasenet-cli getmintmingasprice 0xc9f7f70be6841102645505f96cdc28f00570d22c64d50dbfa3e44632e6ae3d5d",
                "response": "0.00001"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"getmintmingasprice\",\"jsonrpc\":\"2.0\",\"params\":{\"fork\":\"0xc9f7f70be6841102645505f96cdc28f00570d22c64d50dbfa3e44632e6ae3d5d\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0.00001\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid fork\"}",
            "{\"code\":-6,\"message\":\"Unknown fork\"}"
        ]
    },
    "listmintmingasprice": {
        "type": "command",
        "name": "ListMintMinGasPrice",
        "desc": "List mint min gas price",
        "request": {
            "type": "object",
            "content": {}
        },
        "response": {
            "type": "array",
            "name": "forkprice",
            "content": {
                "forkpricedata": {
                    "type": "object",
                    "desc": "fork price data",
                    "content": {
                        "fork": {
                            "type": "string",
                            "desc": "fork id"
                        },
                        "mingasprice": {
                            "type": "string",
                            "desc": "min gas price"
                        }
                    }
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli listmintmingasprice",
                "response": "[{\"fork\":\"0xc9f7f70be6841102645505f96cdc28f00570d22c64d50dbfa3e44632e6ae3d5d\",\"mingasprice\":\"0.0000001\"}]"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"listmintmingasprice\",\"jsonrpc\":\"2.0\",\"params\":{}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":[{\"fork\":\"0xc9f7f70be6841102645505f96cdc28f00570d22c64d50dbfa3e44632e6ae3d5d\",\"mingasprice\":\"0.0000001\"}]}"
            }
        ]
    },
    "checkatbloomfilter": {
        "type": "command",
        "name": "CheckAtBloomFilter",
        "desc": "Check if the data is in bloomfilter",
        "request": {
            "type": "object",
            "content": {
                "bloomfilter": {
                    "type": "string",
                    "desc": "bloomfilter data (HEX)"
                },
                "checkdata": {
                    "type": "string",
                    "desc": "check data (HEX)"
                }
            }
        },
        "response": {
            "type": "bool",
            "name": "result",
            "desc": "check result"
        },
        "example": [
            {
                "request": "metabasenet-cli checkatbloomfilter 0x7959ff45dffab7bdfbebfb8f9573a1f2dd7fbec3ff57 0x633d2efebbef31e5853b7121bc3698f1239e931e9cd64e9cd37cdf5bd2048474",
                "response": "true"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"checkatbloomfilter\",\"jsonrpc\":\"2.0\",\"params\":{\"bloomfilter\":\"0x7959ff45dffab7bdfbebfb8f9573a1f2dd7fbec3ff57\",\"checkdata\":\"0x633d2efebbef31e5853b7121bc3698f1239e931e9cd64e9cd37cdf5bd2048474\"}}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":true}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid bloomfilter\"}",
            "{\"code\":-6,\"message\":\"Invalid checkdata\"}"
        ]
    },
    "web3_clientVersion": {
        "type": "command",
        "name": "web3_clientVersion",
        "desc": "[ETH] Get web3 client version",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "sha3 result"
        },
        "example": [
            {
                "request": "metabasenet-cli web3_clientVersion []",
                "response": "[\"v0.2.1\"]"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"web3_clientVersion\",\"jsonrpc\":\"2.0\",\"params\":[]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":[\"v0.2.1\"]}"
            }
        ]
    },
    "web3_sha3": {
        "type": "command",
        "name": "web3_sha3",
        "desc": "[ETH] Keccak-256",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "sha3 result"
        },
        "example": [
            {
                "request": "metabasenet-cli web3_sha3 [\"0x68656c6c6f20776f726c64\"]",
                "response": "[\"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\"]"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"web3_sha3\",\"jsonrpc\":\"2.0\",\"params\":[\"0x68656c6c6f20776f726c64\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":[\"0x47173285a8d7341e5e972fc677286384f802f8ef42a5ec5f03bbfa254cb01fad\"]}"
            }
        ]
    },
    "net_version": {
        "type": "command",
        "name": "net_version",
        "desc": "[ETH] Get net version",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "net version"
        },
        "example": [
            {
                "request": "metabasenet-cli net_version []",
                "response": "[\"10\"]"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"net_version\",\"jsonrpc\":\"2.0\",\"params\":[]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":[\"10\"]}"
            }
        ]
    },
    "net_listening": {
        "type": "command",
        "name": "net_listening",
        "desc": "[ETH] Get net listen status",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "bool",
            "name": "result",
            "desc": "net listen status"
        },
        "example": [
            {
                "request": "metabasenet-cli net_listening []",
                "response": "[true]"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"net_listening\",\"jsonrpc\":\"2.0\",\"params\":[]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":[true]}"
            }
        ]
    },
    "net_peerCount": {
        "type": "command",
        "name": "net_peerCount",
        "desc": "[ETH] Get connect peer node count",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "peer node count"
        },
        "example": [
            {
                "request": "metabasenet-cli net_peerCount []",
                "response": "[\"2\"]"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"net_peerCount\",\"jsonrpc\":\"2.0\",\"params\":[]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":[\"2\"]}"
            }
        ]
    },
    "eth_chainId": {
        "type": "command",
        "name": "eth_chainId",
        "desc": "[ETH] Get chain id",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "chain id"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_chainId []",
                "response": "[\"0x1\"]"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_chainId\",\"jsonrpc\":\"2.0\",\"params\":[]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":[\"0x1\"]}"
            }
        ]
    },
    "eth_protocolVersion": {
        "type": "command",
        "name": "eth_protocolVersion",
        "desc": "[ETH] Get protocol version",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "protocol version"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_protocolVersion []",
                "response": "[\"10\"]"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_protocolVersion\",\"jsonrpc\":\"2.0\",\"params\":[]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":[\"10\"]}"
            }
        ]
    },
    "eth_syncing": {
        "type": "command",
        "name": "eth_syncing",
        "desc": "[ETH] If syncing",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "object",
            "name": "result",
            "content": {
                "startingBlock": {
                    "type": "string",
                    "desc": "Start block number"
                },
                "currentBlock": {
                    "type": "string",
                    "desc": "Current block number"
                },
                "highestBlock": {
                    "type": "string",
                    "desc": "Highest block number"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli eth_syncing []",
                "response": "[\"10\"]"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_syncing\",\"jsonrpc\":\"2.0\",\"params\":[]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":[\"10\"]}"
            }
        ]
    },
    "eth_coinbase": {
        "type": "command",
        "name": "eth_coinbase",
        "desc": "[ETH] Get coinbase",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "coinbase address"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_coinbase []",
                "response": "[\"10\"]"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_coinbase\",\"jsonrpc\":\"2.0\",\"params\":[]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":[\"10\"]}"
            }
        ]
    },
    "eth_mining": {
        "type": "command",
        "name": "eth_mining",
        "desc": "[ETH] If mining",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "bool",
            "name": "result",
            "desc": "if mining"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_mining []",
                "response": "true"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_mining\",\"jsonrpc\":\"2.0\",\"params\":[]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":true}"
            }
        ]
    },
    "eth_hashrate": {
        "type": "command",
        "name": "eth_hashrate",
        "desc": "[ETH] Get hash rate",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "hash rate"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_hashrate []",
                "response": "0x0"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_hashrate\",\"jsonrpc\":\"2.0\",\"params\":[]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x0\"}"
            }
        ]
    },
    "eth_gasPrice": {
        "type": "command",
        "name": "eth_gasPrice",
        "desc": "[ETH] Get gas price",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "gas price"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_gasPrice []",
                "response": "0x09184e72a000"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_gasPrice\",\"jsonrpc\":\"2.0\",\"params\":[]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x09184e72a000\"}"
            }
        ]
    },
    "eth_accounts": {
        "type": "command",
        "name": "eth_accounts",
        "desc": "[ETH] Get wallet accounts",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "array",
            "name": "result",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "account address"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli eth_accounts []",
                "response": "[\"0x108429003ce0116c737e4f83267faacffcf8048d\"]"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_accounts\",\"jsonrpc\":\"2.0\",\"params\":[]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":[\"0x108429003ce0116c737e4f83267faacffcf8048d\"]}"
            }
        ],
        "error": [
            "{\"code\":-32603,\"message\":\"Get wallet accounts fail\"}"
        ]
    },
    "eth_getBalance": {
        "type": "command",
        "name": "eth_getBalance",
        "desc": "[ETH] Get balance",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <address>,(block hash or number,default:latest)"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "address balance(hex)"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getBalance [\"0x108429003ce0116c737e4f83267faacffcf8048d\",\"latest\"]",
                "response": "0xa3889a79420a8b8b1d8000"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getBalance\",\"jsonrpc\":\"2.0\",\"params\":[\"0x108429003ce0116c737e4f83267faacffcf8048d\",\"latest\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0xa3889a79420a8b8b1d8000\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-4,\"message\":\"Unknown address\"}",
            "{\"code\":-32603,\"message\":\"Get last block error\"}"
        ]
    },
    "eth_blockNumber": {
        "type": "command",
        "name": "eth_blockNumber",
        "desc": "[ETH] Get latest block numer",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "block number"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_blockNumber []",
                "response": "0xe2"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_blockNumber\",\"jsonrpc\":\"2.0\",\"params\":[]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0xe2\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-4,\"message\":\"Unknown address\"}",
            "{\"code\":-32603,\"message\":\"Get last block error\"}"
        ]
    },
    "eth_getStorageAt": {
        "type": "command",
        "name": "eth_getStorageAt",
        "desc": "[ETH] Get storage value",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <address>,<position>,<blocknumber>"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "storage value(hex)"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getStorageAt [\"0x108429003ce0116c737e4f83267faacffcf8048d\",\"0x0\",\"latest\"]",
                "response": "0xa3889a79420a8b8b1d8000"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getStorageAt\",\"jsonrpc\":\"2.0\",\"params\":[\"0x108429003ce0116c737e4f83267faacffcf8048d\",\"0x0\",\"latest\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0xa3889a79420a8b8b1d8000\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-4,\"message\":\"Unknown address\"}",
            "{\"code\":-32603,\"message\":\"Get last block error\"}"
        ]
    },
    "eth_getStorageRoot": {
        "type": "command",
        "name": "eth_getStorageRoot",
        "desc": "[ETH] Get state root",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <address>,<blocknumber>"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "state root value(hex)"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getStorageRoot [\"0x108429003ce0116c737e4f83267faacffcf8048d\",\"latest\"]",
                "response": "0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getStorageRoot\",\"jsonrpc\":\"2.0\",\"params\":[\"0x108429003ce0116c737e4f83267faacffcf8048d\",\"latest\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-4,\"message\":\"Unknown address\"}",
            "{\"code\":-32603,\"message\":\"Get last block error\"}"
        ]
    },
    "eth_getTransactionCount": {
        "type": "command",
        "name": "eth_getTransactionCount",
        "desc": "[ETH] Get transaction count of address",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <address>,<blocknumber>"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "transaction count(hex)"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getTransactionCount [\"0x108429003ce0116c737e4f83267faacffcf8048d\",\"latest\"]",
                "response": "0x2c98"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getTransactionCount\",\"jsonrpc\":\"2.0\",\"params\":[\"0x108429003ce0116c737e4f83267faacffcf8048d\",\"latest\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x2c98\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-4,\"message\":\"Unknown address\"}",
            "{\"code\":-32603,\"message\":\"Get last block error\"}"
        ]
    },
    "eth_pendingTransactions": {
        "type": "command",
        "name": "eth_pendingTransactions",
        "desc": "[ETH] Get list of transaction that being sent by local accounts",
        "request": {
            "type": "array",
            "name": "result",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "array",
            "name": "transaction",
            "content": {
                "transaction": {
                    "type": "ethtxdata",
                    "desc": "pending transaction data"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli eth_pendingTransactions []",
                "response": "wait perfect"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_pendingTransactions\",\"jsonrpc\":\"2.0\",\"params\":[]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"wait perfect\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-4,\"message\":\"Unknown address\"}",
            "{\"code\":-32603,\"message\":\"Get last block error\"}"
        ]
    },
    "eth_getBlockTransactionCountByHash": {
        "type": "command",
        "name": "eth_getBlockTransactionCountByHash",
        "desc": "[ETH] Get transaction quantity in the specified block by block hash",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <block hash>"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "transaction count(hex)"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getBlockTransactionCountByHash [\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"]",
                "response": "0x02"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getBlockTransactionCountByHash\",\"jsonrpc\":\"2.0\",\"params\":[\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x02\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-4,\"message\":\"Unknown address\"}",
            "{\"code\":-32603,\"message\":\"Get last block error\"}"
        ]
    },
    "eth_getBlockTransactionCountByNumber": {
        "type": "command",
        "name": "eth_getBlockTransactionCountByNumber",
        "desc": "[ETH] Get transaction quantity in the specified block by block number",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <block number>"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "transaction count(hex)"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getBlockTransactionCountByNumber [\"0xe203\"]",
                "response": "0x02"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getBlockTransactionCountByNumber\",\"jsonrpc\":\"2.0\",\"params\":[\"0xe203\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x02\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-4,\"message\":\"Unknown address\"}",
            "{\"code\":-32603,\"message\":\"Get last block error\"}"
        ]
    },
    "eth_getUncleCountByBlockHash": {
        "type": "command",
        "name": "eth_getUncleCountByBlockHash",
        "desc": "[ETH] Get number of uncles in the specified blockby block hash",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <block hash>"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "transaction count(hex)"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getUncleCountByBlockHash [\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"]",
                "response": "0x02"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getUncleCountByBlockHash\",\"jsonrpc\":\"2.0\",\"params\":[\"0xb903239f8543d04b5dc1ba6579132b143087c68db1b2168786408fcbce568238\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x02\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-4,\"message\":\"Unknown address\"}",
            "{\"code\":-32603,\"message\":\"Get last block error\"}"
        ]
    },
    "eth_getUncleCountByBlockNumber": {
        "type": "command",
        "name": "eth_getUncleCountByBlockNumber",
        "desc": "[ETH] Get number of uncles in the specified blockby block number",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <block number>"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "transaction count(hex)"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getUncleCountByBlockNumber [\"0x8543\"]",
                "response": "0x02"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getUncleCountByBlockNumber\",\"jsonrpc\":\"2.0\",\"params\":[\"0x8543\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x02\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-4,\"message\":\"Unknown address\"}",
            "{\"code\":-32603,\"message\":\"Get last block error\"}"
        ]
    },
    "eth_getCode": {
        "type": "command",
        "name": "eth_getCode",
        "desc": "[ETH] Get code",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <address>,(block number)"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "code data(hex)"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getCode [\"0x108429003ce0116c737e4f83267faacffcf8048d\",\"latest\"]",
                "response": "0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getCode\",\"jsonrpc\":\"2.0\",\"params\":[\"0x108429003ce0116c737e4f83267faacffcf8048d\",\"latest\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-4,\"message\":\"Unknown address\"}",
            "{\"code\":-32603,\"message\":\"Get last block error\"}"
        ]
    },
    "eth_sign": {
        "type": "command",
        "name": "eth_sign",
        "desc": "[ETH] Sign message",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <address>,<message>"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "sign data(hex)"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_sign [\"0x108429003ce0116c737e4f83267faacffcf8048d\",\"latest\"]",
                "response": "0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_sign\",\"jsonrpc\":\"2.0\",\"params\":[\"0x108429003ce0116c737e4f83267faacffcf8048d\",\"latest\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-4,\"message\":\"Unknown address\"}",
            "{\"code\":-32603,\"message\":\"Get last block error\"}"
        ]
    },
    "eth_signTransaction": {
        "type": "command",
        "name": "eth_signTransaction",
        "desc": "[ETH] Sign transaction",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "sendtxparam": {
                    "type": "ethsendtxparam",
                    "desc": "send tx param"
                }
            }
        },
        "response": {
            "type": "object",
            "name": "result",
            "content": {
                "tx": {
                    "type": "string",
                    "desc": "transaction hash"
                },
                "raw": {
                    "type": "string",
                    "desc": "transaction raw data"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli eth_signTransaction [\"0x108429003ce0116c737e4f83267faacffcf8048d\",\"latest\"]",
                "response": "0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_signTransaction\",\"jsonrpc\":\"2.0\",\"params\":[\"0x108429003ce0116c737e4f83267faacffcf8048d\",\"latest\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-4,\"message\":\"Unknown address\"}",
            "{\"code\":-32603,\"message\":\"Get last block error\"}"
        ]
    },
    "eth_sendTransaction": {
        "type": "command",
        "name": "eth_sendTransaction",
        "desc": "[ETH] Send transaction",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "sendtxparam": {
                    "type": "ethsendtxparam",
                    "desc": "send tx param"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "transaction hash(hex)"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_sendTransaction [\"0x108429003ce0116c737e4f83267faacffcf8048d\",\"0x108429003ce0116c737e4f83267faacffcf8048d\"]",
                "response": "0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_sendTransaction\",\"jsonrpc\":\"2.0\",\"params\":[\"0x108429003ce0116c737e4f83267faacffcf8048d\",\"latest\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-4,\"message\":\"Unknown address\"}",
            "{\"code\":-32603,\"message\":\"Get last block error\"}"
        ]
    },
    "eth_sendRawTransaction": {
        "type": "command",
        "name": "eth_sendRawTransaction",
        "desc": "[ETH] Send raw transaction",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "rawtx": {
                    "type": "string",
                    "desc": "send raw tx data"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "transaction hash(hex)"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_sendRawTransaction [\"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"]",
                "response": "0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_sendRawTransaction\",\"jsonrpc\":\"2.0\",\"params\":[\"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-4,\"message\":\"Unknown address\"}",
            "{\"code\":-32603,\"message\":\"Get last block error\"}"
        ]
    },
    "eth_call": {
        "type": "command",
        "name": "eth_call",
        "desc": "[ETH] Call contract",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "calltx": {
                    "type": "ethcalltxparam",
                    "desc": "call tx data"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "call result"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_call [\"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"]",
                "response": "0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_call\",\"jsonrpc\":\"2.0\",\"params\":[\"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-4,\"message\":\"Unknown address\"}",
            "{\"code\":-32603,\"message\":\"Get last block error\"}"
        ]
    },
    "eth_estimateGas": {
        "type": "command",
        "name": "eth_estimateGas",
        "desc": "[ETH] Estimate gas",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "calltx": {
                    "type": "ethcalltxparam",
                    "desc": "call tx data"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "result",
            "desc": "gas estimate"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_estimateGas [\"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"]",
                "response": "0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_estimateGas\",\"jsonrpc\":\"2.0\",\"params\":[\"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid address\"}",
            "{\"code\":-4,\"message\":\"Unknown address\"}",
            "{\"code\":-32603,\"message\":\"Get last block error\"}"
        ]
    },
    "eth_getBlockByHash": {
        "type": "command",
        "name": "eth_getBlockByHash",
        "desc": "[ETH] Get block by hash",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <block hash>,<if full tx>"
                }
            }
        },
        "response": {
            "type": "ethblock",
            "name": "block",
            "desc": "block data"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getBlockByHash [\"0x00000a9021b0790da106a1de3c397d50ac3d8fd049b9f09df3f2cbf2df93414d\", \"false\"]",
                "response": "{\"number\":\"0xa90\",\"hash\":\"0x00000a9021b0790da106a1de3c397d50ac3d8fd049b9f09df3f2cbf2df93414d\",\"parentHash\":\"0x00000a8f817569c88f1530ee111e2ffed0d57cbcab7718b7aef4afff09277581\",\"logsBloom\":\"0xtransactionsRoot\":\"0xf76661bda9c40b072b2c1ee9d613e462eca26bd1a85b705853ce9e4efc1a2fa2\",\"stateRoot\":\"0x10cdb06582f3c0804527d6f083eab88f555d2b573ef4488c0a6a99158b0c78ad\",\"receiptsRoot\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"miner\":\"0x2338e108bcb4bd56ed1b4584848a1ef2fcf2fa75\",\"size\":\"0x938\",\"gasLimit\":\"0x000000000000000000000000000000000000000000000000000000003b9aca00\",\"gasUsed\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"timestamp\":\"0x63899e68\",\"transactions\":[\"0xfa8863899e6837958b02a10aa6c7adddafed038489d6ea092ce3ee12c1de42c5\",\"0xfa8863899e5e8f2d2d729d9694d7f39a0688a1c7e1059287219edfd6b67e80f4\",\"0xfa8863899e18830d93de2a476db4c078d8ba284af3cf4c69ae6d2f66a2bc7cfe\"]}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getBlockByHash\",\"jsonrpc\":\"2.0\",\"params\":[\"0x00000a9021b0790da106a1de3c397d50ac3d8fd049b9f09df3f2cbf2df93414d\", \"false\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":1,\"jsonrpc\":\"2.0\",\"result\":{\"number\":\"0xa90\",\"hash\":\"0x00000a9021b0790da106a1de3c397d50ac3d8fd049b9f09df3f2cbf2df93414d\",\"parentHash\":\"0x00000a8f817569c88f1530ee111e2ffed0d57cbcab7718b7aef4afff09277581\",\"logsBloom\":\"0xtransactionsRoot\":\"0xf76661bda9c40b072b2c1ee9d613e462eca26bd1a85b705853ce9e4efc1a2fa2\",\"stateRoot\":\"0x10cdb06582f3c0804527d6f083eab88f555d2b573ef4488c0a6a99158b0c78ad\",\"receiptsRoot\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"miner\":\"0x2338e108bcb4bd56ed1b4584848a1ef2fcf2fa75\",\"size\":\"0x938\",\"gasLimit\":\"0x000000000000000000000000000000000000000000000000000000003b9aca00\",\"gasUsed\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"timestamp\":\"0x63899e68\",\"transactions\":[\"0xfa8863899e6837958b02a10aa6c7adddafed038489d6ea092ce3ee12c1de42c5\",\"0xfa8863899e5e8f2d2d729d9694d7f39a0688a1c7e1059287219edfd6b67e80f4\",\"0xfa8863899e18830d93de2a476db4c078d8ba284af3cf4c69ae6d2f66a2bc7cfe\"]}}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-4,\"message\":\"Unknown block\"}"
        ]
    },
    "eth_getBlockByNumber": {
        "type": "command",
        "name": "eth_getBlockByNumber",
        "desc": "[ETH] Get block by number",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <block number>,<if full tx>"
                }
            }
        },
        "response": {
            "type": "ethblock",
            "name": "block",
            "desc": "block data"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getBlockByNumber [\"0xa90\", \"false\"]",
                "response": "{\"number\":\"0xa90\",\"hash\":\"0x00000a9021b0790da106a1de3c397d50ac3d8fd049b9f09df3f2cbf2df93414d\",\"parentHash\":\"0x00000a8f817569c88f1530ee111e2ffed0d57cbcab7718b7aef4afff09277581\",\"logsBloom\":\"0xtransactionsRoot\":\"0xf76661bda9c40b072b2c1ee9d613e462eca26bd1a85b705853ce9e4efc1a2fa2\",\"stateRoot\":\"0x10cdb06582f3c0804527d6f083eab88f555d2b573ef4488c0a6a99158b0c78ad\",\"receiptsRoot\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"miner\":\"0x2338e108bcb4bd56ed1b4584848a1ef2fcf2fa75\",\"size\":\"0x938\",\"gasLimit\":\"0x000000000000000000000000000000000000000000000000000000003b9aca00\",\"gasUsed\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"timestamp\":\"0x63899e68\",\"transactions\":[\"0xfa8863899e6837958b02a10aa6c7adddafed038489d6ea092ce3ee12c1de42c5\",\"0xfa8863899e5e8f2d2d729d9694d7f39a0688a1c7e1059287219edfd6b67e80f4\",\"0xfa8863899e18830d93de2a476db4c078d8ba284af3cf4c69ae6d2f66a2bc7cfe\"]}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getBlockByNumber\",\"jsonrpc\":\"2.0\",\"params\":[\"0xa90\", \"false\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":1,\"jsonrpc\":\"2.0\",\"result\":{\"number\":\"0xa90\",\"hash\":\"0x00000a9021b0790da106a1de3c397d50ac3d8fd049b9f09df3f2cbf2df93414d\",\"parentHash\":\"0x00000a8f817569c88f1530ee111e2ffed0d57cbcab7718b7aef4afff09277581\",\"logsBloom\":\"0xtransactionsRoot\":\"0xf76661bda9c40b072b2c1ee9d613e462eca26bd1a85b705853ce9e4efc1a2fa2\",\"stateRoot\":\"0x10cdb06582f3c0804527d6f083eab88f555d2b573ef4488c0a6a99158b0c78ad\",\"receiptsRoot\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"miner\":\"0x2338e108bcb4bd56ed1b4584848a1ef2fcf2fa75\",\"size\":\"0x938\",\"gasLimit\":\"0x000000000000000000000000000000000000000000000000000000003b9aca00\",\"gasUsed\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"timestamp\":\"0x63899e68\",\"transactions\":[\"0xfa8863899e6837958b02a10aa6c7adddafed038489d6ea092ce3ee12c1de42c5\",\"0xfa8863899e5e8f2d2d729d9694d7f39a0688a1c7e1059287219edfd6b67e80f4\",\"0xfa8863899e18830d93de2a476db4c078d8ba284af3cf4c69ae6d2f66a2bc7cfe\"]}}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid block number\"}",
            "{\"code\":-4,\"message\":\"Unknown block\"}"
        ]
    },
    "eth_getTransactionByHash": {
        "type": "command",
        "name": "eth_getTransactionByHash",
        "desc": "[ETH] Get transaction by hash",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <tx hash>"
                }
            }
        },
        "response": {
            "type": "ethtransaction",
            "name": "tx",
            "desc": "tx data"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getTransactionByHash [\"0xfa8863899e18830d93de2a476db4c078d8ba284af3cf4c69ae6d2f66a2bc7cfe\"]",
                "response": "{\"hash\":\"0xfa8863899e5e8f2d2d729d9694d7f39a0688a1c7e1059287219edfd6b67e80f4\",\"nonce\":\"0xa77\",\"blockHash\":\"0x00000a9021b0790da106a1de3c397d50ac3d8fd049b9f09df3f2cbf2df93414d\",\"blockNumber\":\"0xa90\",\"transactionIndex\":\"0x1\",\"from\":\"0x2338e108bcb4bd56ed1b4584848a1ef2fcf2fa75\",\"to\":\"0x2338e108bcb4bd56ed1b4584848a1ef2fcf2fa75\",\"value\":\"0x01\",\"gasPrice\":\"0x0\",\"gas\":\"0x0\",\"input\":\"0x010801fd08038f0a0000fd010310708b87083d64b53e18be6d9752cee52005d5e0fcdb326946bbe858efe1662a151b1c836747009b16d2f6a9e71c0e66c113c40058b28802da555a20de3aa973de6e525bc0d4c7ce9bd687644f93e268bb4c5d31d1bbc632c89e91a1dbc77be01ab2bdceb3ff685ce56cb8394808f71bf458d749abd50df3780a66c7d5a33d42019b124cb22bd310f989deb862eb552c749b056fef7b3bb646287ea25a514f4e0a3d677cd2738ea4b8eadc4ce02de91e93d5f7b9b4f978562fe56ff3e3b82a840692f4652db81bf6c6446da4b9bd6f75220c766301bb0673adf25b4434a0553cace2f15872711fb20e71c64b68876a80451238628f683a1d64d69aa14ffd0584cf08b21f3bd1da2c842b2ba7cfde089640420eaa94d59499e540fb11c29de8aaf0b2c165d6d6cf8267ef8f21a89d00bb8477d35708a5a12f31b75e9edec88fe06828438f089a44a3f58aa8816c37d67a601fe69d005b0ba1fa8cd4f40641a9a91a382f613e048b44147283601b6d940d8c5ed28c294fc21897f28016ddea3f111f5bf2a3dd6a1492266b73f5e9503ce7b81f05c376d8ed3dead3b92c2f40ebecefeea08480630e3367928e9eb8f633e83793d854b3ce92bbb1e43910156b297eabe820659b43b5466ab62799e4c6aa3a3eef6859ccd2872712931c5f587875f4b56f964591361be1b5a6e787baaa97507fead6be1d0748f365699505f8879cff32c4b36c27e7396fbe17683edf564bc9995cd77f9703fe351914e4aac15f5e24c77b0b7868ba4074c48e4ac59eb952e6475583851e3e4436c40e590517ae26db869cb05356feedda4ba623026795e9198d7fea94ad8b429debb86c959da6e5d11acd626fc12f48054c6183da31dc837187528d2652281a8a45a43c6096be0981087852a8350588b7277be922f369f23ef9b505c158f66f16a53a72b53ae971958c60bfebed89134ff856493df5b2bd2b166816caca792515a7130a894c1e2bbb6c11219f14cbf42c4ff81d14bb676a50d89328c4d98ea61b609c5b4a306e3be3ee0edbcf551f5b839c6ffcde85b07dc4a04732c7298feba8e33471f5509a271146\"}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getTransactionByHash\",\"jsonrpc\":\"2.0\",\"params\":[\"0xfa8863899e18830d93de2a476db4c078d8ba284af3cf4c69ae6d2f66a2bc7cfe\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":1,\"jsonrpc\":\"2.0\",\"result\":{\"hash\":\"0xfa8863899e5e8f2d2d729d9694d7f39a0688a1c7e1059287219edfd6b67e80f4\",\"nonce\":\"0xa77\",\"blockHash\":\"0x00000a9021b0790da106a1de3c397d50ac3d8fd049b9f09df3f2cbf2df93414d\",\"blockNumber\":\"0xa90\",\"transactionIndex\":\"0x1\",\"from\":\"0x2338e108bcb4bd56ed1b4584848a1ef2fcf2fa75\",\"to\":\"0x2338e108bcb4bd56ed1b4584848a1ef2fcf2fa75\",\"value\":\"0x01\",\"gasPrice\":\"0x0\",\"gas\":\"0x0\",\"input\":\"0x010801fd08038f0a0000fd010310708b87083d64b53e18be6d9752cee52005d5e0fcdb326946bbe858efe1662a151b1c836747009b16d2f6a9e71c0e66c113c40058b28802da555a20de3aa973de6e525bc0d4c7ce9bd687644f93e268bb4c5d31d1bbc632c89e91a1dbc77be01ab2bdceb3ff685ce56cb8394808f71bf458d749abd50df3780a66c7d5a33d42019b124cb22bd310f989deb862eb552c749b056fef7b3bb646287ea25a514f4e0a3d677cd2738ea4b8eadc4ce02de91e93d5f7b9b4f978562fe56ff3e3b82a840692f4652db81bf6c6446da4b9bd6f75220c766301bb0673adf25b4434a0553cace2f15872711fb20e71c64b68876a80451238628f683a1d64d69aa14ffd0584cf08b21f3bd1da2c842b2ba7cfde089640420eaa94d59499e540fb11c29de8aaf0b2c165d6d6cf8267ef8f21a89d00bb8477d35708a5a12f31b75e9edec88fe06828438f089a44a3f58aa8816c37d67a601fe69d005b0ba1fa8cd4f40641a9a91a382f613e048b44147283601b6d940d8c5ed28c294fc21897f28016ddea3f111f5bf2a3dd6a1492266b73f5e9503ce7b81f05c376d8ed3dead3b92c2f40ebecefeea08480630e3367928e9eb8f633e83793d854b3ce92bbb1e43910156b297eabe820659b43b5466ab62799e4c6aa3a3eef6859ccd2872712931c5f587875f4b56f964591361be1b5a6e787baaa97507fead6be1d0748f365699505f8879cff32c4b36c27e7396fbe17683edf564bc9995cd77f9703fe351914e4aac15f5e24c77b0b7868ba4074c48e4ac59eb952e6475583851e3e4436c40e590517ae26db869cb05356feedda4ba623026795e9198d7fea94ad8b429debb86c959da6e5d11acd626fc12f48054c6183da31dc837187528d2652281a8a45a43c6096be0981087852a8350588b7277be922f369f23ef9b505c158f66f16a53a72b53ae971958c60bfebed89134ff856493df5b2bd2b166816caca792515a7130a894c1e2bbb6c11219f14cbf42c4ff81d14bb676a50d89328c4d98ea61b609c5b4a306e3be3ee0edbcf551f5b839c6ffcde85b07dc4a04732c7298feba8e33471f5509a271146\"}}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-32600,\"message\":\"No information available about transaction\"}"
        ]
    },
    "eth_getTransactionByBlockHashAndIndex": {
        "type": "command",
        "name": "eth_getTransactionByBlockHashAndIndex",
        "desc": "[ETH] Get transaction by block hash and tx index",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <block hash>,<tx index>"
                }
            }
        },
        "response": {
            "type": "ethtransaction",
            "name": "tx",
            "desc": "tx data"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getTransactionByBlockHashAndIndex [\"0x00000a9021b0790da106a1de3c397d50ac3d8fd049b9f09df3f2cbf2df93414d\",\"0x1\"]",
                "response": "{\"hash\":\"0xfa8863899e5e8f2d2d729d9694d7f39a0688a1c7e1059287219edfd6b67e80f4\",\"nonce\":\"0xa77\",\"blockHash\":\"0x00000a9021b0790da106a1de3c397d50ac3d8fd049b9f09df3f2cbf2df93414d\",\"blockNumber\":\"0xa90\",\"transactionIndex\":\"0x1\",\"from\":\"0x2338e108bcb4bd56ed1b4584848a1ef2fcf2fa75\",\"to\":\"0x2338e108bcb4bd56ed1b4584848a1ef2fcf2fa75\",\"value\":\"0x01\",\"gasPrice\":\"0x0\",\"gas\":\"0x0\",\"input\":\"0x010801fd08038f0a0000fd010310708b87083d64b53e18be6d9752cee52005d5e0fcdb326946bbe858efe1662a151b1c836747009b16d2f6a9e71c0e66c113c40058b28802da555a20de3aa973de6e525bc0d4c7ce9bd687644f93e268bb4c5d31d1bbc632c89e91a1dbc77be01ab2bdceb3ff685ce56cb8394808f71bf458d749abd50df3780a66c7d5a33d42019b124cb22bd310f989deb862eb552c749b056fef7b3bb646287ea25a514f4e0a3d677cd2738ea4b8eadc4ce02de91e93d5f7b9b4f978562fe56ff3e3b82a840692f4652db81bf6c6446da4b9bd6f75220c766301bb0673adf25b4434a0553cace2f15872711fb20e71c64b68876a80451238628f683a1d64d69aa14ffd0584cf08b21f3bd1da2c842b2ba7cfde089640420eaa94d59499e540fb11c29de8aaf0b2c165d6d6cf8267ef8f21a89d00bb8477d35708a5a12f31b75e9edec88fe06828438f089a44a3f58aa8816c37d67a601fe69d005b0ba1fa8cd4f40641a9a91a382f613e048b44147283601b6d940d8c5ed28c294fc21897f28016ddea3f111f5bf2a3dd6a1492266b73f5e9503ce7b81f05c376d8ed3dead3b92c2f40ebecefeea08480630e3367928e9eb8f633e83793d854b3ce92bbb1e43910156b297eabe820659b43b5466ab62799e4c6aa3a3eef6859ccd2872712931c5f587875f4b56f964591361be1b5a6e787baaa97507fead6be1d0748f365699505f8879cff32c4b36c27e7396fbe17683edf564bc9995cd77f9703fe351914e4aac15f5e24c77b0b7868ba4074c48e4ac59eb952e6475583851e3e4436c40e590517ae26db869cb05356feedda4ba623026795e9198d7fea94ad8b429debb86c959da6e5d11acd626fc12f48054c6183da31dc837187528d2652281a8a45a43c6096be0981087852a8350588b7277be922f369f23ef9b505c158f66f16a53a72b53ae971958c60bfebed89134ff856493df5b2bd2b166816caca792515a7130a894c1e2bbb6c11219f14cbf42c4ff81d14bb676a50d89328c4d98ea61b609c5b4a306e3be3ee0edbcf551f5b839c6ffcde85b07dc4a04732c7298feba8e33471f5509a271146\"}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getTransactionByBlockHashAndIndex\",\"jsonrpc\":\"2.0\",\"params\":[\"0x00000a9021b0790da106a1de3c397d50ac3d8fd049b9f09df3f2cbf2df93414d\",\"0x1\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":1,\"jsonrpc\":\"2.0\",\"result\":{\"hash\":\"0xfa8863899e5e8f2d2d729d9694d7f39a0688a1c7e1059287219edfd6b67e80f4\",\"nonce\":\"0xa77\",\"blockHash\":\"0x00000a9021b0790da106a1de3c397d50ac3d8fd049b9f09df3f2cbf2df93414d\",\"blockNumber\":\"0xa90\",\"transactionIndex\":\"0x1\",\"from\":\"0x2338e108bcb4bd56ed1b4584848a1ef2fcf2fa75\",\"to\":\"0x2338e108bcb4bd56ed1b4584848a1ef2fcf2fa75\",\"value\":\"0x01\",\"gasPrice\":\"0x0\",\"gas\":\"0x0\",\"input\":\"0x010801fd08038f0a0000fd010310708b87083d64b53e18be6d9752cee52005d5e0fcdb326946bbe858efe1662a151b1c836747009b16d2f6a9e71c0e66c113c40058b28802da555a20de3aa973de6e525bc0d4c7ce9bd687644f93e268bb4c5d31d1bbc632c89e91a1dbc77be01ab2bdceb3ff685ce56cb8394808f71bf458d749abd50df3780a66c7d5a33d42019b124cb22bd310f989deb862eb552c749b056fef7b3bb646287ea25a514f4e0a3d677cd2738ea4b8eadc4ce02de91e93d5f7b9b4f978562fe56ff3e3b82a840692f4652db81bf6c6446da4b9bd6f75220c766301bb0673adf25b4434a0553cace2f15872711fb20e71c64b68876a80451238628f683a1d64d69aa14ffd0584cf08b21f3bd1da2c842b2ba7cfde089640420eaa94d59499e540fb11c29de8aaf0b2c165d6d6cf8267ef8f21a89d00bb8477d35708a5a12f31b75e9edec88fe06828438f089a44a3f58aa8816c37d67a601fe69d005b0ba1fa8cd4f40641a9a91a382f613e048b44147283601b6d940d8c5ed28c294fc21897f28016ddea3f111f5bf2a3dd6a1492266b73f5e9503ce7b81f05c376d8ed3dead3b92c2f40ebecefeea08480630e3367928e9eb8f633e83793d854b3ce92bbb1e43910156b297eabe820659b43b5466ab62799e4c6aa3a3eef6859ccd2872712931c5f587875f4b56f964591361be1b5a6e787baaa97507fead6be1d0748f365699505f8879cff32c4b36c27e7396fbe17683edf564bc9995cd77f9703fe351914e4aac15f5e24c77b0b7868ba4074c48e4ac59eb952e6475583851e3e4436c40e590517ae26db869cb05356feedda4ba623026795e9198d7fea94ad8b429debb86c959da6e5d11acd626fc12f48054c6183da31dc837187528d2652281a8a45a43c6096be0981087852a8350588b7277be922f369f23ef9b505c158f66f16a53a72b53ae971958c60bfebed89134ff856493df5b2bd2b166816caca792515a7130a894c1e2bbb6c11219f14cbf42c4ff81d14bb676a50d89328c4d98ea61b609c5b4a306e3be3ee0edbcf551f5b839c6ffcde85b07dc4a04732c7298feba8e33471f5509a271146\"}}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid block hash\"}",
            "{\"code\":-32600,\"message\":\"No information available about transaction\"}"
        ]
    },
    "eth_getTransactionByBlockNumberAndIndex": {
        "type": "command",
        "name": "eth_getTransactionByBlockNumberAndIndex",
        "desc": "[ETH] Get transaction by block number and tx index",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <block number>,<tx index>"
                }
            }
        },
        "response": {
            "type": "ethtransaction",
            "name": "tx",
            "desc": "tx data"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getTransactionByBlockNumberAndIndex [\"0xa90\",\"0x1\"]",
                "response": "{\"hash\":\"0xfa8863899e5e8f2d2d729d9694d7f39a0688a1c7e1059287219edfd6b67e80f4\",\"nonce\":\"0xa77\",\"blockHash\":\"0x00000a9021b0790da106a1de3c397d50ac3d8fd049b9f09df3f2cbf2df93414d\",\"blockNumber\":\"0xa90\",\"transactionIndex\":\"0x1\",\"from\":\"0x2338e108bcb4bd56ed1b4584848a1ef2fcf2fa75\",\"to\":\"0x2338e108bcb4bd56ed1b4584848a1ef2fcf2fa75\",\"value\":\"0x01\",\"gasPrice\":\"0x0\",\"gas\":\"0x0\",\"input\":\"0x010801fd08038f0a0000fd010310708b87083d64b53e18be6d9752cee52005d5e0fcdb326946bbe858efe1662a151b1c836747009b16d2f6a9e71c0e66c113c40058b28802da555a20de3aa973de6e525bc0d4c7ce9bd687644f93e268bb4c5d31d1bbc632c89e91a1dbc77be01ab2bdceb3ff685ce56cb8394808f71bf458d749abd50df3780a66c7d5a33d42019b124cb22bd310f989deb862eb552c749b056fef7b3bb646287ea25a514f4e0a3d677cd2738ea4b8eadc4ce02de91e93d5f7b9b4f978562fe56ff3e3b82a840692f4652db81bf6c6446da4b9bd6f75220c766301bb0673adf25b4434a0553cace2f15872711fb20e71c64b68876a80451238628f683a1d64d69aa14ffd0584cf08b21f3bd1da2c842b2ba7cfde089640420eaa94d59499e540fb11c29de8aaf0b2c165d6d6cf8267ef8f21a89d00bb8477d35708a5a12f31b75e9edec88fe06828438f089a44a3f58aa8816c37d67a601fe69d005b0ba1fa8cd4f40641a9a91a382f613e048b44147283601b6d940d8c5ed28c294fc21897f28016ddea3f111f5bf2a3dd6a1492266b73f5e9503ce7b81f05c376d8ed3dead3b92c2f40ebecefeea08480630e3367928e9eb8f633e83793d854b3ce92bbb1e43910156b297eabe820659b43b5466ab62799e4c6aa3a3eef6859ccd2872712931c5f587875f4b56f964591361be1b5a6e787baaa97507fead6be1d0748f365699505f8879cff32c4b36c27e7396fbe17683edf564bc9995cd77f9703fe351914e4aac15f5e24c77b0b7868ba4074c48e4ac59eb952e6475583851e3e4436c40e590517ae26db869cb05356feedda4ba623026795e9198d7fea94ad8b429debb86c959da6e5d11acd626fc12f48054c6183da31dc837187528d2652281a8a45a43c6096be0981087852a8350588b7277be922f369f23ef9b505c158f66f16a53a72b53ae971958c60bfebed89134ff856493df5b2bd2b166816caca792515a7130a894c1e2bbb6c11219f14cbf42c4ff81d14bb676a50d89328c4d98ea61b609c5b4a306e3be3ee0edbcf551f5b839c6ffcde85b07dc4a04732c7298feba8e33471f5509a271146\"}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getTransactionByBlockNumberAndIndex\",\"jsonrpc\":\"2.0\",\"params\":[\"0xa90\",\"0x1\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":1,\"jsonrpc\":\"2.0\",\"result\":{\"hash\":\"0xfa8863899e5e8f2d2d729d9694d7f39a0688a1c7e1059287219edfd6b67e80f4\",\"nonce\":\"0xa77\",\"blockHash\":\"0x00000a9021b0790da106a1de3c397d50ac3d8fd049b9f09df3f2cbf2df93414d\",\"blockNumber\":\"0xa90\",\"transactionIndex\":\"0x1\",\"from\":\"0x2338e108bcb4bd56ed1b4584848a1ef2fcf2fa75\",\"to\":\"0x2338e108bcb4bd56ed1b4584848a1ef2fcf2fa75\",\"value\":\"0x01\",\"gasPrice\":\"0x0\",\"gas\":\"0x0\",\"input\":\"0x010801fd08038f0a0000fd010310708b87083d64b53e18be6d9752cee52005d5e0fcdb326946bbe858efe1662a151b1c836747009b16d2f6a9e71c0e66c113c40058b28802da555a20de3aa973de6e525bc0d4c7ce9bd687644f93e268bb4c5d31d1bbc632c89e91a1dbc77be01ab2bdceb3ff685ce56cb8394808f71bf458d749abd50df3780a66c7d5a33d42019b124cb22bd310f989deb862eb552c749b056fef7b3bb646287ea25a514f4e0a3d677cd2738ea4b8eadc4ce02de91e93d5f7b9b4f978562fe56ff3e3b82a840692f4652db81bf6c6446da4b9bd6f75220c766301bb0673adf25b4434a0553cace2f15872711fb20e71c64b68876a80451238628f683a1d64d69aa14ffd0584cf08b21f3bd1da2c842b2ba7cfde089640420eaa94d59499e540fb11c29de8aaf0b2c165d6d6cf8267ef8f21a89d00bb8477d35708a5a12f31b75e9edec88fe06828438f089a44a3f58aa8816c37d67a601fe69d005b0ba1fa8cd4f40641a9a91a382f613e048b44147283601b6d940d8c5ed28c294fc21897f28016ddea3f111f5bf2a3dd6a1492266b73f5e9503ce7b81f05c376d8ed3dead3b92c2f40ebecefeea08480630e3367928e9eb8f633e83793d854b3ce92bbb1e43910156b297eabe820659b43b5466ab62799e4c6aa3a3eef6859ccd2872712931c5f587875f4b56f964591361be1b5a6e787baaa97507fead6be1d0748f365699505f8879cff32c4b36c27e7396fbe17683edf564bc9995cd77f9703fe351914e4aac15f5e24c77b0b7868ba4074c48e4ac59eb952e6475583851e3e4436c40e590517ae26db869cb05356feedda4ba623026795e9198d7fea94ad8b429debb86c959da6e5d11acd626fc12f48054c6183da31dc837187528d2652281a8a45a43c6096be0981087852a8350588b7277be922f369f23ef9b505c158f66f16a53a72b53ae971958c60bfebed89134ff856493df5b2bd2b166816caca792515a7130a894c1e2bbb6c11219f14cbf42c4ff81d14bb676a50d89328c4d98ea61b609c5b4a306e3be3ee0edbcf551f5b839c6ffcde85b07dc4a04732c7298feba8e33471f5509a271146\"}}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid block number\"}",
            "{\"code\":-32600,\"message\":\"No information available about transaction\"}"
        ]
    },
    "eth_getTransactionReceipt": {
        "type": "command",
        "name": "eth_getTransactionReceipt",
        "desc": "[ETH] Get transaction receipt",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <tx hash>"
                }
            }
        },
        "response": {
            "type": "object",
            "name": "result",
            "content": {
                "transactionHash": {
                    "type": "string",
                    "desc": "transaction hash"
                },
                "transactionIndex": {
                    "type": "uint",
                    "desc": "transaction index"
                },
                "blockHash": {
                    "type": "string",
                    "desc": "block hash"
                },
                "blockNumber": {
                    "type": "uint",
                    "desc": "block number"
                },
                "from": {
                    "type": "string",
                    "desc": "tx from"
                },
                "to": {
                    "type": "string",
                    "desc": "tx to"
                },
                "cumulativeGasUsed": {
                    "type": "string",
                    "desc": "cumulative gas used"
                },
                "gasUsed": {
                    "type": "string",
                    "desc": "gas used"
                },
                "contractAddress": {
                    "type": "string",
                    "desc": "contract address",
                    "required": false
                },
                "logs": {
                    "type": "array",
                    "name": "logs",
                    "content": {
                        "log": {
                            "type": "object",
                            "required": false,
                            "content": {
                                "removed": {
                                    "type": "bool",
                                    "desc": "removed",
                                    "required": false
                                },
                                "logIndex": {
                                    "type": "uint",
                                    "desc": "log index",
                                    "required": false
                                },
                                "transactionIndex": {
                                    "type": "uint",
                                    "desc": "transaction index",
                                    "required": false
                                },
                                "transactionHash": {
                                    "type": "string",
                                    "desc": "transaction hash",
                                    "required": false
                                },
                                "blockHash": {
                                    "type": "string",
                                    "desc": "block hash",
                                    "required": false
                                },
                                "blockNumber": {
                                    "type": "uint",
                                    "desc": "block number",
                                    "required": false
                                },
                                "address": {
                                    "type": "string",
                                    "desc": "address",
                                    "required": false
                                },
                                "data": {
                                    "type": "string",
                                    "desc": "data",
                                    "required": false
                                },
                                "topics": {
                                    "type": "array",
                                    "desc": "topic list",
                                    "required": false,
                                    "content": {
                                        "topic": {
                                            "type": "string",
                                            "desc": "topic"
                                        }
                                    }
                                },
                                "type": {
                                    "type": "string",
                                    "desc": "type",
                                    "required": false
                                },
                                "id": {
                                    "type": "string",
                                    "desc": "id",
                                    "required": false
                                }
                            }
                        }
                    }
                },
                "logsBloom": {
                    "type": "string",
                    "desc": "logs bloom"
                },
                "root": {
                    "type": "string",
                    "desc": "root",
                    "required": false
                },
                "status": {
                    "type": "string",
                    "desc": "status, 0x1: ok, 0x0: fail"
                },
                "effectiveGasPrice": {
                    "type": "string",
                    "desc": "effective gas price"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getTransactionReceipt [\"0xfa8863899e18830d93de2a476db4c078d8ba284af3cf4c69ae6d2f66a2bc7cfe\"]",
                "response": "0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getTransactionReceipt\",\"jsonrpc\":\"2.0\",\"params\":[\"0xfa8863899e18830d93de2a476db4c078d8ba284af3cf4c69ae6d2f66a2bc7cfe\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":\"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"}"
            }
        ],
        "error": [
            "{\"code\":-6,\"message\":\"Invalid paramlist\"}",
            "{\"code\":-6,\"message\":\"Invalid tx hash\"}",
            "{\"code\":-7,\"message\":\"Get transaction receipt fail\"}"
        ]
    },
    "eth_getUncleByBlockHashAndIndex": {
        "type": "command",
        "name": "eth_getUncleByBlockHashAndIndex",
        "desc": "[ETH] Get Uncle by block hash and index",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <block hash>,<uncle index>"
                }
            }
        },
        "response": {
            "type": "ethblock",
            "name": "block",
            "desc": "block data"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getUncleByBlockHashAndIndex [\"0x00000a9021b0790da106a1de3c397d50ac3d8fd049b9f09df3f2cbf2df93414d\",\"0x1\"]",
                "response": "{}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getUncleByBlockHashAndIndex\",\"jsonrpc\":\"2.0\",\"params\":[\"0x00000a9021b0790da106a1de3c397d50ac3d8fd049b9f09df3f2cbf2df93414d\",\"0x1\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":{}}"
            }
        ],
        "error": [
            "{\"code\":-15,\"message\":\"Requested function is obsolete\"}"
        ]
    },
    "eth_getUncleByBlockNumberAndIndex": {
        "type": "command",
        "name": "eth_getUncleByBlockNumberAndIndex",
        "desc": "[ETH] Get Uncle by block number and index",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param: <block number>,<uncle index>"
                }
            }
        },
        "response": {
            "type": "ethblock",
            "name": "block",
            "desc": "block data"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getUncleByBlockNumberAndIndex [\"0xa90\",\"0x1\"]",
                "response": "{}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getUncleByBlockNumberAndIndex\",\"jsonrpc\":\"2.0\",\"params\":[\"0xa90\",\"0x1\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":{}}"
            }
        ],
        "error": [
            "{\"code\":-15,\"message\":\"Requested function is obsolete\"}"
        ]
    },
    "eth_newFilter": {
        "type": "command",
        "name": "eth_newFilter",
        "desc": "[ETH] Create new filter",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "newfilter",
                    "desc": "new filter"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "filterid",
            "desc": "filter id"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_newFilter [\"0xa90\",\"0x1\"]",
                "response": "{}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_newFilter\",\"jsonrpc\":\"2.0\",\"params\":[\"0xa90\",\"0x1\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":{}}"
            }
        ],
        "error": [
            "{\"code\":-15,\"message\":\"Requested function is obsolete\"}"
        ]
    },
    "eth_newBlockFilter": {
        "type": "command",
        "name": "eth_newBlockFilter",
        "desc": "[ETH] Create new block filter",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "filterid",
            "desc": "filter id"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_newBlockFilter [\"0xa90\",\"0x1\"]",
                "response": "{}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_newBlockFilter\",\"jsonrpc\":\"2.0\",\"params\":[\"0xa90\",\"0x1\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":{}}"
            }
        ],
        "error": [
            "{\"code\":-15,\"message\":\"Requested function is obsolete\"}"
        ]
    },
    "eth_newPendingTransactionFilter": {
        "type": "command",
        "name": "eth_newPendingTransactionFilter",
        "desc": "[ETH] Create new pending transaction filter",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "string",
            "name": "filterid",
            "desc": "filter id"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_newPendingTransactionFilter [\"0xa90\",\"0x1\"]",
                "response": "{}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_newPendingTransactionFilter\",\"jsonrpc\":\"2.0\",\"params\":[\"0xa90\",\"0x1\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":{}}"
            }
        ],
        "error": [
            "{\"code\":-15,\"message\":\"Requested function is obsolete\"}"
        ]
    },
    "eth_uninstallFilter": {
        "type": "command",
        "name": "eth_uninstallFilter",
        "desc": "[ETH] Uninstall filter",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "bool",
            "name": "result",
            "desc": "result"
        },
        "example": [
            {
                "request": "metabasenet-cli eth_uninstallFilter [\"0xa90\",\"0x1\"]",
                "response": "{}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_uninstallFilter\",\"jsonrpc\":\"2.0\",\"params\":[\"0xa90\",\"0x1\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":{}}"
            }
        ],
        "error": [
            "{\"code\":-15,\"message\":\"Requested function is obsolete\"}"
        ]
    },
    "eth_getFilterChanges": {
        "type": "command",
        "name": "eth_getFilterChanges",
        "desc": "[ETH] Get filter changes",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "param"
                }
            }
        },
        "response": {
            "type": "array",
            "name": "result",
            "content": {
                "param": {
                    "type": "txreceiptlogs",
                    "desc": "logs"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getFilterChanges [\"0xa90\",\"0x1\"]",
                "response": "{}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getFilterChanges\",\"jsonrpc\":\"2.0\",\"params\":[\"0xa90\",\"0x1\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":{}}"
            }
        ],
        "error": [
            "{\"code\":-15,\"message\":\"Requested function is obsolete\"}"
        ]
    },
    "eth_getFilterLogs": {
        "type": "command",
        "name": "eth_getFilterLogs",
        "desc": "[ETH] Get logs",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "filter id"
                }
            }
        },
        "response": {
            "type": "array",
            "name": "result",
            "content": {
                "param": {
                    "type": "txreceiptlogs",
                    "desc": "logs"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getFilterLogs [\"0xa90\",\"0x1\"]",
                "response": "{}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getFilterLogs\",\"jsonrpc\":\"2.0\",\"params\":[\"0xa90\",\"0x1\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":{}}"
            }
        ],
        "error": [
            "{\"code\":-15,\"message\":\"Requested function is obsolete\"}"
        ]
    },
    "eth_getFilterBlockTx": {
        "type": "command",
        "name": "eth_getFilterBlockTx",
        "desc": "[ETH] Get filter block tx",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "filter id"
                }
            }
        },
        "response": {
            "type": "array",
            "name": "result",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "block or tx hash"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getFilterBlockTx [\"0xa90\",\"0x1\"]",
                "response": "{}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getFilterBlockTx\",\"jsonrpc\":\"2.0\",\"params\":[\"0xa90\",\"0x1\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":{}}"
            }
        ],
        "error": [
            "{\"code\":-15,\"message\":\"Requested function is obsolete\"}"
        ]
    },
    "eth_getLogs": {
        "type": "command",
        "name": "eth_getLogs",
        "desc": "[ETH] Get logs",
        "request": {
            "type": "array",
            "name": "paramlist",
            "content": {
                "param": {
                    "type": "string",
                    "desc": "new filter"
                }
            }
        },
        "response": {
            "type": "array",
            "name": "result",
            "content": {
                "param": {
                    "type": "txreceiptlogs",
                    "desc": "logs"
                }
            }
        },
        "example": [
            {
                "request": "metabasenet-cli eth_getLogs [\"0xa90\",\"0x1\"]",
                "response": "{}"
            },
            {
                "request": "curl -d '{\"id\":3,\"method\":\"eth_getLogs\",\"jsonrpc\":\"2.0\",\"params\":[\"0xa90\",\"0x1\"]}' http://127.0.0.1:8812",
                "response": "{\"id\":3,\"jsonrpc\":\"2.0\",\"result\":{}}"
            }
        ],
        "error": [
            "{\"code\":-15,\"message\":\"Requested function is obsolete\"}"
        ]
    }
}