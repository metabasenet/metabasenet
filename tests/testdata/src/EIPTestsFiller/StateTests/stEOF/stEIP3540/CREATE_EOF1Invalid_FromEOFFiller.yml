# CREATE opcode with invalid EOF1 in initcode or in deployed code called from inside EOF contract
# ---
# Active EIPs: 3540, 3670, 4200, 4750, 5450
CREATE_EOF1Invalid_FromEOF:
  env:
    currentCoinbase: 2adc25665018aa1fe0e6bc666dac8fc2697ff9ba
    currentDifficulty: '0x020000'
    currentGasLimit: '89128960'
    currentBaseFee: '10'
    currentNumber: '1'
    currentTimestamp: '1000'
    previousHash: 5e20a0453cecd065ea59c37ac63e079ee08998b6045136a8ce6635c7912ec0b6

  pre:
    a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: 200000000
      code: ''
      nonce: 0
      storage: {}
    b94f5374fce5edbc8e2a8697c15331677e6ebf0b:
      balance: 0
      code: ":yul-eof { calldatacopy(0, 0, calldatasize()) sstore(0, create(0, 0, calldatasize())) sstore(1, 1) stop() }"
      nonce: 0
      storage: {}

  transaction:
    data: 
      # Malformed initcode

      # No magic
      - ':raw 0xef'  # (data index: 0)
      # Invalid magic
      - ':raw 0xef0101010004020001002904000000000000027fef000101000402000100010400000000000000fe00000000000000000000000060005260146000f3'  # (data index: 1)
      - ':raw 0xef0201010004020001002904000000000000027fef000101000402000100010400000000000000fe00000000000000000000000060005260146000f3'  # (data index: 2)
      - ':raw 0xefff01010004020001002904000000000000027fef000101000402000100010400000000000000fe00000000000000000000000060005260146000f3'  # (data index: 3)
      # No version
      - ':raw 0xef00'  # (data index: 4)
      # Invalid version
      - ':raw 0xef0000010004020001002904000000000000027fef000101000402000100010400000000000000fe00000000000000000000000060005260146000f3'  # (data index: 5)
      - ':raw 0xef0002010004020001002904000000000000027fef000101000402000100010400000000000000fe00000000000000000000000060005260146000f3'  # (data index: 6)
      - ':raw 0xef00ff010004020001002904000000000000027fef000101000402000100010400000000000000fe00000000000000000000000060005260146000f3'  # (data index: 7)
      # No header
      - ':raw 0xef0001'  # (data index: 8)
      # No section
      - ':raw 0xef000100'  # (data index: 9)
      # No type section size
      - ':raw 0xef000101'  # (data index: 10)
      # Type section type incomplete
      - ':raw 0xef00010100'  # (data index: 11)
      # No code section after type section
      - ':raw 0xef0001010004'  # (data index: 12)
      # No total of code sections
      - ':raw 0xef000101000402'  # (data index: 13)
      # Total of code sections incomplete
      - ':raw 0xef00010100040200'  # (data index: 14)
      # No code section size
      - ':raw 0xef0001010004020001'  # (data index: 15)
      # Code section size incomplete
      - ':raw 0xef000101000402000100'  # (data index: 16)
      # No data section after code section sizes
      - ':raw 0xef00010100040200010029'  # (data index: 17)
      # No data size
      - ':raw 0xef0001010004020001002904'  # (data index: 18)
      # Data size incomplete
      - ':raw 0xef000101000402000100290400'  # (data index: 19)
      # No section terminator after data section size
      - ':raw 0xef00010100040200010029040000'  # (data index: 20)
      # No type section contents
      - ':raw 0xef0001010004020001002904000000'  # (data index: 21)
      # Type section contents incomplete (no outputs and max stack)
      - ':raw 0xef000101000402000100290400000000'  # (data index: 22)
      # Type section contents incomplete (no max stack)
      - ':raw 0xef00010100040200010029040000000000'  # (data index: 23)
      # Type section contents incomplete (max stack incomplete)
      - ':raw 0xef0001010004020001002904000000000000'  # (data index: 24)
      # No code section contents
      - ':raw 0xef000101000402000100290400000000000002'  # (data index: 25)
      # Code section contents incomplete
      - ':raw 0xef0001010004020001002904000000000000027f'  # (data index: 26)
      # Trailing bytes after code section
      - ':raw 0xef0001010004020001002904000000000000027fef000101000402000100010400000000000000fe00000000000000000000000060005260146000f3aabbcc'  # (data index: 27)
      # Empty code section
      - ':raw 0xef00010100040200000400000000000000'  # (data index: 28)
      - ':raw 0xef000101000402000100000400000000000000'  # (data index: 29)
      # Empty code section with non-empty data section
      - ':raw 0xef00010100040200000400140000000000ef000101000402000100010400000000000000fe'  # (data index: 30)
      - ':raw 0xef000101000402000100000400140000000000ef000101000402000100010400000000000000fe'  # (data index: 31)
      # Code section preceding type section
      - ':raw 0xef0001020001002901000404000000000000027fef000101000402000100010400000000000000fe00000000000000000000000060005260146000f3'  # (data index: 32)
      # Data section preceding type section
      - ':raw 0xef0001040014010004020001000c00000000036014601f60003960146000f3ef000101000402000100010400000000000000fe'  # (data index: 33)
      # Data section preceding code section
      - ':raw 0xef0001010004040014020001000c00000000036014601f60003960146000f3ef000101000402000100010400000000000000fe'  # (data index: 34)
      # No data section
      - ':raw 0xef0001010004020001002900000000027fef000101000402000100010400000000000000fe00000000000000000000000060005260146000f3'  # (data index: 35)
      # No data section contents
      - ':raw 0xef0001010004020001000c04001400000000036014601f60003960146000f3'  # (data index: 36)
      # Data section contents incomplete
      - ':raw 0xef0001010004020001000c04001400000000036014601f60003960146000f3ef0001'  # (data index: 37)
      # Trailing bytes after data section
      - ':raw 0xef0001010004020001000c04001400000000036014601f60003960146000f3ef000101000402000100010400000000000000feaabbcc'  # (data index: 38)
      # Multiple data sections
      - ':raw 0xef0001010004020001000c04001404000100000000036014601f60003960146000f3ef000101000402000100010400000000000000fedd'  # (data index: 39)
      # Multiple code and data sections
      - ':raw 0xef0001010008020002000c000104001404000100000000036014601f60003960146000f3feef000101000402000100010400000000000000fedd'  # (data index: 40)
      # Unknown section IDs
      #   at the beginning
      - ':raw 0xef0001050001010004020001000c04001400000000036014601f60003960146000f3ef000101000402000100010400000000000000fe'  # (data index: 41)
      - ':raw 0xef0001060001010004020001000c04001400000000036014601f60003960146000f3ef000101000402000100010400000000000000fe'  # (data index: 42)
      - ':raw 0xef0001ff0001010004020001000c04001400000000036014601f60003960146000f3ef000101000402000100010400000000000000fe'  # (data index: 43)
      #  after types section
      - ':raw 0xef0001010004050001020001000c04001400000000036014601f60003960146000f3ef000101000402000100010400000000000000fe'  # (data index: 44)
      - ':raw 0xef0001010004060001020001000c04001400000000036014601f60003960146000f3ef000101000402000100010400000000000000fe'  # (data index: 45)
      - ':raw 0xef0001010004ff0001020001000c04001400000000036014601f60003960146000f3ef000101000402000100010400000000000000fe'  # (data index: 46)
      #  after code section
      - ':raw 0xef0001010004020001000c05000104001400000000036014601f60003960146000f3ef000101000402000100010400000000000000fe'  # (data index: 47)
      - ':raw 0xef0001010004020001000c06000104001400000000036014601f60003960146000f3ef000101000402000100010400000000000000fe'  # (data index: 48)
      - ':raw 0xef0001010004020001000cff000104001400000000036014601f60003960146000f3ef000101000402000100010400000000000000fe'  # (data index: 49)
      #  after data section
      - ':raw 0xef0001010004020001000c04001405000100000000036014601f60003960146000f3ef000101000402000100010400000000000000fe'  # (data index: 50)
      - ':raw 0xef0001010004020001000c04001406000100000000036014601f60003960146000f3ef000101000402000100010400000000000000fe'  # (data index: 51)
      - ':raw 0xef0001010004020001000c040014ff000100000000036014601f60003960146000f3ef000101000402000100010400000000000000fe'  # (data index: 52)
      # Legacy initcode => EOF code
      # deployed code without data section
      # deployed code section: PUSH1(0) POP STOP
      - ':yul { mstore(0, 0xef00010100040200010004040000000000000160005000000000000000000000) return(0, 23) }'  # (data index: 53)
      # deployed code with data section
      # deployed code section: 
      #     code: PUSH1(0) POP STOP
      #     data section: aabbccdd
      - ':yul { mstore(0, 0xef00010100040200010004040004000000000160005000aabbccdd0000000000) return(0, 27) }'  # (data index: 54)

      
      # Valid EOF initcode returning malformed code

      # No magic
      # code to deploy: ef
      - ':yul-eof { mstore(0, 0xef00000000000000000000000000000000000000000000000000000000000000) return(0, 1) }'  # (data index: 55)
      # Invalid magic
      # code to deploy: ef010101000402000100010400000000000000fe
      - ':yul-eof { mstore(0, 0xef010101000402000100010400000000000000fe000000000000000000000000) return(0, 20) }'  # (data index: 56)
      # code to deploy: ef020101000402000100010400000000000000fe
      - ':yul-eof { mstore(0, 0xef020101000402000100010400000000000000fe000000000000000000000000) return(0, 20) }'  # (data index: 57)
      # code to deploy: efff0101000402000100010400000000000000fe
      - ':yul-eof { mstore(0, 0xefff0101000402000100010400000000000000fe000000000000000000000000) return(0, 20) }'  # (data index: 58)
      # No version
      # code to deploy: ef00
      - ':yul-eof { mstore(0, 0xef00000000000000000000000000000000000000000000000000000000000000) return(0, 2) }'  # (data index: 59)
      # Invalid version
      # code to deploy: ef000001000402000100010400000000000000fe
      - ':yul-eof { mstore(0, 0xef000001000402000100010400000000000000fe000000000000000000000000) return(0, 20) }'  # (data index: 60)
      # code to deploy: ef000201000402000100010400000000000000fe
      - ':yul-eof { mstore(0, 0xef000201000402000100010400000000000000fe000000000000000000000000) return(0, 20) }'  # (data index: 61)
      # code to deploy: ef00ff01000402000100010400000000000000fe
      - ':yul-eof { mstore(0, 0xef00ff01000402000100010400000000000000fe000000000000000000000000) return(0, 20) }'  # (data index: 62)
      # No header
      # code to deploy: ef0001
      - ':yul-eof { mstore(0, 0xef00010000000000000000000000000000000000000000000000000000000000) return(0, 3) }'  # (data index: 63)
      # No type section size
      # code to deploy: ef000101
      - ':yul-eof { mstore(0, 0xef00010100000000000000000000000000000000000000000000000000000000) return(0, 4) }'  # (data index: 64)
      # Type section size incomplete
      # code to deploy: ef00010100
      - ':yul-eof { mstore(0, 0xef00010100000000000000000000000000000000000000000000000000000000) return(0, 5) }'  # (data index: 65)
      # Empty code section with non-empty data section
      # code to deploy: ef000101000402000100000400020000000000aabb
      - ':yul-eof { mstore(0, 0xef000101000402000100000400020000000000aabb0000000000000000000000) return(0, 21) }'  # (data index: 66)
      # No total of code sections
      # code to deploy: ef000101000402
      - ':yul-eof { mstore(0, 0xef00010100040200000000000000000000000000000000000000000000000000) return(0, 7) }'  # (data index: 67)
      # Total of code sections incomplete
      # code to deploy: ef00010100040200
      - ':yul-eof { mstore(0, 0xef00010100040200000000000000000000000000000000000000000000000000) return(0, 8) }'  # (data index: 68)
      # No code section size
      # code to deploy: ef0001010004020001
      - ':yul-eof { mstore(0, 0xef00010100040200010000000000000000000000000000000000000000000000) return(0, 9) }'  # (data index: 69)
      # Code section size incomplete
      # code to deploy: ef000101000402000100
      - ':yul-eof { mstore(0, 0xef00010100040200010000000000000000000000000000000000000000000000) return(0, 10) }'  # (data index: 70)
      # No data section after code section size
      # code to deploy: 0xef00010100040200010001
      - ':yul-eof { mstore(0, 0xef00010100040200010001000000000000000000000000000000000000000000) return(0, 11) }'  # (data index: 71)
      # No data size
      # code to deploy: 0xef0001010004020001000104
      - ':yul-eof { mstore(0, 0xef00010100040200010001040000000000000000000000000000000000000000) return(0, 12) }'  # (data index: 72)
      # Data size incomplete
      # code to deploy: 0xef000101000402000100010400
      - ':yul-eof { mstore(0, 0xef00010100040200010001040000000000000000000000000000000000000000) return(0, 13) }'  # (data index: 73)
      # No section terminator after data section size
      # code to deploy: 0xef00010100040200010001040002
      - ':yul-eof { mstore(0, 0xef00010100040200010001040002000000000000000000000000000000000000) return(0, 14) }'  # (data index: 74)
      # No type section contents
      # code to deploy: 0xef0001010004020001000104000200
      - ':yul-eof { mstore(0, 0xef00010100040200010001040002000000000000000000000000000000000000) return(0, 15) }'  # (data index: 75)
      # Type section contents (no outputs and max stack)
      # code to deploy: 0xef000101000402000100010400020000
      - ':yul-eof { mstore(0, 0xef00010100040200010001040002000000000000000000000000000000000000) return(0, 16) }'  # (data index: 76)
      # Type section contents (no max stack)
      # code to deploy: 0xef00010100040200010001040002000000
      - ':yul-eof { mstore(0, 0xef00010100040200010001040002000000000000000000000000000000000000) return(0, 17) }'  # (data index: 77)
      # Type section contents (max stack incomplete)
      # code to deploy: 0xef0001010004020001000104000200000000
      - ':yul-eof { mstore(0, 0xef00010100040200010001040002000000000000000000000000000000000000) return(0, 18) }'  # (data index: 78)
      # No code section contents
      # code to deploy: 0xef000101000402000100010400020000000000
      - ':yul-eof { mstore(0, 0xef00010100040200010001040002000000000000000000000000000000000000) return(0, 19) }'  # (data index: 79)
      # Code section contents incomplete
      # code to deploy: 0xef0001010004020001002904000000000000027f
      - ':yul-eof { mstore(0, 0xef0001010004020001002904000000000000027f000000000000000000000000) return(0, 20) }'  # (data index: 80)
      # Trailing bytes after code section
      # code to deploy: 0xef000101000402000100010400000000000000feaabbcc
      - ':yul-eof { mstore(0, 0xef000101000402000100010400000000000000feaabbcc000000000000000000) return(0, 23) }'  # (data index: 81)
      # Empty code section
      #   code to deploy: 0xef000101000402000100000400000000000000
      - ':yul-eof { mstore(0, 0xef00010100040200010000040000000000000000000000000000000000000000) return(0, 19) }'  # (data index: 82)
      # Empty code section with non-empty data section
      #   code to deploy: ef000101000402000100000400020000000000aabb
      - ':yul-eof { mstore(0, 0xef000101000402000100000400020000000000aabb0000000000000000000000) return(0, 21) }'  # (data index: 83)
      # Code section preceding type section
      # code to deploy: ef000102000100010100040400020000000000feaabb
      - ':yul-eof { mstore(0, 0xef000102000100010100040400020000000000feaabb00000000000000000000) return(0, 22) }'  # (data index: 84)
      # Data section preceding type section
      # code to deploy: ef000104000201000402000100010000000000feaabb
      - ':yul-eof { mstore(0, 0xef000104000201000402000100010000000000feaabb00000000000000000000) return(0, 22) }'  # (data index: 85)
      # Data section preceding code section
      # code to deploy: ef000101000404000202000100010000000000feaabb
      - ':yul-eof { mstore(0, 0xef000101000404000202000100010000000000feaabb00000000000000000000) return(0, 22) }'  # (data index: 86)
      # Data section without code section
      # code to deploy: ef00010100040400020000000000aabb
      - ':yul-eof { mstore(0, 0xef00010100040400020000000000aabb00000000000000000000000000000000) return(0, 16) }'  # (data index: 87)
      # No data section
      # code to deploy: ef000101000402000100010000000000fe
      - ':yul-eof { mstore(0, 0xef000101000402000100010000000000fe000000000000000000000000000000) return(0, 17) }'  # (data index: 88)
      # No data section contents
      # code to deploy: ef000101000402000100010400020000000000fe
      - ':yul-eof { mstore(0, 0xef000101000402000100010400020000000000fe000000000000000000000000) return(0, 20) }'  # (data index: 89)
      # Data section contents incomplete
      # code to deploy: ef000101000402000100010400020000000000feaa
      - ':yul-eof { mstore(0, 0xef000101000402000100010400020000000000feaa0000000000000000000000) return(0, 21) }'  # (data index: 90)
      # Trailing bytes after data section
      # code to deploy: ef000101000402000100010400020000000000feaabbccdd
      - ':yul-eof { mstore(0, 0xef000101000402000100010400020000000000feaabbccdd0000000000000000) return(0, 24) }'  # (data index: 91)
      # Multiple data sections
      # code to deploy: ef000101000402000100010400020400020000000000feaabbaabb
      - ':yul-eof { mstore(0, 0xef000101000402000100010400020400020000000000feaabbaabb0000000000) return(0, 27) }'  # (data index: 92)
      # Multiple code and data sections
      # code to deploy: ef000101000802000200010001040002040002000000000000000000fefeaabbaabb
      - ':yul-eof { mstore(0, 0xef000101000802000200010001040002040002000000000000000000fefeaabb) mstore(32, 0xaabb000000000000000000000000000000000000000000000000000000000000) return(0, 34) }'  # (data index: 93)
      # Unknown section IDs
      #  at the beginning:
      # code to deploy: ef000105000101000402000100010400000000000000fe
      - ':yul-eof { mstore(0, 0xef000105000101000402000100010400000000000000fe000000000000000000) return(0, 23) }'  # (data index: 94)
      # code to deploy: ef000106000101000402000100010400000000000000fe
      - ':yul-eof { mstore(0, 0xef000106000101000402000100010400000000000000fe000000000000000000) return(0, 23) }'  # (data index: 95)
      # code to deploy: ef0001ff000101000402000100010400000000000000fe
      - ':yul-eof { mstore(0, 0xef0001ff000101000402000100010400000000000000fe000000000000000000) return(0, 23) }'  # (data index: 96)
      #  after types section
      # code to deploy: ef000101000405000102000100010400000000000000fe
      - ':yul-eof { mstore(0, 0xef000101000405000102000100010400000000000000fe000000000000000000) return(0, 23) }'  # (data index: 97)
      # code to deploy: ef000101000406000102000100010400000000000000fe
      - ':yul-eof { mstore(0, 0xef000101000406000102000100010400000000000000fe000000000000000000) return(0, 23) }'  # (data index: 98)
      # code to deploy: ef0001010004ff000102000100010400000000000000fe
      - ':yul-eof { mstore(0, 0xef0001010004ff000102000100010400000000000000fe000000000000000000) return(0, 23) }'  # (data index: 99)
      #  after code section
      # code to deploy: ef000101000402000100010500010400000000000000fe
      - ':yul-eof { mstore(0, 0xef000101000402000100010500010400000000000000fe000000000000000000) return(0, 23) }'  # (data index: 100)
      # code to deploy: ef000101000402000100010600010400000000000000fe
      - ':yul-eof { mstore(0, 0xef000101000402000100010600010400000000000000fe000000000000000000) return(0, 23) }'  # (data index: 101)
      # code to deploy: ef00010100040200010001ff00010400000000000000fe
      - ':yul-eof { mstore(0, 0xef00010100040200010001ff00010400000000000000fe000000000000000000) return(0, 23) }'  # (data index: 102)
      #  after data section
      # code to deploy: ef000101000402000100010400000500010000000000fe
      - ':yul-eof { mstore(0, 0xef000101000402000100010400000500010000000000fe000000000000000000) return(0, 23) }'  # (data index: 103)
      # code to deploy: ef000101000402000100010400000600010000000000fe
      - ':yul-eof { mstore(0, 0xef000101000402000100010400000600010000000000fe000000000000000000) return(0, 23) }'  # (data index: 104)
      # code to deploy: ef00010100040200010001040000ff00010000000000fe
      - ':yul-eof { mstore(0, 0xef00010100040200010001040000ff00010000000000fe000000000000000000) return(0, 23) }'  # (data index: 105)
      # EOF initcode => legacy code
      # initcode without data section
      # initcode code section: 'RETURN(0, 1)'
      # code to deploy: 'STOP'
      - ':raw 0xef00010100040200010005040000000000000260016000f3'  # (data index: 106)
      # inicode with data section
      # initcode code section: 'CODECOPY(0, 31, 1) RETURN(0,1)' data section: '00'
      # code to deploy: 'STOP'
      - ':raw 0xef0001010004020001000c04000100000000036001601f60003960016000f300'  # (data index: 107)
    gasLimit:
      - 15000000
    gasPrice: 10
    nonce: 0
    secretKey: 45a915e4d060149eb4365960e6a7a45f334393093061116b197e3240065ff2d8
    to: 'b94f5374fce5edbc8e2a8697c15331677e6ebf0b'
    value:
      - 0

  expect:
      # Bumping nonce
      - indexes: {}
        network:
          - '>=Prague'
        result:
          a94f5374fce5edbc8e2a8697c15331677e6ebf0b:
            nonce: 1
          b94f5374fce5edbc8e2a8697c15331677e6ebf0b:
            nonce: 1
            storage:
              1 : '1'
